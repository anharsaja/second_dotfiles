var __webpack_exports__={};const presence=new Presence({clientId:"634332519398899724"}),browsingTimestamp=Math.floor(Date.now()/1e3);async function getStrings(){return presence.getStrings({privacy:"general.privacy",terms:"general.terms",browse:"general.browsing",search:"general.searchFor",viewHome:"general.viewHome",buttonViewPage:"general.buttonViewPage"},await presence.getSetting("lang").catch((()=>"en")))}let strings,oldLang=null;presence.on("UpdateData",(async()=>{let e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/0-9/1CAK/assets/logo.png",startTimestamp:browsingTimestamp};const t=await presence.getSetting("lang").catch((()=>"en")),{pathname:i,href:s}=document.location;if(oldLang===t&&strings||(oldLang=t,strings=await getStrings()),i.includes("of"))e.details="of"===i?document.querySelector("#content > h3").textContent.trim():document.querySelector("#content > div > table > tbody > tr > td > div > .blur a > b")?.textContent;else if(i.includes("saved"))document.querySelector("#content > p")?e.details="Viewing saved posts":e.details="Viewing their saved posts";else if(i.includes("voteof"))document.querySelector("#content > p")?e.details="Viewing liked posts":e.details="Viewing their liked posts";else if(i.includes("legendary"))e.details="Viewing legendary posts";else if(i.includes("search"))e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",e.details=strings.search,e.state=i.slice(10,i.length);else{const t={"":{details:strings.viewHome},trends:{details:"Viewing trending posts"},trending:{details:"Viewing trending posts"},recent:{details:"Viewing recent uploads"},tvvote:{details:"Viewing fun videos"},friends:{details:"Viewing their friend list"},rules:{details:"Reading the rules",smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/reading.png"},notifications:{details:"Viewing notifications"},upload:{details:"Viewing the upload section"},about:{details:"About 1CAK/1CUK"},terms:{details:strings.terms},privacy:{details:strings.privacy},disclaimer:{details:"Reading the disclaimer",smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/reading.png"},advertise:{details:"Advertising on 1CAK"},weeklytop:{details:"Viewing weekly top users"},alltimetop:{details:"Viewing all time top users"},privacysettings:{details:"Viewing their settings"},preferences:{details:"Viewing their settings"}};for(const[s,n]of Object.entries(t))i.replace(/_/gm,"").includes(s)&&(e={...e,...n})}"/"!==i&&(e.buttons=[{label:strings.buttonViewPage,url:s}]),e.details||(e.details=strings.browse),presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;