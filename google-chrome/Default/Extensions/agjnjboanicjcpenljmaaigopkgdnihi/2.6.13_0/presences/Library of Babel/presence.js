var __webpack_exports__={};const presence=new Presence({clientId:"1212508565802192936"});presence.on("UpdateData",(async()=>{if(!document.location.toString())return;let e=document.location.pathname;e.includes("theory")&&(e="/theory.html");const a=document.title.replace("Anglishized","").replace("Theory - ","").replace("Image Search: ",""),t={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/L/Library%20of%20Babel/assets/logo.png",largeImageText:"hex802",name:"Library of Babel",type:3},s=document.querySelector("#page")?.value;switch(e){case"/":t.details="In the lobby (home)";break;case"/about.html":t.details="Learning about the archives";break;case"/search.html":t.details="Searching through the archives";break;case"/imagesearch.html":t.details="Searching through the image archives";break;case"/imagesearch.cgi":t.details=`Viewing image ${a}`;break;case"/search.cgi":t.details="Searching the archives for:",t.state=document.querySelector("#find").value;break;case"/anglishize.cgi":t.details=`Reading ${a.replace(` ${s}`,"")} (page ${s})`,t.details=`Reading ${document.querySelector(".bookcont > h3")?.textContent} (page ${s}, Anglishized)`;break;case"/book.cgi":case"/bookmark.cgi":t.details=`Reading Bookmark ${a.replace(` ${s}`,"")}`;break;case"/browse.cgi":{t.details="Browsing the archives";const e=document.querySelector("#hexer")?.value,a=document.querySelector("#inside1"),s=a?.value?.slice(1),c=document.querySelector("#inside2"),i=c?.value?.slice(1),r=document.querySelector("#inside3"),l=r?.value?.slice(1);t.state="",e&&(t.state+=`Hex ${e}`),a?.style.display&&s&&(t.state+=`, Wall ${s}`),c?.style.display&&i&&(t.state+=`, Shelf ${i}`),r?.style.display&&l&&(t.state+=`, Volume ${l}`)}break;case"/theory.html":case"/referencehex.html":t.details=`Learning about ${a}`;break;case"/slideshow.html":t.details="Viewing images";break;case"/coloroscopy.html":t.details="Undergoing coloroscopy";break;default:t.details="Navigating the site"}presence.setActivity(t)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;