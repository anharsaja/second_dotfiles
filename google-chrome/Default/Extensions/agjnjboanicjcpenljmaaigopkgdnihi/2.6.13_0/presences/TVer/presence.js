var __webpack_exports__={};const presence=new Presence({clientId:"1206601150607134780"}),browsingTimestamp=Math.floor(Date.now()/1e3),getStrings=async()=>presence.getStrings({buttonWatchStream:"general.buttonWatchStream",buttonWatchVideo:"general.buttonWatchVideo",live:"general.live",pause:"general.paused",paused:"general.paused",play:"general.playing",playing:"general.playing",readingArticle:"general.readingArticle",search:"general.search",searchFor:"general.searchFor",searchSomething:"general.searchSomething",upload:"youtube.upload",viewHome:"general.viewHome",viewList:"general.viewList",viewSeries:"general.viewSeries",waitingLive:"general.waitingLive",waitingLiveThe:"general.waitingLiveThe",watchingLive:"general.watchingLive",watchingVid:"general.watchingVid"},await presence.getSetting("lang").catch((()=>"en")));let strings,oldLang=null;presence.on("UpdateData",(async()=>{const e={name:"Tver",type:3,largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/T/TVer/assets/logo.png",startTimestamp:browsingTimestamp},[t,s,i,a,n,r,l,c,g]=await Promise.all([presence.getSetting("buttons"),presence.getSetting("liveDetail"),presence.getSetting("liveState"),presence.getSetting("lang").catch((()=>"en")),presence.getSetting("privacy"),presence.getSetting("timestamp"),presence.getSetting("vidDetail"),presence.getSetting("vidState"),presence.getSetting("videoPic")]),{pathname:o,href:p}=document.location,d=document.querySelector("[class^='titles_container'] h1")?.textContent,m=document.querySelector("[class^='titles_container'] h2")?.textContent;switch(oldLang===a&&strings||(oldLang=a,strings=await getStrings()),o){case"/":e.details=strings.viewHome;break;case"/mypage/fav":case"/mypage/later":case"/mypage/resume":e.details=document.querySelector("[class*='mypage-page-main_selectedTab']")?.textContent;break;default:if(o.includes("/live")){const t=document.querySelector("[class^='live-scheduled_host']"),a=document.querySelector("[class^='description_metaDetail'] > span")?.textContent;n?e.details=t?strings.waitingLive:strings.watchingLive:(g&&(e.largeImageKey=document.querySelector("[class*='live_active'] > div > img")?.src.replace(/(thumbnail\/live\/)[^/]+/,"$1small").replace(/\.jpg.*$/,".jpg")),e.details=t?strings.waitingLiveThe:s.replace("%tvStation%",a??"").replace("%seriesTitle%",m??"").replace("%title%",d??""),e.state=i.replace("%tvStation%",a).replace("%seriesTitle%",m??"").replace("%title%",d??""),e.buttons=[{label:strings.buttonWatchStream,url:p}],document.querySelector("[class^='live-finished_host']")||t||(e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/live.png",e.smallImageText=strings.live))}else if(o.includes("/episodes"))if(n)e.details=strings.watchingVid;else{g&&(e.largeImageKey=`https://statics.tver.jp/images/content/thumbnail/episode/small/${o.split("/")[2]}.jpg`);const t=document.querySelector("[class^='description_meta'] > div:nth-child(1)")?.textContent;e.details=l.replace("%tvStation%",t??"").replace("%seriesTitle%",m??"").replace("%title%",d??""),e.state=c.replace("%tvStation%",t).replace("%seriesTitle%",m??"").replace("%title%",d??"");const{paused:s}=document.querySelector("video");s||([e.startTimestamp,e.endTimestamp]=presence.getTimestampsfromMedia(document.querySelector("video"))),e.smallImageKey=s?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText=s?strings.paused:strings.playing,e.buttons=[{label:strings.buttonWatchVideo,url:p}]}else o.includes("/series")?(e.details=strings.viewSeries,n||(e.state=document.querySelector("[class^='series-main_title']")?.textContent)):o.includes("/specials")?(e.details=strings.readingArticle,n||(e.state=document.querySelector("[class^='special-feature-page-main_title']")?.textContent)):o.includes("/rankings/episode")?(e.details=strings.viewList,n||(e.state=document.querySelector("[class^='select-tabs-switch-list_container']")?.textContent)):o.includes("/search")?e.details=strings.searchSomething:e.details=strings.viewHome}r||(delete e.startTimestamp,delete e.endTimestamp),t||delete e.buttons,presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;