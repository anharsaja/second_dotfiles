var __webpack_exports__={};const presence=new Presence({clientId:"1001112348192423946"}),strings=presence.getStrings({play:"general.playing",pause:"general.paused"});let lastPlaybackState,playback,browsingTimestamp=Math.floor(Date.now()/1e3);lastPlaybackState!==playback&&(lastPlaybackState=playback,browsingTimestamp=Math.floor(Date.now()/1e3)),presence.on("UpdateData",(async()=>{const e={details:"Unknown page",largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/F/FlixTor/assets/logo.png"},t=document.querySelector("#player > div.jw-wrapper.jw-reset > div.jw-media.jw-reset > video");if(playback=!!t,playback||(e.details="Browsing...",e.startTimestamp=browsingTimestamp,presence.setActivity(e)),t&&!isNaN(t.duration)){const a=document.querySelector("div.watch-header.h4.mb-0.font-weight-normal.link.hidden-sm-down"),s=document.querySelector("#playercontainer span.outPes"),n=document.querySelector("#playercontainer span.outPep");e.largeImageKey=document.querySelector('meta[property="og:image"]').getAttribute("content").replace("https:https:","https:"),e.smallImageKey=t.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText=t.paused?(await strings).pause:(await strings).play,[e.startTimestamp,e.endTimestamp]=presence.getTimestamps(Math.floor(t.currentTime),Math.floor(t.duration)),s&&n?(e.details=a?a.textContent:"Title not found...",e.state=`Season ${s.textContent} Episode ${n.textContent}`,e.buttons=[{label:e.details.length>=30?"View Now":e.details,url:document.location.href.split("/season/")[0]},{label:e.state,url:document.location.href}]):!s&&n?(e.details=a?a.textContent:"Title not found...",e.state=`Episode ${n.textContent}`,e.buttons=[{label:e.details.length>=30?"View Now":e.details,url:document.location.href.split("/episode/")[0]},{label:e.state,url:document.location.href}]):(e.details="Watching",e.state=a?a.textContent:"Title not found...",e.buttons=[{label:e.state.length>=30?"Watch Now":e.state,url:document.location.href}]),t.paused&&(delete e.startTimestamp,delete e.endTimestamp),a&&presence.setActivity(e,!t.paused)}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;