var __webpack_exports__={};const presence=new Presence({clientId:"818756651279450144"});presence.on("UpdateData",(async()=>{const e=location.pathname,[t]=location.host.split("."),n={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/T/Tailwind%20CSS/assets/logo.png",startTimestamp:Math.round(Date.now()/1e3)};if("tailwindui.com"===location.host)if(n.details="Viewing page:",e.includes("/components"))if(e.includes("/components/")){const e=location.pathname.split("/");n.details="Viewing component:",n.state=`${e[e.length-2].replaceAll("-"," ").replace(/(^\w|\s\w)/g,(e=>e.toUpperCase()))} - ${document.querySelector("main .max-w-8xl h2")?.textContent||"Unknown component"}`}else n.details="Browsing components",n.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png";else switch(e){case"/pricing":n.state="Tailwind UI - Pricing";break;case"/login":n.state="Tailwind UI - Login";break;case"/":n.state="Tailwind UI - Home"}else"blog"===t?"/"!==e?(n.details="Reading an article:",n.state=document.querySelector("article header div div h1")?.textContent||"Unknown article",n.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png"):(n.details="Browsing articles",n.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png"):"play"===t?n.details="In Tailwind Play":e.includes("/docs")?(n.details="Viewing documentation",n.state=document.querySelector("#content-wrapper div h1")?.textContent||"Unknown page"):"/"===e?n.details="Viewing homepage":"/resources"===e?(n.details="Viewing a page:",n.state="Resources"):n.details="Viewing an unknown page";presence.setActivity(n)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;