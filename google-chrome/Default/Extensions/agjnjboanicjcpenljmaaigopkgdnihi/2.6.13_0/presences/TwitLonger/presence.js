var __webpack_exports__={};const presence=new Presence({clientId:"719119956486258749"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/T/TwitLonger/assets/logo.png"};"/"===document.location.pathname?(e.startTimestamp=browsingTimestamp,e.details="Home"):document.location.pathname.includes("/show/")?(e.startTimestamp=browsingTimestamp,e.details="Reading an post",e.state=`${document.querySelector("#postcontent > h3").textContent} by ${document.querySelector("#user-info > div > h4 > a:nth-child(1)").textContent} (${document.querySelector("#user-info > div > h4 > a:nth-child(2)").textContent})`,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png"):document.location.pathname.includes("/about")?(e.startTimestamp=browsingTimestamp,e.details="About"):document.location.pathname.includes("/privacy")?(e.startTimestamp=browsingTimestamp,e.details="Privacy"):document.location.pathname.includes("/ad-free")?(e.startTimestamp=browsingTimestamp,e.details="Ad-free"):document.location.pathname.includes("/post")&&(e.startTimestamp=browsingTimestamp,e.details="Writing an Post"),e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VuY2UuanMiLCJtYXBwaW5ncyI6IjJCQUFBLE1BQU1BLFNBQVcsSUFBSUMsU0FBUyxDQUMxQkMsU0FBVSx1QkFDVkMsa0JBQW9CQyxLQUFLQyxNQUFNQyxLQUFLQyxNQUFRLEtBQ2hEUCxTQUFTUSxHQUFHLGNBQWNDLFVBQ3RCLE1BQU1DLEVBQWUsQ0FDakJDLGNBQWUsbUVBRWdCLE1BQS9CQyxTQUFTQyxTQUFTQyxVQUNsQkosRUFBYUssZUFBaUJaLGtCQUM5Qk8sRUFBYU0sUUFBVSxRQUVsQkosU0FBU0MsU0FBU0MsU0FBU0csU0FBUyxXQUN6Q1AsRUFBYUssZUFBaUJaLGtCQUM5Qk8sRUFBYU0sUUFBVSxrQkFDdkJOLEVBQWFRLE1BQVEsR0FBR04sU0FBU08sY0FBYyxxQkFBcUJDLGtCQUFrQlIsU0FBU08sY0FBYywwQ0FBMENDLGdCQUFnQlIsU0FBU08sY0FBYywwQ0FBMENDLGVBQ3hPVixFQUFhVyxjQUFnQixtREFFeEJULFNBQVNDLFNBQVNDLFNBQVNHLFNBQVMsV0FDekNQLEVBQWFLLGVBQWlCWixrQkFDOUJPLEVBQWFNLFFBQVUsU0FFbEJKLFNBQVNDLFNBQVNDLFNBQVNHLFNBQVMsYUFDekNQLEVBQWFLLGVBQWlCWixrQkFDOUJPLEVBQWFNLFFBQVUsV0FFbEJKLFNBQVNDLFNBQVNDLFNBQVNHLFNBQVMsYUFDekNQLEVBQWFLLGVBQWlCWixrQkFDOUJPLEVBQWFNLFFBQVUsV0FFbEJKLFNBQVNDLFNBQVNDLFNBQVNHLFNBQVMsV0FDekNQLEVBQWFLLGVBQWlCWixrQkFDOUJPLEVBQWFNLFFBQVUsbUJBRXZCTixFQUFhTSxRQUNiaEIsU0FBU3NCLFlBQVlaLEdBRXJCVixTQUFTc0IsYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3ByZXNlbmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHByZXNlbmNlID0gbmV3IFByZXNlbmNlKHtcbiAgICBjbGllbnRJZDogXCI3MTkxMTk5NTY0ODYyNTg3NDlcIixcbn0pLCBicm93c2luZ1RpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xucHJlc2VuY2Uub24oXCJVcGRhdGVEYXRhXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBwcmVzZW5jZURhdGEgPSB7XG4gICAgICAgIGxhcmdlSW1hZ2VLZXk6IFwiaHR0cHM6Ly9jZG4ucmNkLmdnL1ByZU1pRC93ZWJzaXRlcy9UL1R3aXRMb25nZXIvYXNzZXRzL2xvZ28ucG5nXCIsXG4gICAgfTtcbiAgICBpZiAoZG9jdW1lbnQubG9jYXRpb24ucGF0aG5hbWUgPT09IFwiL1wiKSB7XG4gICAgICAgIHByZXNlbmNlRGF0YS5zdGFydFRpbWVzdGFtcCA9IGJyb3dzaW5nVGltZXN0YW1wO1xuICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IFwiSG9tZVwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChkb2N1bWVudC5sb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhcIi9zaG93L1wiKSkge1xuICAgICAgICBwcmVzZW5jZURhdGEuc3RhcnRUaW1lc3RhbXAgPSBicm93c2luZ1RpbWVzdGFtcDtcbiAgICAgICAgcHJlc2VuY2VEYXRhLmRldGFpbHMgPSBcIlJlYWRpbmcgYW4gcG9zdFwiO1xuICAgICAgICBwcmVzZW5jZURhdGEuc3RhdGUgPSBgJHtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Bvc3Rjb250ZW50ID4gaDNcIikudGV4dENvbnRlbnR9IGJ5ICR7ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN1c2VyLWluZm8gPiBkaXYgPiBoNCA+IGE6bnRoLWNoaWxkKDEpXCIpLnRleHRDb250ZW50fSAoJHtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3VzZXItaW5mbyA+IGRpdiA+IGg0ID4gYTpudGgtY2hpbGQoMilcIikudGV4dENvbnRlbnR9KWA7XG4gICAgICAgIHByZXNlbmNlRGF0YS5zbWFsbEltYWdlS2V5ID0gXCJodHRwczovL2Nkbi5yY2QuZ2cvUHJlTWlEL3Jlc291cmNlcy9yZWFkaW5nLnBuZ1wiO1xuICAgIH1cbiAgICBlbHNlIGlmIChkb2N1bWVudC5sb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhcIi9hYm91dFwiKSkge1xuICAgICAgICBwcmVzZW5jZURhdGEuc3RhcnRUaW1lc3RhbXAgPSBicm93c2luZ1RpbWVzdGFtcDtcbiAgICAgICAgcHJlc2VuY2VEYXRhLmRldGFpbHMgPSBcIkFib3V0XCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRvY3VtZW50LmxvY2F0aW9uLnBhdGhuYW1lLmluY2x1ZGVzKFwiL3ByaXZhY3lcIikpIHtcbiAgICAgICAgcHJlc2VuY2VEYXRhLnN0YXJ0VGltZXN0YW1wID0gYnJvd3NpbmdUaW1lc3RhbXA7XG4gICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJQcml2YWN5XCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRvY3VtZW50LmxvY2F0aW9uLnBhdGhuYW1lLmluY2x1ZGVzKFwiL2FkLWZyZWVcIikpIHtcbiAgICAgICAgcHJlc2VuY2VEYXRhLnN0YXJ0VGltZXN0YW1wID0gYnJvd3NpbmdUaW1lc3RhbXA7XG4gICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJBZC1mcmVlXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRvY3VtZW50LmxvY2F0aW9uLnBhdGhuYW1lLmluY2x1ZGVzKFwiL3Bvc3RcIikpIHtcbiAgICAgICAgcHJlc2VuY2VEYXRhLnN0YXJ0VGltZXN0YW1wID0gYnJvd3NpbmdUaW1lc3RhbXA7XG4gICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJXcml0aW5nIGFuIFBvc3RcIjtcbiAgICB9XG4gICAgaWYgKHByZXNlbmNlRGF0YS5kZXRhaWxzKVxuICAgICAgICBwcmVzZW5jZS5zZXRBY3Rpdml0eShwcmVzZW5jZURhdGEpO1xuICAgIGVsc2VcbiAgICAgICAgcHJlc2VuY2Uuc2V0QWN0aXZpdHkoKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY0hKbGMyVnVZMlV1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SndjbVZ6Wlc1alpTNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGSkxGRkJRVkVzUTBGQlF6dEpRVU0xUWl4UlFVRlJMRVZCUVVVc2IwSkJRVzlDTzBOQlF6bENMRU5CUVVNc1JVRkRSaXhwUWtGQmFVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVWdVJDeFJRVUZSTEVOQlFVTXNSVUZCUlN4RFFVRkRMRmxCUVZrc1JVRkJSU3hMUVVGTExFbEJRVWtzUlVGQlJUdEpRVU53UXl4TlFVRk5MRmxCUVZrc1IwRkJhVUk3VVVGRGJFTXNZVUZCWVN4RlFVTmFMR2xGUVVGcFJUdExRVU5zUlN4RFFVRkRPMGxCUlVZc1NVRkJTU3hSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEZGQlFWRXNTMEZCU3l4SFFVRkhMRVZCUVVVN1VVRkRka01zV1VGQldTeERRVUZETEdOQlFXTXNSMEZCUnl4cFFrRkJhVUlzUTBGQlF6dFJRVU5vUkN4WlFVRlpMRU5CUVVNc1QwRkJUeXhIUVVGSExFMUJRVTBzUTBGQlF6dExRVU01UWp0VFFVRk5MRWxCUVVrc1VVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRk8xRkJRM3BFTEZsQlFWa3NRMEZCUXl4alFVRmpMRWRCUVVjc2FVSkJRV2xDTEVOQlFVTTdVVUZEYUVRc1dVRkJXU3hEUVVGRExFOUJRVThzUjBGQlJ5eHBRa0ZCYVVJc1EwRkJRenRSUVVONlF5eFpRVUZaTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWRCUTNCQ0xGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFXTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF5eFhRVU14UkN4UFFVTkRMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRM0pDTEhkRFFVRjNReXhEUVVONFF5eERRVUZETEZkQlEwZ3NTMEZEUXl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVOeVFpeDNRMEZCZDBNc1EwRkRlRU1zUTBGQlF5eFhRVU5JTEVkQlFVY3NRMEZCUXp0UlFVTktMRmxCUVZrc1EwRkJReXhoUVVGaExHOUVRVUZwUWl4RFFVRkRPMHRCUXpWRE8xTkJRVTBzU1VGQlNTeFJRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVTdVVUZEZWtRc1dVRkJXU3hEUVVGRExHTkJRV01zUjBGQlJ5eHBRa0ZCYVVJc1EwRkJRenRSUVVOb1JDeFpRVUZaTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJRenRMUVVNdlFqdFRRVUZOTEVsQlFVa3NVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZPMUZCUXpORUxGbEJRVmtzUTBGQlF5eGpRVUZqTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU03VVVGRGFFUXNXVUZCV1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhUUVVGVExFTkJRVU03UzBGRGFrTTdVMEZCVFN4SlFVRkpMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSVHRSUVVNelJDeFpRVUZaTEVOQlFVTXNZMEZCWXl4SFFVRkhMR2xDUVVGcFFpeERRVUZETzFGQlEyaEVMRmxCUVZrc1EwRkJReXhQUVVGUExFZEJRVWNzVTBGQlV5eERRVUZETzB0QlEycERPMU5CUVUwc1NVRkJTU3hSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3VVVGRGVFUXNXVUZCV1N4RFFVRkRMR05CUVdNc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXp0UlFVTm9SQ3haUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITEdsQ1FVRnBRaXhEUVVGRE8wdEJRM3BETzBsQlJVUXNTVUZCU1N4WlFVRlpMRU5CUVVNc1QwRkJUenRSUVVGRkxGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN08xRkJRM2hFTEZGQlFWRXNRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRenRCUVVNM1FpeERRVUZETEVOQlFVTXNRMEZCUXlKOSJdLCJuYW1lcyI6WyJwcmVzZW5jZSIsIlByZXNlbmNlIiwiY2xpZW50SWQiLCJicm93c2luZ1RpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJvbiIsImFzeW5jIiwicHJlc2VuY2VEYXRhIiwibGFyZ2VJbWFnZUtleSIsImRvY3VtZW50IiwibG9jYXRpb24iLCJwYXRobmFtZSIsInN0YXJ0VGltZXN0YW1wIiwiZGV0YWlscyIsImluY2x1ZGVzIiwic3RhdGUiLCJxdWVyeVNlbGVjdG9yIiwidGV4dENvbnRlbnQiLCJzbWFsbEltYWdlS2V5Iiwic2V0QWN0aXZpdHkiXSwic291cmNlUm9vdCI6IiJ9
undefined;