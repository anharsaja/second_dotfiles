"use strict";var __webpack_require__={d:(e,t)=>{for(var a in t)__webpack_require__.o(t,a)&&!__webpack_require__.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},__webpack_exports__={},unknown_namespaceObject={};__webpack_require__.r(unknown_namespaceObject),__webpack_require__.d(unknown_namespaceObject,{getPresenceData:()=>getPresenceData,logo:()=>logo,name:()=>unknown_name,tag:()=>tag});var ydkj2015_namespaceObject={};__webpack_require__.r(ydkj2015_namespaceObject),__webpack_require__.d(ydkj2015_namespaceObject,{getPresenceData:()=>ydkj2015_getPresenceData,logo:()=>ydkj2015_logo,name:()=>ydkj2015_name});var lieswatter_namespaceObject={};__webpack_require__.r(lieswatter_namespaceObject),__webpack_require__.d(lieswatter_namespaceObject,{getPresenceData:()=>lieswatter_getPresenceData,logo:()=>lieswatter_logo,name:()=>lieswatter_name});var wordspud_namespaceObject={};__webpack_require__.r(wordspud_namespaceObject),__webpack_require__.d(wordspud_namespaceObject,{getPresenceData:()=>wordspud_getPresenceData,logo:()=>wordspud_logo,name:()=>wordspud_name});var drawful_namespaceObject={};__webpack_require__.r(drawful_namespaceObject),__webpack_require__.d(drawful_namespaceObject,{getPresenceData:()=>drawful_getPresenceData,logo:()=>drawful_logo,name:()=>drawful_name});var drawful2_namespaceObject={};__webpack_require__.r(drawful2_namespaceObject),__webpack_require__.d(drawful2_namespaceObject,{getPresenceData:()=>drawful2_getPresenceData,logo:()=>drawful2_logo,name:()=>drawful2_name});var drawful2international_namespaceObject={};__webpack_require__.r(drawful2international_namespaceObject),__webpack_require__.d(drawful2international_namespaceObject,{getPresenceData:()=>drawful2international_getPresenceData,logo:()=>drawful2international_logo,name:()=>drawful2international_name});var auction_namespaceObject={};__webpack_require__.r(auction_namespaceObject),__webpack_require__.d(auction_namespaceObject,{getPresenceData:()=>auction_getPresenceData,logo:()=>auction_logo,name:()=>auction_name});var bombintern_namespaceObject={};__webpack_require__.r(bombintern_namespaceObject),__webpack_require__.d(bombintern_namespaceObject,{getPresenceData:()=>bombintern_getPresenceData,logo:()=>bombintern_logo,name:()=>bombintern_name});var earwax_namespaceObject={};__webpack_require__.r(earwax_namespaceObject),__webpack_require__.d(earwax_namespaceObject,{getPresenceData:()=>earwax_getPresenceData,logo:()=>earwax_logo,name:()=>earwax_name});var fibbage_namespaceObject={};__webpack_require__.r(fibbage_namespaceObject),__webpack_require__.d(fibbage_namespaceObject,{getPresenceData:()=>fibbage_getPresenceData,logo:()=>fibbage_logo,name:()=>fibbage_name});var fibbage2_namespaceObject={};__webpack_require__.r(fibbage2_namespaceObject),__webpack_require__.d(fibbage2_namespaceObject,{getPresenceData:()=>fibbage2_getPresenceData,logo:()=>fibbage2_logo,name:()=>fibbage2_name});var quiplash_namespaceObject={};__webpack_require__.r(quiplash_namespaceObject),__webpack_require__.d(quiplash_namespaceObject,{getPresenceData:()=>quiplash_getPresenceData,logo:()=>quiplash_logo,name:()=>quiplash_name});var quiplash2_namespaceObject={};__webpack_require__.r(quiplash2_namespaceObject),__webpack_require__.d(quiplash2_namespaceObject,{getPresenceData:()=>quiplash2_getPresenceData,logo:()=>quiplash2_logo,name:()=>quiplash2_name});var quiplash2_international_namespaceObject={};__webpack_require__.r(quiplash2_international_namespaceObject),__webpack_require__.d(quiplash2_international_namespaceObject,{getPresenceData:()=>quiplash2_international_getPresenceData,logo:()=>quiplash2_international_logo,name:()=>quiplash2_international_name});var fakinit_namespaceObject={};__webpack_require__.r(fakinit_namespaceObject),__webpack_require__.d(fakinit_namespaceObject,{getPresenceData:()=>fakinit_getPresenceData,logo:()=>fakinit_logo,name:()=>fakinit_name});var awshirt_namespaceObject={};__webpack_require__.r(awshirt_namespaceObject),__webpack_require__.d(awshirt_namespaceObject,{getPresenceData:()=>awshirt_getPresenceData,logo:()=>awshirt_logo,name:()=>awshirt_name});var pollposition_namespaceObject={};__webpack_require__.r(pollposition_namespaceObject),__webpack_require__.d(pollposition_namespaceObject,{getPresenceData:()=>pollposition_getPresenceData,logo:()=>pollposition_logo,name:()=>pollposition_name});var triviadeath_namespaceObject={};__webpack_require__.r(triviadeath_namespaceObject),__webpack_require__.d(triviadeath_namespaceObject,{getPresenceData:()=>triviadeath_getPresenceData,logo:()=>triviadeath_logo,name:()=>triviadeath_name});var bracketeering_namespaceObject={};__webpack_require__.r(bracketeering_namespaceObject),__webpack_require__.d(bracketeering_namespaceObject,{getPresenceData:()=>bracketeering_getPresenceData,logo:()=>bracketeering_logo,name:()=>bracketeering_name});var overdrawn_namespaceObject={};__webpack_require__.r(overdrawn_namespaceObject),__webpack_require__.d(overdrawn_namespaceObject,{getPresenceData:()=>overdrawn_getPresenceData,logo:()=>overdrawn_logo,name:()=>overdrawn_name});var monstermingle_namespaceObject={};__webpack_require__.r(monstermingle_namespaceObject),__webpack_require__.d(monstermingle_namespaceObject,{getPresenceData:()=>monstermingle_getPresenceData,logo:()=>monstermingle_logo,name:()=>monstermingle_name});var survivetheinternet_namespaceObject={};__webpack_require__.r(survivetheinternet_namespaceObject),__webpack_require__.d(survivetheinternet_namespaceObject,{getPresenceData:()=>survivetheinternet_getPresenceData,logo:()=>survivetheinternet_logo,name:()=>survivetheinternet_name});var fibbage3_namespaceObject={};__webpack_require__.r(fibbage3_namespaceObject),__webpack_require__.d(fibbage3_namespaceObject,{getPresenceData:()=>fibbage3_getPresenceData,logo:()=>fibbage3_logo,name:()=>fibbage3_name});var patentlystupid_namespaceObject={};__webpack_require__.r(patentlystupid_namespaceObject),__webpack_require__.d(patentlystupid_namespaceObject,{getPresenceData:()=>patentlystupid_getPresenceData,logo:()=>patentlystupid_logo,name:()=>patentlystupid_name});var rapbattle_namespaceObject={};__webpack_require__.r(rapbattle_namespaceObject),__webpack_require__.d(rapbattle_namespaceObject,{getPresenceData:()=>rapbattle_getPresenceData,logo:()=>rapbattle_logo,name:()=>rapbattle_name});var slingshoot_namespaceObject={};__webpack_require__.r(slingshoot_namespaceObject),__webpack_require__.d(slingshoot_namespaceObject,{getPresenceData:()=>slingshoot_getPresenceData,logo:()=>slingshoot_logo,name:()=>slingshoot_name});var splittheroom_namespaceObject={};__webpack_require__.r(splittheroom_namespaceObject),__webpack_require__.d(splittheroom_namespaceObject,{getPresenceData:()=>splittheroom_getPresenceData,logo:()=>splittheroom_logo,name:()=>splittheroom_name});var ydkj2018_namespaceObject={};__webpack_require__.r(ydkj2018_namespaceObject),__webpack_require__.d(ydkj2018_namespaceObject,{getPresenceData:()=>ydkj2018_getPresenceData,logo:()=>ydkj2018_logo,name:()=>ydkj2018_name});var jokeboat_namespaceObject={};__webpack_require__.r(jokeboat_namespaceObject),__webpack_require__.d(jokeboat_namespaceObject,{getPresenceData:()=>jokeboat_getPresenceData,logo:()=>jokeboat_logo,name:()=>jokeboat_name});var pushthebutton_namespaceObject={};__webpack_require__.r(pushthebutton_namespaceObject),__webpack_require__.d(pushthebutton_namespaceObject,{getPresenceData:()=>pushthebutton_getPresenceData,logo:()=>pushthebutton_logo,name:()=>pushthebutton_name});var ridictionary_namespaceObject={};__webpack_require__.r(ridictionary_namespaceObject),__webpack_require__.d(ridictionary_namespaceObject,{getPresenceData:()=>ridictionary_getPresenceData,logo:()=>ridictionary_logo,name:()=>ridictionary_name});var rolemodels_namespaceObject={};__webpack_require__.r(rolemodels_namespaceObject),__webpack_require__.d(rolemodels_namespaceObject,{getPresenceData:()=>rolemodels_getPresenceData,logo:()=>rolemodels_logo,name:()=>rolemodels_name});var triviadeath2_namespaceObject={};__webpack_require__.r(triviadeath2_namespaceObject),__webpack_require__.d(triviadeath2_namespaceObject,{getPresenceData:()=>triviadeath2_getPresenceData,logo:()=>triviadeath2_logo,name:()=>triviadeath2_name});var blanky_blank_namespaceObject={};__webpack_require__.r(blanky_blank_namespaceObject),__webpack_require__.d(blanky_blank_namespaceObject,{getPresenceData:()=>blanky_blank_getPresenceData,logo:()=>blanky_blank_logo,name:()=>blanky_blank_name});var everyday_namespaceObject={};__webpack_require__.r(everyday_namespaceObject),__webpack_require__.d(everyday_namespaceObject,{getPresenceData:()=>everyday_getPresenceData,logo:()=>everyday_logo,name:()=>everyday_name});var jackbox_talks_namespaceObject={};__webpack_require__.r(jackbox_talks_namespaceObject),__webpack_require__.d(jackbox_talks_namespaceObject,{getPresenceData:()=>jackbox_talks_getPresenceData,logo:()=>jackbox_talks_logo,name:()=>jackbox_talks_name});var quiplash3_namespaceObject={};__webpack_require__.r(quiplash3_namespaceObject),__webpack_require__.d(quiplash3_namespaceObject,{getPresenceData:()=>quiplash3_getPresenceData,logo:()=>quiplash3_logo,name:()=>quiplash3_name});var worldchamps_namespaceObject={};__webpack_require__.r(worldchamps_namespaceObject),__webpack_require__.d(worldchamps_namespaceObject,{getPresenceData:()=>worldchamps_getPresenceData,logo:()=>worldchamps_logo,name:()=>worldchamps_name});var apply_yourself_namespaceObject={};__webpack_require__.r(apply_yourself_namespaceObject),__webpack_require__.d(apply_yourself_namespaceObject,{getPresenceData:()=>apply_yourself_getPresenceData,logo:()=>apply_yourself_logo,name:()=>apply_yourself_name});var drawful_animate_namespaceObject={};__webpack_require__.r(drawful_animate_namespaceObject),__webpack_require__.d(drawful_animate_namespaceObject,{getPresenceData:()=>drawful_animate_getPresenceData,logo:()=>drawful_animate_logo,name:()=>drawful_animate_name});var survey_bomb_namespaceObject={};__webpack_require__.r(survey_bomb_namespaceObject),__webpack_require__.d(survey_bomb_namespaceObject,{getPresenceData:()=>survey_bomb_getPresenceData,logo:()=>survey_bomb_logo,name:()=>survey_bomb_name});var the_wheel_namespaceObject={};__webpack_require__.r(the_wheel_namespaceObject),__webpack_require__.d(the_wheel_namespaceObject,{getPresenceData:()=>the_wheel_getPresenceData,logo:()=>the_wheel_logo,name:()=>the_wheel_name});var murder_detectives_namespaceObject={};__webpack_require__.r(murder_detectives_namespaceObject),__webpack_require__.d(murder_detectives_namespaceObject,{getPresenceData:()=>murder_detectives_getPresenceData,logo:()=>murder_detectives_logo,name:()=>murder_detectives_name});var fourbage_namespaceObject={};__webpack_require__.r(fourbage_namespaceObject),__webpack_require__.d(fourbage_namespaceObject,{getPresenceData:()=>fourbage_getPresenceData,logo:()=>fourbage_logo,name:()=>fourbage_name});var htmf_namespaceObject={};__webpack_require__.r(htmf_namespaceObject),__webpack_require__.d(htmf_namespaceObject,{getPresenceData:()=>htmf_getPresenceData,logo:()=>htmf_logo,name:()=>htmf_name});var range_game_namespaceObject={};__webpack_require__.r(range_game_namespaceObject),__webpack_require__.d(range_game_namespaceObject,{getPresenceData:()=>range_game_getPresenceData,logo:()=>range_game_logo,name:()=>range_game_name});var lineup_namespaceObject={};__webpack_require__.r(lineup_namespaceObject),__webpack_require__.d(lineup_namespaceObject,{getPresenceData:()=>lineup_getPresenceData,logo:()=>lineup_logo,name:()=>lineup_name});var antique_freak_namespaceObject={};__webpack_require__.r(antique_freak_namespaceObject),__webpack_require__.d(antique_freak_namespaceObject,{getPresenceData:()=>antique_freak_getPresenceData,logo:()=>antique_freak_logo,name:()=>antique_freak_name});var awshirt2_namespaceObject={};__webpack_require__.r(awshirt2_namespaceObject),__webpack_require__.d(awshirt2_namespaceObject,{getPresenceData:()=>awshirt2_getPresenceData,logo:()=>awshirt2_logo,name:()=>awshirt2_name});var nopus_opus_namespaceObject={};__webpack_require__.r(nopus_opus_namespaceObject),__webpack_require__.d(nopus_opus_namespaceObject,{getPresenceData:()=>nopus_opus_getPresenceData,logo:()=>nopus_opus_logo,name:()=>nopus_opus_name});var risky_text_namespaceObject={};__webpack_require__.r(risky_text_namespaceObject),__webpack_require__.d(risky_text_namespaceObject,{getPresenceData:()=>risky_text_getPresenceData,logo:()=>risky_text_logo,name:()=>risky_text_name});var time_trivia_namespaceObject={};__webpack_require__.r(time_trivia_namespaceObject),__webpack_require__.d(time_trivia_namespaceObject,{getPresenceData:()=>time_trivia_getPresenceData,logo:()=>time_trivia_logo,name:()=>time_trivia_name});var us_them_namespaceObject={};__webpack_require__.r(us_them_namespaceObject),__webpack_require__.d(us_them_namespaceObject,{getPresenceData:()=>us_them_getPresenceData,logo:()=>us_them_logo,name:()=>us_them_name});const tag="unknown",unknown_name="Unknown Game",logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/logo.png";function getPresenceData(e){return{state:`Playing an unsupported game (${e.tag})`}}const ydkj2015_name="You Don't Know Jack 2015",ydkj2015_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/3.png";function ydkj2015_getPresenceData(){const{classList:e}=document.querySelector(".ydkj-page:not(.pt-page-off)");return e.contains("state-default")?{state:"Waiting in lobby"}:e.contains("state-jack-attack")?{state:"Playing Jack Attack"}:{}}const lieswatter_name="Lie Swatter",lieswatter_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/1.png";function lieswatter_getPresenceData(){const{classList:e}=document.querySelector(".lieswatter-page:not(.pt-page-off)");return e.contains("state-lobby")?{state:"Waiting in lobby"}:e.contains("state-answer")?{state:"Swatting lies"}:e.contains("state-nothing")?{state:"Waiting for other players"}:{}}const wordspud_name="Word Spud",wordspud_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/2.png";function wordspud_getPresenceData(){const{classList:e}=document.querySelector(".wordspud-page:not(.pt-page-off)");switch(!0){case e.contains("state-waiting"):return{state:"Waiting in lobby"};case e.contains("state-startbutton"):return{state:"Waiting for other players to join"};case e.contains("state-writing"):return{state:"Writing something"};case e.contains("state-vote"):return{state:"Voting on a word"};case e.contains("state-vote-wait"):return{state:"Being judged"};case e.contains("state-nothing"):return{state:"Waiting"};case e.contains("state-voted"):return{state:"Waiting for other players to vote"};case e.contains("state-gameover"):return{state:"Game over"};default:return{}}}const drawful_name="Drawful",drawful_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/0.png";function drawful_getPresenceData(){const e=document.querySelector(".drawful-page:not(.pt-page-off)"),{classList:t,id:a}=e;switch(!0){case t.contains("state-lobby"):return{state:"Waiting in lobby"};case t.contains("state-lyingdone"):case t.contains("state-nothing"):case t.contains("state-drawing-done"):return{state:"Waiting"};case t.contains("state-round"):return{state:e.querySelector("span").textContent};case t.contains("state-drawing-sent"):return{state:"Waiting for other players to finish drawing"};case t.contains("state-enterlie"):return{state:"Entering a lie"};case t.contains("state-chooselie"):return{state:"Looking for the truth"};case t.contains("state-chooselikes"):return{state:"Liking lies"};case t.contains("state-liereceived"):return{state:"Waiting for other players to enter lies"};case t.contains("state-notchoosing"):return{state:"Waiting for other players to discover the truth"};case t.contains("state-draw"):return{state:"Drawing something"};case t.contains("state-audience-choose"):return{state:"Choosing a lie"};case"state-ugc"===a:return{state:"Creating a custom game"};case t.contains("state-audience"):return{state:"In the audience"};default:return{}}}const drawful2_name="Drawful 2",drawful2_logo=drawful_logo,drawful2_getPresenceData=drawful_getPresenceData,drawful2international_name="Drawful 2 International",drawful2international_logo=drawful_logo,drawful2international_getPresenceData=drawful_getPresenceData,auction_name="Bidiots",auction_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/4.png";function auction_getPresenceData(){const{id:e}=document.querySelector(".auction-page:not(.pt-page-off)");switch(e){case"state-lobby":return{state:"Waiting in lobby"};case"state-logo":return{state:"Watching tutorial"};case"state-draw":return{state:"Creating a piece of art"};case"state-done-drawing":return{state:"Waiting for other players to finish drawing"};case"state-auction":return{state:"Bidding on art"};case"state-post-game":return{state:"Viewing results"}}return{}}const bombintern_name="Bomb Corp",bombintern_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/5.png";function bombintern_getPresenceData(){const{classList:e}=document.querySelector(".bombintern-page:not(.pt-page-off)");switch(!0){case e.contains("state-lobby"):return{state:"Waiting in lobby"};case e.contains("state-dayend"):return{state:"Day end"};case e.contains("state-gameover"):return{state:"Game over"};case e.contains("state-nothing"):return{state:"Waiting"};case e.contains("state-message"):return{state:"Reading a message"};case e.contains("state-smashpuzzle"):return{state:"Defusing a smash puzzle bomb"};case e.contains("state-wiredbomb"):return{state:"Defusing a wired bomb"};case e.contains("state-coffeebomb"):return{state:"Defusing a coffee bomb"};case e.contains("state-filingbomb"):return{state:"Defusing a filing bomb"};case e.contains("state-keypadbomb"):return{state:"Defusing a keypad bomb"};case e.contains("state-copierbomb"):return{state:"Defusing a copier bomb"};default:return{}}}const earwax_name="Earwax",earwax_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/6.png";function earwax_getPresenceData(){const{id:e,classList:t}=document.querySelector(".earwax-page:not(.pt-page-off)");switch(e){case"state-lobby":return{state:"Waiting in lobby"};case"state-intro":return{state:"Watching tutorial"};case"state-logo":case"state-audience-wait":return{state:"Waiting"};default:if(t.contains("state-choosing"))return{state:"Choosing a prompt"};if(t.contains("state-notchoosing"))return{state:"Waiting for the judge to choose a prompt"};if(t.contains("state-notselectingsound"))return{state:"Waiting for players to choose a sound"};if(t.contains("state-selectingsound")||"state-answer-question-audience"===e)return{state:"Choosing a sound"};if(t.contains("state-audience-join"))return{state:"Joining the audience"};if("state-vote"===e)return{state:"Voting on a sound"}}return{}}const fibbage_name="Fibbage XL",fibbage_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/7.png";function fibbage_getPresenceData(){const e=document.querySelector(".fibbage-page:not(.pt-page-off)"),{classList:t}=e;switch(!0){case t.contains("state-lobby"):return{state:"Waiting in lobby"};case t.contains("state-round"):return{state:e.querySelector("p").textContent};case t.contains("state-notchoosing"):return{state:`Waiting for ${e.querySelector("span").textContent.match(/^(.*?) is picking a category$/)[1]} to pick a category`};case t.contains("state-nothing"):return{state:"Waiting"};case t.contains("state-enterlie"):return{state:"Entering a lie"};case t.contains("state-lyingdone"):return{state:"Lying done"};case t.contains("state-liereceived"):return{state:"Waiting for other players to enter lies"};case t.contains("state-chooselie")||t.contains("state-audience-chooselie"):return{state:"Finding the truth"};case t.contains("state-chooselikes")||t.contains("state-audience-chooselikes"):return{state:"Liking lies"};case t.contains("state-choosing"):return{state:"Choosing a category"};case t.contains("state-pickbloop"):return{state:"Chossing a sound"};case t.contains("state-audience-join"):return{state:"Joining audience"};case t.contains("state-audience-score"):return{state:"Viewing audience scores"};default:return{}}}const fibbage2_name="Fibbage 2",fibbage2_logo=fibbage_logo,fibbage2_getPresenceData=fibbage_getPresenceData,quiplash_name="Quiplash XL",quiplash_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/11.png";function quiplash_getPresenceData(){const{id:e}=document.querySelector(".quiplash-page:not(.pt-page-off)");switch(e){case"state-lobby":return{state:"Waiting in lobby"};case"state-logo":return{state:"Watching tutorial"};case"state-answer-question-audience":return{state:"Writing audience quip"};case"state-answer-question":return{state:"Writing quip"};case"state-done-answering":return{state:"Waiting for other players to answer"};case"state-vote":return{state:"Voting"}}return{}}const quiplash2_name="Quiplash 2",quiplash2_logo=quiplash_logo,quiplash2_getPresenceData=quiplash_getPresenceData,quiplash2_international_name="Quiplash 2 International",quiplash2_international_logo=quiplash_logo,quiplash2_international_getPresenceData=quiplash_getPresenceData,fakinit_name="Fakin' It",fakinit_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/9.png";function fakinit_getPresenceData(){const e=document.querySelector(".fakinit-page:not(.pt-page-off)"),{classList:t}=e;switch(!0){case t.contains("state-lobby"):return{state:"Waiting in lobby"};case t.contains("state-nothing"):return{state:"Waiting"};case t.contains("state-gameplay"):return{state:"Following instructions"};case t.contains("state-skip-instructions"):return{state:"Watching the tutorial"};case t.contains("state-categories"):return{state:"Choosing a category"};case t.contains("state-notchoosing"):return{state:"Waiting for a category to be chosen"};case t.contains("state-round"):return{state:e.querySelector("p").textContent};case t.contains("state-vote"):return{state:"Voting on a player"};case t.contains("state-vote-locked"):return{state:"Viewing vote results"};default:return{}}}const awshirt_name="Tee K.O.",awshirt_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/8.png";function awshirt_getPresenceData(){const{id:e}=document.querySelector(".awshirt-page:not(.pt-page-off)");switch(e){case"state-lobby":return{state:"Waiting in lobby"};case"state-logo":return{state:"Waiting"};case"state-audience":return{state:"In the audience"};case"state-draw":return{state:"Drawing a shirt"};case"state-drawing-done":return{state:"Waiting for other players to finish drawing their shirt"};case"state-input":return{state:"Creating taglines"};case"state-prompts-done":return{state:"Waiting for other players to finish their taglines"};case"state-shirt":return{state:"Creating a t-shirt"};case"state-shirt-done":return{state:"Waiting for other players to finish their t-shirts"};case"state-vote":return{state:"Voting on a t-shirt"};case"state-voting-done":return{state:"Waiting for other players to finish voting"};case"state-audience-suggestions":return{state:"Entering a suggestion"};case"state-answer-question-audience":case"state-answer-question":return{state:"Answering a question"};case"state-done-answering":return{state:"Waiting for other players to finish answering"}}return{}}const pollposition_name="Guesspionage",pollposition_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/10.png";function pollposition_getPresenceData(){const e=document.querySelector(".pollposition-page:not(.pt-page-off)"),{classList:t}=e;switch(!0){case t.contains("state-lobby"):return{state:"Waiting in lobby"};case t.contains("state-post-lobby"):return{state:"Watching the tutorial"};case t.contains("state-nothing"):return{state:"Waiting"};case t.contains("state-round"):return{state:e.querySelector("p").textContent};case t.contains("state-upordowndone"):case t.contains("state-waitforpercentage"):case t.contains("state-waitforupordown"):case t.contains("state-waitforaudience"):case t.contains("state-upordown-sent"):case t.contains("state-waitforallpercentages"):return{state:"Waiting for other players to decide"};case t.contains("state-choosecategory"):return{state:"Choosing a category"};case t.contains("state-waitforcategory"):return{state:"Waiting for a category to be chosen"};case t.contains("state-showquestion"):return{state:"Viewing a survey prompt"};case t.contains("state-chooseupordown"):return{state:"Deciding if the true percentage is higher or lower"};case t.contains("state-choosemultiple"):return{state:"Choosing multiple choices"};case t.contains("state-audience-choice-sent")||t.contains("state-waitformultiple"):return{state:"Waiting for other players to choose their choices"};case t.contains("state-audience-wait"):return{state:"In the audience"};case t.contains("state-audience-chose-option"):return{state:"Choosing an option in the audience"};case t.contains("state-choosecharacter"):return{state:"Choosing a character"};default:return{}}}const triviadeath_name="Trivia Murder Party",triviadeath_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/12.png";function triviadeath_getPresenceData(){const{id:e}=document.querySelector(".triviadeath-page:not(.pt-page-off)");switch(e){case"state-lobby":return{state:"Waiting in lobby"};case"state-logo":return{state:"Waiting"};case"state-make-single-choice":return{state:"Answering a single choice question"};case"state-make-many-choices":return{state:"Answering a multiple choice question"};case"state-enter-single-text":return{state:"Answering a text prompt"};case"state-enter-single-drawing":return{state:"Drawing a picture"};case"state-grid":return{state:"Playing a grid game"};case"state-game-results":return{state:"Viewing game results"}}return{}}const bracketeering_name="Bracketeering",bracketeering_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/13.png";function bracketeering_getPresenceData({playerState:e}){const t={};switch(t.smallImageKey=getComputedStyle(document.querySelector("#playericon")).backgroundImage.match(/^url\("(.*)"\)$/)[1],e.state){case"Lobby":t.state="Waiting in lobby";break;case"MakeSingleChoice":if("Press this to skip the tutorial"===e.text){t.state="Watching the tutorial";break}e.text.includes("Which answer will get the most votes?")?t.state="Predicting the most popular answer":e.text.includes("Vote for the answer that deserves to win.")&&(t.state="Voting on an answer");break;case"EnterSingleText":t.state="Answering a prompt";break;case"Logo":t.state="Waiting"}return t}const overdrawn_name="Civic Doodle",overdrawn_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/16.png";function overdrawn_getPresenceData({playerState:e}){switch(e.state){case"Lobby":return{state:"Waiting in lobby"};case"Logo":return{state:"Waiting"};case"Draw":return{state:"Drawing"};case"Reaction":return{state:"Reacting to the drawings"};case"MakeSingleChoice":switch(e.text){case"Which player's addition was better?":return{state:"Voting for the best addition"};case"You drew something this round, sit back and relax.":return{state:"Waiting for other players to vote"};case"Which title is best?":return{state:"Voting for the best title"}}break;case"EnterSingleText":return{state:"Entering a title for their drawing"}}return{}}const monstermingle_name="Monster Seeking Monster",monstermingle_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/15.png";function monstermingle_getPresenceData({playerState:e}){const t={},a=document.querySelector(".chatAvatar.playerIcon");switch(a&&(t.smallImageKey=getComputedStyle(a).backgroundImage.match(/^url\("(.*)"\)$/)[1]),e.state){case"Lobby":t.state="Waiting in lobby";break;case"MakeSingleChoice":if("Press this to skip the tutorial..."===e.text?.blackBox){t.state="Watching the tutorial";break}break;case"Logo":t.state="Waiting";break;case"chat":{const a=e.chat?.mode;t.state="chat"===a?"Chatting":"browse"===a?"Browsing messages":"Choosing a date";break}}return t}const survivetheinternet_name="Survive the Internet",survivetheinternet_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/17.png";function survivetheinternet_getPresenceData(){const e={},t=document.querySelector("#playericon"),a=document.querySelector("#playerRegion + div"),{classList:n,textContent:s}=a;return t&&(e.smallImageKey=getComputedStyle(t).backgroundImage.match(/^url\("(.*)"\)$/)[1]),n.contains("Lobby")?e.state="Waiting in lobby":n.contains("Logo")?e.state="Waiting":n.contains("MakeSingleChoice")?/the tutorial\.\.\./.test(s)?e.state="Viewing the tutorial":/ridiculous\?$/.test(a.querySelector(".aboveBlackBox").textContent)?"none"===a.querySelector(".makeSingleChoiceDone").style.display?e.state="Voting for the most ridiculous answer":e.state="Waiting for other players to vote":""===a.querySelector(".aboveBlackBox").textContent&&(e.state="Answering a photosharing prompt"):n.contains("EnterSingleText")&&("none"===a.querySelector(".enterSingleTextForm").style.display?e.state="Waiting for other players to answer their prompts":a.querySelector(".finalRoundImage")||a.querySelector(".blackBox:not(.hide)")?e.state="Twisting another player's response":e.state="Answering a prompt"),e}const fibbage3_name="Fibbage 3",fibbage3_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/14.png";function fibbage3_getPresenceData({playerState:e}){const t={};switch(t.smallImageKey=getComputedStyle(document.querySelector("#playericon")).backgroundImage.match(/^url\("(.*)"\)$/)[1],e.state){case"Lobby":t.state="Waiting in lobby";break;case"EndShortie":t.state="Waiting for the next prompt";break;case"ChooseLike":t.state="Liking responses";break;case"ChooseLie":t.state="Looking for the truth";break;case"Logo":t.state="Waiting";break;case"EnterText":case"EnterTruth":t.state=`Answering a prompt: ${e.question}`;break;case"CategorySelection":e.isChoosing?t.state="Choosing a category":t.state="Waiting for another player to choose a category"}return t}const patentlystupid_name="Patently Stupid",patentlystupid_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/18.png";function patentlystupid_getPresenceData({playerState:e}){switch(e.state){case"Lobby":return{state:"Waiting in lobby"};case"Logo":return{state:"Waiting"};case"MakeSingleChoice":{const{html:t}=e.prompt;switch(t){case"":return{state:"Watching the tutorial"};case"<div>Choose an Issue</div><div>to base your invention on.</div>":return{state:"Choosing an issue to work on"};case"<div>Present your idea!</div><div>It's your turn to show off your invention!<br /><br />Would you like to present your invention, or would you like the game to do it for you?</div>":return{state:"Choosing presentation options"};case"<div>Present your idea!</div><div>You can control the timing!<br />(Show elements in any order.)</div>":return{state:"Presenting their invention"};default:if(t.startsWith("<div>Invest in the best!</div>"))return{state:"Investing in an invention"};if(/choose an issue.*?to base your invention on/is.test(t))return{state:"Choosing the final issue to work on"}}break}case"EnterSingleText":{const{html:t}=e.prompt;if(t.startsWith("<div>Fill in the Blank!</div>"))return{state:"Creating a problem"};if("<div>Write a title</div><div>for your invention</div>"===t)return{state:"Naming their invention"};if("<div>Write a tagline</div><div>for your invention</div>"===t)return{state:"Creating a tagline for their invention"};break}case"Draw":return{state:"Drawing their invention"}}return{}}const rapbattle_name="Mad Verse City",rapbattle_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/19.png";function rapbattle_getPresenceData({playerState:e}){const t={};switch(t.smallImageKey=getComputedStyle(document.querySelector("#playericon")).backgroundImage.match(/^url\("(.*)"\)$/)?.[1],e.state){case"Lobby":t.state="Waiting in lobby";break;case"Logo":t.state="Waiting";break;case"MakeSingleChoice":{const{text:a,html:n}=e.prompt;if("Press this button to skip the tutorial..."===a)t.state="Skipping the tutorial";else if("Rapidly press these buttons to make weird stuff happen..."===n)t.state="Making weird stuff happen";else switch(a){case"Listen to the RAP":t.state="Listening to the rap";break;case"Tap if you think this rhyme is DOPE":t.state="Voting on the rap";break;case"Who won this battle??":t.state="Voting on the winner of the battle"}break}case"EnterSingleText":t.state=`Entering a ${e.prompt.html.match(/\((.+?)\)$/)[1]}`}return t}const slingshoot_name="Zeeple Dome",slingshoot_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/20.png";function slingshoot_getPresenceData({playerState:e}){switch(e.state){case"Lobby":return{state:"Waiting in lobby"};case"Logo":return{state:"Waiting"};case"Shoot":return{state:"Shooting"}}return{}}const splittheroom_name="Split the Room",splittheroom_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/21.png";function splittheroom_getPresenceData({playerState:e}){switch(e.state){case"Lobby":return{state:"Waiting in lobby"};case"Logo":return{state:"Waiting"};case"MakeSingleChoice":{const{html:t}=e.prompt;return"Press this to skip the tutorial..."===t?{state:"Watching the tutorial"}:"Did this person create an amusing scenario?"===t?{state:"Rating the scenario"}:t.startsWith("For bonus points, which option do you think")?{state:"Predicting a player's choice"}:{state:"Responding to a scenario"}}case"EnterSingleText":return{state:"Completing a scenario"}}return{}}const ydkj2018_name="You Don't Know Jack: Full Stream",ydkj2018_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/22.png";function ydkj2018_getPresenceData({playerState:e}){switch(e.state){case"Lobby":return{state:"Waiting in lobby"};case"Logo":return{state:"Waiting"};case"MakeSingleChoice":switch(e.roundType){case"Shortie":return{state:"Answering a short trivia question"};case"DisOrDat":return{state:"Answering a dis-or-dat question"};case"PlayersChoice":return{state:"Choosing a type of question"};case"JackAttack":return{state:"Playing Jack Attack"}}}return{}}const jokeboat_name="Joke Boat",jokeboat_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/23.png";function jokeboat_getPresenceData({playerState:e}){const t={},a=document.querySelector("#playericon");switch(a&&(t.smallImageKey=getComputedStyle(a).backgroundImage.match(/^url\("(.*)"\)$/)?.[1]),e.state){case"Lobby":t.state="Waiting in lobby";break;case"Logo":t.state="Waiting";break;case"MakeSingleChoice":{const{choiceId:a}=e;"ChooseCatchphrase"===a?t.state="Choosing a catchphrase":a.startsWith("Skip")?t.state="Watching a tutorial":a.startsWith("ChooseSetup")?t.state="Choosing a joke setup":a.startsWith("ChooseTopic")?t.state="Choosing a topic for the joke":a.startsWith("ChooseAuthorReady")?t.state="Choosing how to tell the joke":"ChooseJoke"===a?t.state="Voting on a joke":"ChoosePunchUpJoke"===a&&(t.state="Choosing a joke to one-up");break}case"EnterSingleText":{const{entryId:a,placeholder:n}=e;a.startsWith("Topic")?t.state=`Entering a topic (${n})`:a.startsWith("Punchline")?t.state="Creating a punchline":"PunchedUpLine"===a&&(t.state="One-upping a joke");break}}return t}const pushthebutton_name="Push the Button",pushthebutton_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/24.png";function pushthebutton_getPresenceData({playerState:e}){switch(e.state){case"Lobby":return{state:"Waiting in lobby"};case"Logo":return{state:"Waiting"};case"SuspicionVote":return{state:"Voting on who seems suspicious"};case"Probe":return{state:"Probing their fellow players"};case"Draw":return{state:"In the Drawing Quarters"};case"AnalyzePlayer":return{state:"Using the bioscanner - describing glyphs"};case"AnalysisReport":return{state:"Using the bioscanner - reading report"};case"MakeSingleChoice":{const{choiceType:t,gameInfo:a,prompt:n}=e,{activeTest:s}=a;if(t)switch(t){case"TutorialOptOut":return{state:"Choosing whether to skip the tutorial"};case"ConfirmedIdentity":return{state:"Confirming their identity"}}else{if(s)return"Push The Button"===s?{state:"Accusing players"}:{state:`Taking the ${s} test`};{const e=n?.html;if("You are the Captain.  What test would you like to perform?"===e)return{state:"Choosing a test to perform"};if(/^Select <strong>.*?<\/strong> to Test!$/.test(e))return{state:"Choosing players to test"}}}break}case"EnterSingleText":{const{activeTest:t}=e.gameInfo;if(t)return{state:`Taking the ${t} test`};break}case"GameOver":return{state:`Viewing results - ${e.winningRole}s won`}}return{}}const ridictionary_name="Dictionarium",ridictionary_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/25.png";function ridictionary_getPresenceData({playerState:e}){const t={};switch(t.smallImageKey=getComputedStyle(document.querySelector("#playericon")).backgroundImage.match(/^url\("(.*)"\)$/)[1],e.state){case"Lobby":t.state="Waiting in lobby";break;case"Logo":t.state="Waiting";break;case"MakeSingleChoice":switch(e.choiceType){case"ChooseGameType":t.state="Choosing a game type";break;case"ChooseDefinition":t.state=`Voting for a definition of ${e.prompt.html.match(/<div>(.*?)<\/div>$/)[1]}`;break;case"LikeDefinition":t.state="Liking definitions";break;case"ChooseSynonym":t.state=`Voting for a synonym of ${e.prompt.html.match(/<font.*?>(.*?)(?:: )?<\/font>$/)[1]}`;break;case"LikeSynonym":t.state="Liking synonyms";break;case"LikeSentence":t.state="Liking sentences";break;case"ChooseSentence":t.state=`Voting for a sentence with ${e.prompt.html.match(/<div>(.*?)<\/div>$/)[1]}`}break;case"EnterSingleText":switch(e.entryId){case"Definition":t.state=`Creating a definition for ${e.prompt.html.match(/<font.*?>(.*?)<\/font>/)[1]}`;break;case"Synonym":t.state=`Creating a synonym for ${e.prompt.html.match(/<font.*?>(.*?)(?:: )?<\/font>/)[1]}`;break;case"Sentence":t.state=`Creating a sentence using ${e.word}`}}return t}const rolemodels_name="Role Models",rolemodels_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/26.png";function rolemodels_getPresenceData({playerState:e}){switch(e.state){case"Lobby":return{state:"Waiting in lobby"};case"Logo":return{state:"Waiting"};case"Camera":return{state:"Taking a photo of themselves"};case"Draw":return{state:"Drawing a portrait of themselves"};case"MakeSingleChoice":switch(e.choiceType){case"SkipTutorial":return{state:"Watching the tutorial"};case"Prompt":return{state:"Choosing a category"};case"TagResolution":return{state:"Resolving a role conflict"};case"RoleModelsChoice":return{state:"Choosing the role that fits best"}}break;case"Sortable":return{state:"Assigning roles to players"};case"EnterSingleText":return{state:"Answering a prompt"}}return{}}const triviadeath2_name="Trivia Murder Party 2",triviadeath2_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/27.png";function triviadeath2_getPresenceData({playerState:e}){switch(e.state){case"Lobby":return{state:"Waiting in lobby"};case"Logo":return{state:"Waiting"};case"MakeSingleChoice":if("FinalRound"===e.roundType)return{state:"Answering the final trivia questions"};switch(e.choiceType){case"SkipTutorial":return{state:"Watching the intro"};case"Question":return{state:"Answering trivia"};case"Rule":return{state:"Playing a rule game"};case"PostGameChoice":return{state:"Choosing a post-game option"};default:return{state:"Playing a death game"}}case"EnterSingleText":{const{entryId:t}=e;return t.startsWith("MindMeld")?{state:"Playing the mind meld game"}:"CreatePassword"===t?{state:"Creating a password for the password game"}:"Quiplash"===t?{state:`Playing Quiplash - ${e.prompt.html}`}:{state:"Playing a text death game"}}case"Draw":return{state:"Playing a drawing death game"}}return{}}const blanky_blank_name="Blather 'Round",blanky_blank_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/28.png";function blanky_blank_getPresenceData({playerState:e}){switch(e.state){case"Lobby":return{state:"Waiting in lobby"};case"Logo":return{state:"Waiting"};case"MakeSingleChoice":switch(e.choiceType){case"skipTutorial":return{state:"Watching the tutorial"};case"password":return{state:"Choosing a prompt"}}break;case"MakeSentence":switch(e.sentence.type){case"writing":return{state:"Crafting initial sentence"};case"call":return{state:"Crafting a sentence"};case"response":return{state:"Crafting a sentence using players' guesses"};case"mybad":return{state:"Deciding if they should have known the answer"}}break;case"EnterSingleText":return{state:"Guessing the object"}}return{}}const everyday_name="The Devils and the Details",everyday_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/29.png";function everyday_getPresenceData({playerState:e}){switch(e.state){case"Lobby":return{state:"Waiting in lobby"};case"Logo":return{state:"Waiting"};case"MakeSingleChoice":if("ChangeCharacter"===e.choiceId)return{state:"Choosing a character"};if("SkipIntro"===e.choiceType)return{state:"Watching the intro"};if("ShowTutorial"===e.choiceType)return{state:"Deciding if they want to watch the tutorial"};break;case"CancelerMechanic":return{state:"Blocking a member from their selfish task"};case"TaskList":return{state:"Choosing a task"};case"NothingMechanic":return{state:"Doing nothing"};case"ScrubMechanic":return{state:"Scrubbing something"};case"RotateMechanic":return{state:"Rotating something"};case"TapMechanic":return{state:"Tapping something"};case"SwipeMechanic":return{state:"Swiping something"};case"TravelMechanicParticipant":return{state:"Travelling as a passenger"};case"TravelMechanicCaptain":return{state:"Travelling as the driver"};case"PhoneMechanic":return{state:"Calling someone"};case"DialogMechanic":return{state:"Talking to someone"};case"SearchMechanicCaptain":case"SearchMechanicParticipant":return{state:"Searching for something"};case"TextMechanicParticipant":return{state:"Writing a text"};case"TextMechanicCaptain":return{state:"Reading a text"};case"InstructionsMechanicCaptain":return{state:"Following instructions"};case"InstructionsMechanicParticipant":return{state:"Giving instructions"};case"HoldMechanic":return{state:"Holding something"}}return{}}const jackbox_talks_name="Talking Points",jackbox_talks_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/30.png";function jackbox_talks_getPresenceData({playerState:e}){switch(e.state){case"Lobby":return{state:"Waiting in lobby"};case"Logo":return{state:"Waiting"};case"Camera":return{state:"Taking a profile picture"};case"EnterSingleText":{const{entryId:t}=e;if(t.startsWith("prompt"))return{state:"Creating topics"};if("WriteQuote"===t)return{state:"Writing a quote about the talk"};if("NameAward"===t)return{state:"Naming an award"};break}case"Awards":return{state:"Giving out their award"};case"MakeSingleChoice":{const{classes:t,choices:a,prompt:n}=e;if("PICK THE TITLE OF THE TALK YOU WILL GIVE"===n.html)return{state:"Choosing a talk title"};switch(t[0]){case"SkipTutorial":return{state:"Watching the tutorial"};case"Presenter":return n.html.startsWith("RATE HOW WELL ")?{state:"Rating their assistant"}:"THANK YOU."===n.text?{state:"Presenting their talk - thank you"}:{state:"Presenting their talk - preparation"};case"Assistant":return"PICK THE BEST PICTURE TO REPRESENT THE TALK"===n.html?{state:"Choosing a picture for the talk"}:{state:"Assisting their presenter"};default:if("voteUp"===a[0].className)return{state:"Reacting to the speech"}}break}case"Draw":return{state:"Presenting their talk - slide"}}return{}}const quiplash3_name="Quiplash 3",quiplash3_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/31.png";function quiplash3_getPresenceData({playerState:e}){const t={};switch(t.smallImageKey=getComputedStyle(document.querySelector("#playericon")).backgroundImage.match(/^url\("(.*)"\)$/)?.[1],e.state){case"Lobby":t.state="Waiting in lobby";break;case"Logo":t.state="Waiting";break;case"EnterSingleText":t.state="Answering a prompt";break;case"MakeSingleChoice":t.state="Voting for their favorite answer";break;case"EnterTextList":t.state="Answering a Thriplash prompt";break;default:if(e.validActions)switch(e.validActions.join(",")){case"toggle-visibility,new,load,exit":t.state="In the Custom Content menu";break;case"title,close":t.state="Naming a custom Quiplash episode";break;case"add,toggle-visibility,close":case"add,remove,toggle-visibility,done":t.state="Adding prompts to a custom Quiplash episode";break;case"submit,unlock,toggle-visibility,play,remove-content,episodes":t.state="Viewing a custom Quiplash episode"}}return t}const uploadedFiles={};async function uploadFile(e,t,a){if(uploadedFiles[e])return uploadedFiles[e];uploadedFiles[e]=t;try{const t=await fetch(e).then((e=>e.blob())),n=new FormData;n.append("file",t,"file");const s=await fetch("https://pd.premid.app/create/image",{method:"POST",body:n}).then((e=>e.text()));return a.info(s),uploadedFiles[e]=s,s}catch(t){return a.error(t),e}}const svgCache=new Map;function getSVGImageData(e){if(svgCache.has(e))return Promise.resolve(svgCache.get(e));const t=e.cloneNode(!0),a=e.querySelectorAll("path"),n=t.querySelectorAll("path"),s=document.createElement("canvas"),r=s.getContext("2d"),i=document.createElement("img");s.width=512,s.height=512,t.setAttribute("width","512"),t.setAttribute("height","512");for(const[e,t]of a.entries()){const a=getComputedStyle(t).fill;n[e].setAttribute("fill",a)}const o=(new XMLSerializer).serializeToString(t),c=`data:image/svg+xml;base64,${btoa(o)}`;return new Promise((t=>{i.onload=()=>{r.drawImage(i,0,0,512,512);const a=s.toDataURL("image/png");svgCache.set(e,a),t(a)},i.src=c}))}const worldchamps_name="Champ'd Up",worldchamps_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/32.png";async function worldchamps_getPresenceData({playerState:e,presence:t}){const a={};switch(a.smallImageKey=getComputedStyle(document.querySelector("#playericon")).backgroundImage.match(/^url\("(.*)"\)$/)?.[1],e.state){case"Lobby":a.state="Waiting in lobby";break;case"Logo":a.state="Waiting";break;case"MakeSingleChoice":{const{choiceId:t}=e;t?t.startsWith("FlipChoice")&&(a.state="Flipping their character"):e.prompt.html?.startsWith("Who is <br>")?a.state="Voting for the best champion":e.prompt.html?.startsWith("Swap your character or keep it in<br>")?a.state="Choosing whether to swap their character":a.state="Watching the tutorial";break}case"Draw":{const{entryId:n}=e;if(n.startsWith("champion")){a.state="Drawing a champion";break}if(n.startsWith("challenger")){const e=document.querySelector(".imageData")?.src;e&&(a.largeImageKey=await uploadFile(e,"https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/32.png",t)),a.state="Drawing a challenger";break}break}}return a}const apply_yourself_name="Job Job",apply_yourself_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/33.png";function apply_yourself_getPresenceData({playerState:e}){switch(e.kind){case"lobby":return{state:"Waiting in lobby"};case"Logo":return{state:"Waiting"};case"writing":return{state:"Writing a response"};case"voting":return{state:"Voting for a response"};case"magnets":return{state:"Answering a prompt using magnets"};case"resumagnets":return{state:"Filling out their resumé using magnets"};case"done":return{state:"Waiting for others to finish"};case"postGame":return{state:"Viewing the results"}}return{}}const drawful_animate_name="Drawful Animate",drawful_animate_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/34.png";function drawful_animate_getPresenceData({playerState:e}){switch(e.kind){case"lobby":return{state:"Waiting in lobby"};case"waiting":return{state:"Waiting"};case"drawing":return"an animation of yourself"===e.prompt.text?{state:"Drawing an animation of themselves"}:{state:"Drawing an animation"};case"writing":return{state:"Guessing the original prompt"};case"liking":return{state:"Awarding likes to other's guesses"};case"choosing":return{state:"Looking for the true prompt"};case"postGame":return{state:"Viewing the results"};case"ugc":return{state:"Creating a custom game"}}return{}}const survey_bomb_name="The Poll Mine",survey_bomb_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/36.png";function survey_bomb_getPresenceData({playerState:e}){switch(e.kind){case"lobby":return{state:"Waiting in lobby"};case"waiting":return{state:"Waiting"};case"choices":return{state:"Selecting a door"};case"survey":return{state:"Completing survey"};case"postGame":return{state:"Viewing the results"}}return{}}const the_wheel_name="The Wheel of Enormous Proportions",the_wheel_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/37.png";function the_wheel_getPresenceData({playerState:e}){switch(e.kind){case"lobby":return{state:"Waiting in lobby"};case"waiting":return{state:"Waiting"};case"singleTextEntry":return"askTheWheel"===e.category?{state:`Asking the wheel a question - '${document.querySelector(".input-box textarea").value}'`}:{state:"Answering a question"};case"choices":if("skip-intro"===e.category)return{state:"Watching the tutorial"};break;case"tappingList":return{state:"Selecting answers"};case"matching":{const[t,a]=e.headers;return{state:`Matching ${t} to ${a}`}}case"placeSlices":return{state:"Placing slices"};case"spin":return{state:"Spinning the wheel"};case"numeric":return{state:`Answering a numeric question - "${e.prompt}"`};case"postGame":return{state:"Viewing the results"};case"typingList":return{state:"Typing answers"};case"guessing":return{state:"Guessing what the wheel is thinking of"};case"tappingRapid":return{state:"Tapping rapidly"};case"choosePlayers":return{state:"Choosing players"};case"chooseSlices":return{state:"Choosing slices"}}return{}}const murder_detectives_name="Weapons Drawn",murder_detectives_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/35.png";function murder_detectives_getPresenceData({playerState:e}){const t={},a=document.querySelector(".header.avatar"),{kind:n,prompt:s}=e;switch(a&&(t.smallImageKey=getComputedStyle(a,":after").backgroundImage.match(/^url\("(.*)"\)$/)?.[1]),n){case"lobby":t.state="Waiting in lobby";break;case"choosing":"Which case do you want to investigate?"===s.text?t.state="Choosing a case to investigate":"[header]WRONG[/header][section]Try again in 5 seconds...[/section]"===s.text||"Choose a guest to target."===s.text||s.startsWith("Guess which detective brought ")?t.state="Murdering guests":s.startsWith("Who do you think murdered ")&&(t.state="Deciding on the culprit");break;case"drawing":t.state="Drawing their weapon clue";break;case"inspecting":t.state="Inspecting the killing weapons";break;case"writing":t.state="Inviting accomplices";break;case"postGame":t.state="Viewing the results";break;default:t.state="Waiting"}return t}const fourbage_name="Fibbage 4",fourbage_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/39.png";function fourbage_getPresenceData({playerState:e}){switch(e.kind){case"lobby":return{state:"Waiting in lobby"};case"waiting":return{state:"Waiting"};case"choosing":switch(e.context){case"pick-category":return{state:"Choosing a category"};case"pick-truth":return{state:"Looking for the truth"};case"pick-likes":return{state:"Awarding likes to other's answers"};case"final-round-1":case"final-round-2":return{state:"Looking for the truth - Final Round"}}break;case"writing":return{state:"Writing lies"};case"voting":break;case"postGame":return{state:"Viewing the results"}}return{}}const htmf_name="Roomerang",htmf_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/40.png";function htmf_getPresenceData({playerState:e}){const t={};switch(t.smallImageKey=document.querySelector(".avatar > img")?.src,e.kind){case"lobby":t.state="Waiting in lobby";break;case"postGame":t.state="Viewing the results";break;case"eliminating":t.state="Voting to eliminate a player";break;case"choosing":""===e.prompt.text?t.state="Voting for a response":"firestarter"===e.round?t.state="Choosing a player to burn":"finale"===e.round&&(t.state="Deciding who should win");break;case"waiting":t.state="Waiting";break;case"writing":if(e.isGoodbye)t.state="Writing a goodbye message";else switch(e.round){case"intro":t.state="Writing an introduction";break;case"connection":t.state="Writing about a connection";break;case"quickie":t.state="Writing an anonymous response";break;case"firestarter":t.state="Writing a dramatic response";break;case"finale":t.state="Writing a response for the finale";break;case"":t.state="Writing a victory speech";break;default:t.state="Writing a response"}}return t}const range_game_name="Nonsensory",range_game_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/42.png";function range_game_getPresenceData({playerState:e}){switch(e.kind){case"lobby":return{state:"Waiting in lobby"};case"postGame":return{state:"Viewing the results"};case"drawing":return{state:"Drawing a picture"};case"guess":return{state:"Guessing the value in the range"};case"postGuess":return{state:"Waiting for other players to guess"};case"singleTextEntry":return{state:"Answering a prompt"};case"choices":return"walkthrough"===e.category?{state:"Watching the tutorial"}:{state:"Making a choice"};default:return{state:"Waiting"}}}const lineup_name="Quixort",lineup_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/41.png";function lineup_getPresenceData({playerState:e}){switch(e.kind){case"lobby":return{state:"Waiting in lobby"};case"choices":return{state:"Selecting a topic to sort"};case"falling":return{state:"Sorting an item"};case"postGame":return{state:"Viewing the results"};default:return{state:"Waiting"}}}const antique_freak_name="Junktopia",antique_freak_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/38.png";function antique_freak_getPresenceData({playerState:e}){const{prompt:t,kind:a,responseKey:n}=e;switch(a){case"lobby":return{state:"Waiting in lobby"};case"postGame":return{state:"Viewing the results"};case"ranking":return{state:"Ranking items"};case"choosing":if(n.startsWith("skip"))return{state:"Watching the tutorial"};if(n.startsWith("shopping"))return{state:"Shopping for an item"};if(n.startsWith("presentationChoice"))return"Ready to present?"===t.text?{state:"Preparing to present"}:{state:"Presenting their item"};if(n.startsWith("reaction"))return{state:"Reacting to an item"};if(n.startsWith("voting"))return{state:"Voting on a collection"};break;case"fact":return{state:"Creating facts about an item"};case"writing":if("This piece is entitled:"===t.text)return{state:"Naming their item"};if('Your two items are part of a collection called "[blank][/blank]"'===t.text)return{state:"Naming their collection"};break;case"waiting":return{state:"Waiting"}}return{}}const awshirt2_name="Tee-K.O. 2",awshirt2_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/43.png";let lastImage,lastImageTime=0;async function awshirt2_getPresenceData({playerState:e,presence:t}){switch(e.kind){case"lobby":return{state:"Waiting in lobby"};case"postGame":return{state:"Viewing the results"};case"assembling":return{state:"Assembling a T-Shirt"};case"remaking":return{state:"Deciding whether to remake a T-Shirt"};case"drawing":{const e=Date.now();if(e-lastImageTime>2e3){const a=document.querySelector("canvas");lastImageTime=e,lastImage=await uploadFile(a.toDataURL("image/png"),awshirt2_logo,t)}return{state:"Drawing a T-Shirt image",largeImageKey:lastImage}}case"writing":return{state:"Writing a T-Shirt slogan"};case"voting":return{state:"Voting for a T-Shirt"};default:return{state:"Waiting"}}}const nopus_opus_name="Dodo Re Mi",nopus_opus_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/44.png";function getAvatarImageData(){return getSVGImageData(document.querySelector(".avatar"))}async function nopus_opus_getPresenceData({playerState:e,presence:t}){switch(e.kind){case"lobby":return{state:"Waiting in lobby"};case"credits":return{state:"Viewing the credits"};case"playback":return{state:"Listening to the playback"};case"audienceRecording":case"recording":{const e=await getSVGImageData(document.querySelector(".instrument")),a=await uploadFile(e,"https://cdn.rcd.gg/PreMiD/resources/question.png",t);return{state:"Recording a song",smallImageText:`on ${document.querySelector(".instrument-name").textContent}`,smallImageKey:a}}case"instrumentSelect":{const e=await getSVGImageData(document.querySelector(".selected .instrument")),a=await uploadFile(e,"https://cdn.rcd.gg/PreMiD/resources/question.png",t);return{state:"Selecting an instrument",smallImageText:`on ${document.querySelector(".name").textContent}`,smallImageKey:a}}case"scoreboard":{const e=await getAvatarImageData(),a=await uploadFile(e,"https://cdn.rcd.gg/PreMiD/resources/question.png",t);return{state:"Viewing the scoreboard",smallImageText:document.querySelector(".result").textContent,smallImageKey:a}}case"songSelect":return{state:"Selecting a song",smallImageKey:"https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/45.png",smallImageText:document.querySelector(".name").textContent.trim()};default:return{state:"Waiting"}}}const risky_text_name="FixyText",risky_text_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/46.png";function risky_text_getPresenceData({playerState:e}){switch(e.kind){case"lobby":return{state:"Waiting in lobby"};case"postGame":return{state:"Viewing the results"};case"choices":return{state:"Choosing a category"};case"inbox":return{state:"Viewing the initial message"};case"task":return{state:"Preparing to write text"};case"writing":return{state:"Writing text chaotically"};case"favorites":return{state:"Voting on their favorite words"};default:return{state:"Waiting"}}}const time_trivia_name="TimeJinx",time_trivia_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/47.png";function time_trivia_getPresenceData({playerState:e}){switch(e.kind){case"lobby":return{state:"Waiting in lobby"};case"postGame":return{state:"Viewing the results"};case"guessing":return{state:`Answering a prompt: "${e.prompt}"`};case"sussing":return{state:`Sussing out the impostor: ${e.prompt}`};case"choosing":return{state:`Choosing an answer: ${e.prompt}`};default:return{state:"Waiting"}}}const us_them_name="Hypnotorious",us_them_logo="https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/48.png";function us_them_getPresenceData({playerState:e}){switch(e.kind){case"lobby":return{state:"Waiting in lobby"};case"postGame":return{state:"Viewing the results"};case"choices":return"SKIP"===e.category?{state:"Viewing the tutorial"}:{state:"Choosing the outlier"};case"role":return{state:"Viewing their secret role"};case"writing":return{state:`Answering a prompt: ${e.prompt}`};case"grouping":return{state:"Grouping themselves"};default:return{state:"Waiting"}}}const games={unknown:unknown_namespaceObject,ydkj2015:ydkj2015_namespaceObject,lieswatter:lieswatter_namespaceObject,wordspud:wordspud_namespaceObject,drawful:drawful_namespaceObject,drawful2:drawful2_namespaceObject,drawful2international:drawful2international_namespaceObject,auction:auction_namespaceObject,bombintern:bombintern_namespaceObject,earwax:earwax_namespaceObject,fibbage2:fibbage2_namespaceObject,fibbage:fibbage_namespaceObject,quiplash:quiplash_namespaceObject,quiplash2:quiplash2_namespaceObject,"quiplash2-international":quiplash2_international_namespaceObject,fakinit:fakinit_namespaceObject,awshirt:awshirt_namespaceObject,pollposition:pollposition_namespaceObject,triviadeath:triviadeath_namespaceObject,bracketeering:bracketeering_namespaceObject,overdrawn:overdrawn_namespaceObject,monstermingle:monstermingle_namespaceObject,survivetheinternet:survivetheinternet_namespaceObject,fibbage3:fibbage3_namespaceObject,patentlystupid:patentlystupid_namespaceObject,rapbattle:rapbattle_namespaceObject,slingshoot:slingshoot_namespaceObject,splittheroom:splittheroom_namespaceObject,ydkj2018:ydkj2018_namespaceObject,jokeboat:jokeboat_namespaceObject,pushthebutton:pushthebutton_namespaceObject,ridictionary:ridictionary_namespaceObject,rolemodels:rolemodels_namespaceObject,triviadeath2:triviadeath2_namespaceObject,"blanky-blank":blanky_blank_namespaceObject,everyday:everyday_namespaceObject,"jackbox-talks":jackbox_talks_namespaceObject,quiplash3:quiplash3_namespaceObject,worldchamps:worldchamps_namespaceObject,"apply-yourself":apply_yourself_namespaceObject,"drawful-animate":drawful_animate_namespaceObject,"survey-bomb":survey_bomb_namespaceObject,"the-wheel":the_wheel_namespaceObject,"murder-detectives":murder_detectives_namespaceObject,fourbage:fourbage_namespaceObject,htmf:htmf_namespaceObject,"range-game":range_game_namespaceObject,lineup:lineup_namespaceObject,"antique-freak":antique_freak_namespaceObject,awshirt2:awshirt2_namespaceObject,"nopus-opus":nopus_opus_namespaceObject,"risky-text":risky_text_namespaceObject,"time-trivia":time_trivia_namespaceObject,"us-them":us_them_namespaceObject},presence=new Presence({clientId:"638118757453004820"});let game,gametag,gamePlayerState={playerName:null,state:null,username:null},gamePlayerInfoState={name:null},browsingTimestamp=Math.round(Date.now()/1e3);"jackbox.tv"===document.location.hostname&&setInterval((async()=>{const e=await presence.getLogs(/recv <- .*?("key": "(bc:customer|player|info):[a-z0-9-]+",)/s);if(e.length>0){let t=!1,a=!1;for(let n=e.length-1;(!a||!t)&&n>=e.length-6&&n>=0;n--){const s=e[n];if("string"!=typeof s)continue;let r;try{r=JSON.parse(s.slice(8))}catch{presence.error(`Failed to parse log: ${s}`);continue}switch(!0){case/recv <- .*?"entities": {\n/s.test(s):t||(gamePlayerState=r.result.entities[s.match(/"key": "((?:bc:customer|player):(?:[a-z0-9-]+))",/s)?.[1]]?.[1].val??r.result.val,t=!0),a||(gamePlayerInfoState=r.result.entities[s.match(/"key": "(info:\d+)",/s)?.[1]]?.[1].val??r.result,a=!0);break;case/recv <- .*?"key": "((?:bc:customer|player):(?:[a-z0-9-]+))",/s.test(s):t||(gamePlayerState=r.result.val,t=!0);break;case/recv <- .*?"key": "info:\d+",/s.test(s):a||(gamePlayerInfoState=r.result.val,a=!0)}}}if(!game){const{tag:e}=await presence.getPageletiable('tv"]["storage');gametag=e,e&&"@connect"!==e&&(game=games[e],browsingTimestamp=Math.round(Date.now()/1e3),game||(game=games.unknown))}}),1e3),presence.on("UpdateData",(async()=>{let e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/J/Jackbox/assets/logo.png"};const[t,a,n]=await Promise.all([presence.getSetting("useName"),presence.getSetting("useTime"),presence.getSetting("useDetails")]),{href:s,hostname:r,pathname:i,search:o}=document.location,c=i.split("/").slice(1);switch(a&&(e.startTimestamp=browsingTimestamp),r){case"jackbox.tv":if(game){const{name:a,logo:s}=game;if(e.largeImageKey=s,e.details=`Playing ${a}`,t){const{playerName:t,username:a,playerInfo:s}=gamePlayerState,r=t??a??s?.username??gamePlayerInfoState.name;r&&(n?e.details+=` as ${r}`:e.state=`as ${r}`)}if(n){const t=await game.getPresenceData({tag:gametag,playerState:gamePlayerState,infoState:gamePlayerInfoState,presence});e={...e,...t}}}else e.details="Idle";break;case"games.jackbox.tv":e.details="Looking at a past game",e.state=document.title,e.largeImageKey=document.querySelector("[class*=-artifact] .image").src,e.buttons=[{label:"View Game",url:s}];break;case"www.jackboxgames.com":switch(c[0]??""){case"":e.details="Browsing home page";break;case"author":e.details="Browsing blog posts by author",e.state=document.querySelector("h1").textContent.match(/Author: (.*)/i)[1];break;case"blog":e.details="Browsing blog posts";break;case"category":e.details="Browsing blog category",e.state=document.querySelector("h1").textContent.match(/Category: (.*)/i)[1];break;case"games":e.details="Browsing games";break;case"tag":e.details="Browsing blog posts by tag",e.state=document.querySelector("h1").textContent.match(/Tag: (.*)/i)[1];break;default:/^\/\d{4}(\/\d{2})?(\/\d{2})?\/$/.test(i)?(e.details="Browsing blog posts by date",e.state=document.querySelector("h1").textContent):"http://schema.org/Blog"===document.body.getAttribute("itemtype")?(e.details="Reading an article",e.state=document.querySelector("h1").textContent,e.buttons=[{label:"Read Article",url:s}]):(e.details="Browsing",e.state=document.title.match(/^(.*?)( - Jackbox Games)?$/)[1])}break;case"shop.jackboxgames.com":switch(c[0]??""){case"":e.details="Browsing store";break;case"cart":e.details="Viewing cart";break;case"collections":c[1]?c.includes("products")?(e.details="Viewing a product",e.state=document.querySelector("h1").textContent):(e.details="Browsing collection",e.state=document.querySelector("h1").textContent):e.details="Browsing collections";break;case"products":c[1]?(e.details="Viewing a product",e.state=document.querySelector("h1").textContent):e.details="Browsing collections";break;case"search":e.details="Searching store",e.state=new URLSearchParams(o).get("q")}}e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;