var __webpack_exports__={};const presence=new Presence({clientId:"806984559308046336"});let sname,sartist,aqualisteners,aquapresenter;function metadataListener(){const e=JSON.parse(this.responseText);sname=e.nowplaying.title,sartist=e.nowplaying.artist,aqualisteners=e.listeners.total,aquapresenter=e.presenter.name}function updateMetaData(){const e=new XMLHttpRequest;e.addEventListener("load",metadataListener),e.open("GET","https://api.itsaqua.net/stats",!0),e.send()}setInterval(updateMetaData,1e4),window.onload=function(){updateMetaData()};let lastTitle,lastTimeStart=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/A/Aqua/assets/logo.png"},[t,a,s]=await Promise.all([presence.getSetting("changedetails"),presence.getSetting("changestate"),presence.getSetting("changesmalltext")]);lastTitle!==sname&&(lastTitle=sname,lastTimeStart=Math.floor(Date.now()/1e3)),e.startTimestamp=lastTimeStart,sname||(lastTitle="Loading...",sname="Loading..."),sartist??="Loading...",aquapresenter??="Loading...",aqualisteners??="Loading...","AutoDJ"!==aquapresenter?(e.details=t?t.replace("%song%",sname).replace("%artist%",sartist):`üéµ | ${sartist} - ${sname}`,e.state=a?a.replace("%presenter%",aquapresenter):`üéôÔ∏è | ${aquapresenter}`):(e.details=t?t.replace("%song%",sname).replace("%artist%",sartist):`üéµ | ${sartist} - ${sname}`,e.state=a?a.replace("%presenter%","AutoDJ"):"üéôÔ∏è | AutoDJ"),e.smallImageText=s?s.replace("%listeners%",aqualisteners):`Listeners: ${aqualisteners}`,presence.setActivity(e,!0)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;