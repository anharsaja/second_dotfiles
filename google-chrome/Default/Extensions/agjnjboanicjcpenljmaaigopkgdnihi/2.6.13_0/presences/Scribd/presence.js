var __webpack_exports__={};const presence=new Presence({clientId:"1081552715609542686"}),browsingStamp=Math.floor(Date.now()/1e3);async function getStrings(){return presence.getStrings({browse:"general.browsing",reading:"general.reading",readingAbout:"general.readingAbout",searchFor:"general.searchFor",searchSomething:"general.searchSomething",viewCategory:"general.viewCategory",viewHome:"general.viewHome"},"en")}function capitalizeFirstLetter(e){return e?e.trim().charAt(0).toUpperCase()+e.trim().slice(1).toLowerCase():"Undefined"}function lowerCaseIt(e){return e?e.trim().toLowerCase():"Undefined"}function removePlural(e){return e?"s"===e.slice(-1)?e.slice(0,-1):e:"Undefined"}let strings;presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/S/Scribd/assets/logo.png",startTimestamp:browsingStamp},{href:t,pathname:s}=document.location,[r,a,n]=await Promise.all([presence.getSetting("privacy"),presence.getSetting("buttons"),presence.getSetting("covers")]),o=s.split("/"),i=document.querySelector('[data-e2e="tab-selected"]')?.firstChild?.textContent?.toLowerCase()??o[2]??o[1],c=capitalizeFirstLetter(document.querySelector('[data-e2e="header_module_page_title"]')?.textContent?.replace(/ /gm,"")).replace("doc","document"),l=!!i.match(/(everything)|(book)|(doc)|(podcast)|(sheeetmusic)|(snapshot)/gm)||!!s.match(/(book)|(doc)|(podcast)|(sheetmusic)|(snapshot)/gm),g=document.querySelector('[type="search"]'),d=document.querySelector('[class*="Breadcrumbs-ds2-module_list__"]'),u=document.querySelector('[data-e2e="header_module_page_title"]');if(strings||(strings=await getStrings()),g?.value)return e.details=r?strings.searchSomething:strings.searchFor,e.state=g.value,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",void presence.setActivity(e);switch(!0){case l:if(1==!!s.match(/[0-9]{9}/gm)?.[0])e.details=r?"Viewing a book":`Viewing ${removePlural(lowerCaseIt(2===d?.childElementCount?d?.lastChild?.textContent:d?.childNodes[1]?.textContent??document.querySelector('[class="_2mzx8C"] > span')?.textContent??i.replace(/doc/gm,"document").match(/(everything)|(book)|(document)|(podcast)|(snapshot)/gm)?.[0]??s.replace(/doc/gm,"document").match(/(everything)|(book)|(document)|(podcast)|(snapshot)/gm)?.[0]))}:`,e.state=document.querySelector('[data-e2e="desktop-content-title"]')?.textContent??document.querySelector('[data-e2e="doc_page_title"]')?.textContent,e.largeImageKey=document.querySelector('meta[property="og:image"]')?.getAttribute("content")??"https://cdn.rcd.gg/PreMiD/websites/S/Scribd/assets/logo.png",e.buttons=[{label:"View Title",url:t}];else switch(u?.textContent&&(e.details=r?strings.browse:`Browsing ${lowerCaseIt(u?.textContent)}`),i){case"overview":e.details=r?strings.browse:`Browsing all ${lowerCaseIt(u?.textContent)}`;break;case"categories":e.state="Viewing all categories";break;case"editors' picks":e.state="Editor picked";break;default:lowerCaseIt(c).replace(lowerCaseIt(i),"")?e.details=r?strings.viewCategory.replace(":",""):`Viewing ${i} in category:`:e.details=`Browsing ${i}`,e.state=lowerCaseIt(c).replace(lowerCaseIt(i),"").replace(/&/gm," & ")}break;case!!document.querySelector('[class="profile_name"]'):e.details=r?`Viewing a ${document.querySelector('[class="contribution_type"]')?.textContent}`:`Viewing ${document.querySelector('[class="contribution_type"]')?.textContent}`,e.state=document.querySelector('[class="profile_name"]')?.textContent,e.largeImageKey=document.querySelector("[class*='profile_thumbnail'] > img")?.getAttribute("src")??"https://cdn.rcd.gg/PreMiD/websites/S/Scribd/assets/logo.png";break;case"/"===s:e.details=strings.viewHome;break;case!!o[1]:switch(o[1]){case"home":e.details=strings.viewHome;break;case"read":e.details=r?"Reading a book":document.querySelector('[property="og:title"]')?.getAttribute("content"),e.state=capitalizeFirstLetter(document.querySelector('[class="page_counter"]')?.textContent);break;case"what-is-scribd":e.details=r?strings.reading:strings.readingAbout,e.state="What is scribd?";break;case"saved":e.details=r?strings.browse:"Browsing",e.state="Their saved titles";break;case"explore":o[2]?(e.details=r?strings.viewCategory.replace(":",""):strings.viewCategory,e.state=`${capitalizeFirstLetter(document.querySelector("ol")?.lastElementChild?.textContent)} => ${c}`):e.details="Viewing all categories";break;case"bestsellers":e.details=`Viewing ${r?"":document.querySelector('[data-e2e="pill-selected"]')?.textContent??o[2].slice(0,-1)} bestsellers`,e.state=`In category: ${i}`;break;case"search":e.details=r?strings.searchSomething:strings.searchFor,e.state=document.querySelector('[data-testid="results-header"]')?.textContent.split("â€œ")[1].slice(0,-1)}}r&&e.state&&delete e.state,n&&!r||"https://cdn.rcd.gg/PreMiD/websites/S/Scribd/assets/logo.png"===e.largeImageKey||(e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/S/Scribd/assets/logo.png"),a&&!r||!e.buttons||delete e.buttons,e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;