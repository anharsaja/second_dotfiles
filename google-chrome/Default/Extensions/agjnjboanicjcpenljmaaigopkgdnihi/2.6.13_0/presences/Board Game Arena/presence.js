"use strict";var __webpack_exports__={};const unused_variable=(e,a)=>e+a;unused_variable(1,2);const dataCache={},dataCacheTime={};function getGameTag(e){return getMetadata(e,"game_name",!0)}function getCachedItem(e){return dataCache[e]}function setCachedItem(e,a){dataCache[e]=a}function getCacheTime(e){return dataCacheTime[e]??0}function setCacheTime(e,a){dataCacheTime[e]=a}function getPageVariable(e,a,t=!1){const r=e.split(".");let s=`${r[0]}"]`;for(let e=1;e<r.length-1;e++)s+=`["${r[e]}"]`;return s+=`["${r[r.length-1]}`,t&&(s+='"].replace(/(^|$)/g, \'"\').split()["0'),a.getPageletiable(s)}async function getMetadata(e,a,t=!1){const r=Date.now();if(r-getCacheTime(a)>1e3){setCacheTime(a,r);const s=await getPageVariable(`gameui.${a}`,e,t);return setCachedItem(a,s),s}return getCachedItem(a)}function getGameData(e,a,t=!1){return getMetadata(e,`gamedatas.${a}`,t)}function getPlayerData(e,a){return getGameData(e,`players.${a}`)}function getCurrentGameState(e){return getGameData(e,"gamestate.name",!0)}function getCurrentGameStateType(e){return getGameData(e,"gamestate.type",!0)}function getActivePlayerId(e){return getGameData(e,"gamestate.active_player")}function getUserPlayerId(e){return getMetadata(e,"player_id")}function getPlayerAvatar(e){return document.querySelector(`#avatar_${e}`).src}function getPlayerScore(e){return document.querySelector(`#player_score_${e}`).textContent}const abalone={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/0.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Pushing marbles";break;case"nextPlayer":n.state="Waiting for next player";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_abalone=abalone,abandonallartichokes={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/1.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"rhubarbHarvestCard":case"harvest":n.state="Harvesting a card";break;case"playCard":n.state="Playing a card";break;case"beetChooseOpponent":case"leekChooseOpponent":n.state="Choosing an opponent";break;case"leekTakeCard":n.state="Taking a card";break;case"eggplantChooseCards":n.state="Choosing cards to pass on";break;case"pepperTakeCard":n.state="Picking card to put on deck";break;case"peasTakeCard":n.state="Picking card to keep";break;case"peasChooseOpponent":n.state="Choosing an opponent to give card to";break;case"onionChooseOpponent":n.state="Choosing an opponent to give onion to";break;case"cornTakeCard":n.state="Picking a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_abandonallartichokes=abandonallartichokes,abyss={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/2.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"plotAtCourt":n.state="Bringing a new Lord to Court";break;case"action":n.state="Taking an action";break;case"purchase":n.state="Purchasing an Ally";break;case"explore":case"explore2":case"explore3":n.state="Exploring";break;case"control":case"controlPostDraw":n.state="Controlling a Location";break;case"chooseMonsterReward":n.state="Choosing a reward";break;case"recruitPay":n.state="Paying for a Lord";break;case"affiliate":n.state="Affiliating with an Ally";break;case"lordEffect":n.state="Applying Lord effect";break;case"lord5":case"postpurchaseDiscard":case"cleanupDiscard":n.state="Discarding excess Allies";break;case"lord19":case"lord19b":case"locationEffectBlackSmokers":n.state="Swapping a Location";break;case"unusedLords":n.state="Using unused Lord abilities";break;case"secondStack":n.state="Taking a second stack from the Council";break;case"lord2":n.state="Discarding an Ally";break;case"lord4":n.state="Disabling a Lord from each opponent";break;case"lord7":n.state="Stealing a Monster token";break;case"lord12":n.state="Discarding an Ally for Pearls";break;case"lord16":n.state="Choosing a Council stack";break;case"lord17":n.state="Discarding a Council stack";break;case"lord21":n.state="Discarding and replaceing a Lord";break;case"lord22":n.state="Recruiting a second Lord";break;case"lord23":n.state="Discarding a Lord to gain one from the Court";break;case"lord26":n.state="Discarding a Lord to gain one from the top of the deck";break;case"lord23b":n.state="Swapping a Lord";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_abyss=abyss,ageofcivilization={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/3.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickCiv":n.state="Rising a civilization";break;case"playerTurn":case"playerEndTurn":n.state="Taking an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_ageofcivilization=ageofcivilization,agricola={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/4.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"draftPlayers":n.state="Drafting";break;case"resolveChoice":n.state="Choosing an action";break;case"placeFarmer":n.state="Placing a farmer";break;case"fencing":n.state="Building fences";break;case"payResources":n.state="Paying resources";break;case"occupation":n.state="Playing an occupation";break;case"plow":n.state="Plowing a field";break;case"construct":n.state="Constructing a room";break;case"sow":n.state="Sowing a field";break;case"stables":n.state="Building stables";break;case"renovation":n.state="Renovating";break;case"improvement":n.state="Playing an improvement";break;case"exchange":n.state="Exchanging resources";break;case"reorganize":n.state="Reorganizing animals";break;case"confirmTurn":case"confirmPartialTurn":n.state="Confirming turn";break;case"loadSeed":n.state="Entering a seed for the game";break;case"checkCombos":n.state="Checking combos";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_agricola=agricola,akeruption={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/5.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playSourceTile":case"confirmSourceTile":n.state="Playing a lava source tile";break;case"playTile":case"confirmTile":n.state="Playing a lava tile";break;case"extraTileCheck":n.state="Playing an extra lava tile";break;case"playActionCards":n.state="Playing action cards";break;case"playWalls":n.state="Building a wall";break;case"chooseWallMaterial":n.state="Choosing the material to build with";break;case"volcanicBomb":n.state="Destroying a wall";break;case"sinkhole":n.state="Destroying a tile";break;case"aftershock":case"confirmRotateTile":n.state="Rotating a tile";break;case"quake":case"confirmReplaceTile":n.state="Replacing a tile";break;case"relocatePickWall":case"relocatePlaceWall":n.state="Rearranging walls";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_akeruption=akeruption,aknile={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/6.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTrade":n.state="Trading";break;case"playerPlantOrSpeculate":n.state="Planting or Speculating";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_aknile=aknile,akropolis={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/7.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeTile":n.state="Placing a tile in their city";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_akropolis=akropolis,alhambra={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/8.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"initialMoney":n.state="Accepting initial money";break;case"playerTurn":n.state="Taking an action";break;case"placeBuildings":case"placeLastBuildings":n.state="Placing new buildings";break;case"confirmTurn":n.state="Confirming turn";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_alhambra=alhambra,almadi={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/9.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},A_almadi=almadi,alveole={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/10.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},A_alveole=alveole,amyitis={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/11.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerAction":n.state="Taking an action";break;case"recruitFarmer":n.state="Choosing a field";break;case"recruitEngineer":case"recruitEngineerNoPoints":n.state="Building an irrigation";break;case"procession":case"recruitPriest":n.state="Choosing a temple";break;case"caravanSell":n.state="Selling resources";break;case"caravanCard":case"freeCourtChoice":n.state="Choosing a Court card";break;case"caravanGarden":n.state="Planting in the garden";break;case"endActionCheck":n.state="Choosing a resource with Caravaneer";break;case"tammouzChoice":n.state="Choosing a field (Tammouz temple power)";break;case"tammouzExchange":n.state="Exchanging resources (Tammouz temple power)";break;case"stockLimitation":n.state="Discarding resources";break;case"ishtarChoice":n.state="Choosing a talent or camel (Ishtar temple power)";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_amyitis=amyitis,anachrony={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/12.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selection":n.state="Choosing a leader";break;case"playerTurn":case"dummy":n.state="Taking an action";break;case"vortex":n.state="Choosing warp tiles";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_anachrony=anachrony,apocalypseazcc={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/13.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"gameOverAreYouSure":case"gameOverConfirmation":n.state="Confirming game results";break;case"state_100":case"state_201":n.state="Playing";break;case"state_200":n.state="Moving a character";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_apocalypseazcc=apocalypseazcc,applejack={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/14.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"STATE_PLAYER_TURN_TO_PLACE_TILE":n.state="Placing a tile";break;case"STATE_APPLEJACK_MOVE":n.state="Applejack is moving";break;case"STATE_HARVESTING":n.state="A harvest is happening";break;case"STATE_REPLENISHMENT_TROUGHS":n.state="Replenishing the troughs";break;case"STATE_BLOSSOM_SOCRING":n.state="A blossom scoring is happening";break;case"STATE_PLACE_BLIND_DRAWN_TILE":n.state="Placing a blind drawn tile";break;case"STATE_REFILL_SIDE_FIELD":n.state="Refilling the side field";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_applejack=applejack,architectsofthewestkingdom={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/15.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"setup":case"gameSetup":n.state="Setting up the game";break;case"playerDraft":n.state="Choosing a building to keep";break;case"playerTurn":n.state="Choosing an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_architectsofthewestkingdom=architectsofthewestkingdom,arcticscavengers={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/16.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},A_arcticscavengers=arcticscavengers,armadora={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/17.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"playerTurnSecondPalisade":n.state="Placing another palisade";break;case"reinforce":n.state="Placing a reinforcement on a warrior";break;case"unleash":n.state="Shooting an opponent warrior";break;case"placeWarrior":n.state="Placing a warrior";break;case"lookWarrior":n.state="Looking at a warrior's value";break;case"placePalisadeFree":n.state="Placing a palisade";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_armadora=armadora,arnak={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/18.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectAction":n.state="Selecting an action";break;case"afterMain":n.state="Playing free actions";break;case"evalPlane":n.state="Gaining free items";break;case"mustDiscard":case"mayDiscard":case"mustDiscardFree":n.state="Discarding a card";break;case"idolUpgrade":n.state="Upgrading a card";break;case"mayExile":case"idolExile":n.state="Exiling a card";break;case"idolRefresh":n.state="Refreshing an assistant";break;case"researchBonus":n.state="Evaluating research bonuses";break;case"mustTravel":case"mayTravel":n.state="Traveling to a site";break;case"buyArt":n.state="Buying an artifact";break;case"artWaitArgs":n.state="Evaluting artifact effects";break;case"buyItem":n.state="Buying an item";break;case"artSelectAss":n.state="Selecting an assistant";break;case"artEarringSelectKeep":n.state="Keeping an earring";break;case"artEarringSelectTopdeck":n.state="Returning an earring to the top of the deck";break;case"artSelectDiscard":n.state="Selecting an item from the exile pile";break;case"decideKeep":n.state="Deciding whether to keep cards";break;case"artActivateAss":n.state="Activating an assistant";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_arnak=arnak,artdecko={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/19.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"action1State":n.state="Taking their first action";break;case"action2State":n.state="Taking their second action";break;case"discardState":n.state="Discarding stuff";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_artdecko=artdecko,artthief={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/20.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playCard":n.state="Playing a card";break;case"moveThief":n.state="Moving thieves";break;case"flipCard":n.state="Flipping a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_artthief=artthief,assyria={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/21.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},A_assyria=assyria,astra={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/22.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"statePlayerTurn":n.state="Taking their turn";break;case"stateDiscovery":n.state="Selecting a Boon";break;case"stateDream":n.state="Dreaming";break;case"stateDiscard":n.state="Discarding";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},A_astra=astra,automobiles={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/23.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},A_automobiles=automobiles,azul={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/24.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getUserPlayerId(e),s=await getPlayerData(e,t),i={smallImageKey:getPlayerAvatar(r),smallImageText:`Score: ${getPlayerScore(r)}`};if(t===r)switch(a){case"chooseTile":i.state="Choosing tiles";break;case"confirmLine":case"chooseLine":i.state="Placing tiles on a line";break;case"chooseColumns":i.state="Placing tiles on a column";break;case"placeTiles":i.state="Scoring tiles";break;case"gameEnd":i.state="Viewing game results"}else i.state=`Waiting for ${s.name}`;return i}},A_azul=azul,babydinosaurrescue={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/25.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Selecting a token and a card to play";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_babydinosaurrescue=babydinosaurrescue,backgammon={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/26.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectColumn":n.state="Selecting a column";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_backgammon=backgammon,bahamataxi={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/27.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"turnBeforeMove":n.state="Moving their taxi";break;case"turnAfterMove":n.state="Picking up a passenger";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_bahamataxi=bahamataxi,balloonpop={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/28.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"RollDice":n.state="Rolling the dice";break;case"RollDice2":case"Rolling2":n.state="Rolling the dice the second time";break;case"RollDice3":case"Rolling3":n.state="Rolling the dice the third time";break;case"Results":n.state="Calculating the result";break;case"Popped":n.state="Balloons popped!";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_balloonpop=balloonpop,bandada={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/29.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"drawCard":n.state="Selecting a card";break;case"changeDice1":case"changeDice2":case"changeDice3":n.state="Changing dice";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_bandada=bandada,bandido={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/30.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_bandido=bandido,bang={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/31.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playCard":n.state="Playing a card";break;case"react":n.state="Reacting";break;case"reactBeer":n.state="Playing beer to survive";break;case"discardExcess":n.state="Discarding excess cards";break;case"selectCard":n.state="Selecting a card for effects";break;case"drawCard":n.state="Drawing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_bang=bang,baolakiswahili={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/32.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"gameEdit":n.state="Editing board for both players";break;case"kunamuaMoveSelection":n.state="Placing seed and making move";break;case"kunamuaMoveExecution":n.state="Executing move";break;case"mtajiCaptureSelection":case"kunamuaCaptureSelection":n.state="Selecting kichwa";break;case"safariDecision":n.state="Deciding about safari";break;case"mtajiMoveSelection":n.state="Making mtaji move";break;case"mtajiMoveExecution":n.state="Executing mtaji move";break;case"husMoveSelection":n.state="Making a move";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_baolakiswahili=baolakiswahili,barbu={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/33.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},B_barbu=barbu,barenpark={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/34.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"STATE_MAIN_PLAY_STATE":n.state="Playing their turn";break;case"STATE_PRIVATE_CHOOSE_TILE_FROM_PLAYER_SUPPLY":n.state="Selecting a tile from their supply";break;case"STATE_PRIVATE_PLACE_TILE_IN_PARK":n.state="Placing a tile in their park";break;case"STATE_PRIVATE_CHOOSE_FROM_SUPPLY_BOARD":n.state="Selecting a tile from the supply board";break;case"STATE_PRIVATE_TRY_MODE_PLACE_PARK":case"STATE_PRIVATE_PLACE_PLAYER_PARK":n.state="Placing a new park area";break;case"STATE_PRIVATE_PASS_TURN_CHOOSE_FROM_SUPPLY_BOARD":n.state="Selecting a new green area tile";break;case"STATE_PRIVATE_CONFIRM_TURN":n.state="Confirming their turn";break;case"STATE_PRIVATE_TRY_MODE_CHOOSE_TILE":n.state="Selecting a tile or a park";break;case"STATE_PRIVATE_TRY_MODE_PLACE_TILE":n.state="Placing a tile";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_barenpark=barenpark,barrage={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/35.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickStart":case"freePickStart":n.state="Picking a company/officer pair and a starting contract";break;case"resolveChoice":n.state="Choosing an action";break;case"placeEngineer":n.state="Placing an engineer";break;case"construct":n.state="Constructing a structure";break;case"payResources":n.state="Paying for something";break;case"produce":n.state="Producing energy";break;case"fulfillContract":n.state="Fulfilling a contract";break;case"placeDroplet":n.state="Placing a droplet";break;case"takeContract":n.state="Taking a contract";break;case"discardContract":n.state="Discarding contracts";break;case"placeStructure":n.state="Placing a structure";break;case"confirmTurn":case"confirmPartialTurn":n.state="Confirming turn";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_barrage=barrage,battleforhill={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/36.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},B_battleforhill=battleforhill,battleoflits={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/37.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"firstTurn":n.state="Playing a piece";break;case"pieRule":n.state="Choosing whether to go first or second";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_battleoflits=battleoflits,battleship={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/38.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurnPlace":n.state="Placing ships";break;case"playerTurnAttack":n.state="Firing at a grid";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_battleship=battleship,belote={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/39.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},B_belote=belote,betta={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/40.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_betta=betta,beyondthesun={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/41.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"actionPhase":n.state="Moving action pawn";break;case"achievementPhase":n.state="Claiming an achievement";break;case"trade":case"tradeOnly":n.state="Trading resources";break;case"productionPhase":n.state="Choosing what to produce";break;case"chooseDisc":n.state="Choosing a disc to place";break;case"guild1":n.state="Opening a Tier 1 Guild";break;case"guild2":n.state="Opening a Tier 2 Guild";break;case"controlEffect":case"colonizeEffect":case"controlOrder":case"eventChoice":case"eventChoiceAll":case"immediateEffect":n.state="Resolving an effect";break;case"pickTechnologyType":n.state="Choosing a color for the new Technology";break;case"pickTechnology":n.state="Choosing a Technology";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_beyondthesun=beyondthesun,bids={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/42.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"thiefState":case"endHandThiefState":n.state="Stealing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_bids=bids,bigmonster={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/43.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"teamSelection":n.state="Choosing a team";break;case"explorerSelection":n.state="Selecting an explorer";break;case"tileSelection":n.state="Selecting a tile";break;case"var_placeTile":case"placeTile":n.state="Placing a tile";break;case"bmExploTileSelection":n.state="Selecting a tile from the discard pile";break;case"bmExploTilePlacement":n.state="Placing a tile from the discard pile";break;case"var_tileSelection":n.state="Selecting a tile to play/discard";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_bigmonster=bigmonster,bigtimesoccer={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/44.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurnOff":n.state="Taking an offensive action";break;case"playerTurnDef":n.state="Playing a defense card";break;case"playerClear":n.state="Selecting a zone to clear";break;case"playerSelect":n.state="Selecting a zone";break;case"playerGoalkick":n.state="Taking a goal kick";break;case"playerFreekick":n.state="Taking a free kick";break;case"playerFreeShot":n.state="Taking a free shot";break;case"playerReplyProposal":n.state="Deciding whether to end the half";break;case"playerCard72":n.state="Deciding how to play a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_bigtimesoccer=bigtimesoccer,bigtwo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/45.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_bigtwo=bigtwo,biyi={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/46.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},B_biyi=biyi,blackjack={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/47.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeBet":n.state="Placing a bet";break;case"playHand":n.state="Taking an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_blackjack=blackjack,blaze={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/48.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},B_blaze=blaze,bloodrage={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/49.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},B_bloodrage=bloodrage,blooms={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/50.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Placing a stone";break;case"playerTurn2":n.state="Placing a second stone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_blooms=blooms,blueskies={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/51.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"startingGates":n.state="Purchasing starting gates";break;case"buyGates":n.state="Purchasing gates";break;case"playCards":n.state="Playing cards or using actions";break;case"scoreIncome":n.state="Scoring income";break;case"governmentAssistance":n.state="Receiving government assistance";break;case"specialAction":n.state="Choosing airports and cards to discard";break;case"governmentDiscard":n.state="Discarding cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_blueskies=blueskies,bobail={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/52.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playBobail":n.state="Playing the Bobail";break;case"playToken":n.state="Playing a token";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_bobail=bobail,bombay={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/53.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"action_of_active_player":n.state="Choosing an action";break;case"choice_elephant_package_to_build":n.state="Choosing a package to build";break;case"choice_cube_market":n.state="Choosing a package in the market";break;case"choice_elephant_package_to_sell":n.state="Choosing a package to sell";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_bombay=bombay,boomerangaustralia={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/54.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectThrowCard":n.state="Selecting a throw card";break;case"draft":n.state="Playing a card";break;case"revealCards":n.state="Revealing cards";break;case"chooseActivity":n.state="Choosing an activity";break;case"selectCatchCard":n.state="Selecting a catch card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_boomerangaustralia=boomerangaustralia,boomerangeurope={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/55.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectThrowCard":n.state="Selecting a throw card";break;case"draft":n.state="Playing a card";break;case"revealCards":n.state="Revealing cards";break;case"chooseTreasure":n.state="Choosing a national treasure";break;case"selectCatchCard":n.state="Selecting a catch card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_boomerangeurope=boomerangeurope,boomerangusa={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/56.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectThrowCard":n.state="Selecting a throw card";break;case"draft":n.state="Playing a card";break;case"revealCards":n.state="Revealing cards";break;case"chooseactivities":n.state="Choosing an activity";break;case"selectCatchCard":n.state="Selecting a catch card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_boomerangusa=boomerangusa,boop={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/57.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurnFigureSelection":n.state="Playing a Kitten or Cat";break;case"playerTurnKitten":n.state="Playing a Kitten";break;case"playerTurnCat":n.state="Playing a Cat";break;case"figuresToUpgradeSelection":n.state="Selecting 3 Kittens/Cats to graduate";break;case"singleFigureToUpgradeSelection":n.state="Selecting 1 Kitten/Cat to graduate";break;case"confirmTurn":n.state="Confirming turn";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_boop=boop,bossquest={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/58.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},B_bossquest=bossquest,breakthecode={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/59.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Asking a question or guessing the tiles";break;case"GuessTile":n.state="Guessing the tiles";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_breakthecode=breakthecode,briscola={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/60.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"showCards":n.state="Choosing an action or going to next turn";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_briscola=briscola,bubbleepop={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/61.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},B_bubbleepop=bubbleepop,bug={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/62.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Placing a stone";break;case"growing":n.state="Growing a bug";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_bug=bug,burglebros={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/63.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"randomizeWalls":n.state="Generating new walls";break;case"chooseCharacter":n.state="Choosing a character";break;case"startingTile":n.state="Choosing a starting tile";break;case"playerTurn":n.state="Taking an action";break;case"moveGuard":n.state="A Guard is moving";break;case"cardChoice":n.state="Making a card choice";break;case"tileChoice":n.state="Making a tile choice";break;case"playerChoice":n.state="Making a player choice";break;case"proposeTrade":n.state="Proposing a trade";break;case"confirmTrade":n.state="Confirming a trade";break;case"specialChoice":n.state="Making a special choice";break;case"drawToolsAndDiscard":n.state="Drawing a tool";break;case"takeCards":n.state="Taking cards";break;case"confirmRookMove":n.state="Confirming a Rook move";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_burglebros=burglebros,butterfly={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/64.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeHedgehog":n.state="Placing the hedgehog";break;case"moveHedgehog":n.state="Moving the hedgehog";break;case"drawConfirm":n.state="Drawing a tile";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_butterfly=butterfly,buttons={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/65.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Rolling the dice";break;case"placeButton":n.state="Placing a button";break;case"roundEnd":n.state="Round end";break;case"placeStar":n.state="Allocating star(s)";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_buttons=buttons,buyword={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/66.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"RollDice":n.state="Rolling the die";break;case"playerChoice":n.state="Selecting a value for the die";break;case"BuyLetters":n.state="Buying letters";break;case"SellWords":n.state="Selling words";break;case"DiscardLetters":n.state="Discarding letters";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},B_buyword=buyword,cacao={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/67.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a worker tile";break;case"playerJungle":n.state="Filling a jungle space";break;case"playerJungleActions":n.state="Taking a jungle action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_cacao=cacao,canosa={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/68.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"playerTurn2":n.state="Moving a piece or transferring a ring";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_canosa=canosa,cantstop={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/69.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerChoice":n.state="Choosing to stop or continue";break;case"comboChoice":n.state="Choosing a dice combination";break;case"tutorialStart":n.state="Choosing to start the tutorial";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_cantstop=cantstop,cantstopexpress={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/70.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"RollDice":n.state="Rolling the dice";break;case"playerTurn":n.state="Selecting a dice combination";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_cantstopexpress=cantstopexpress,capereurope={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/71.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"statePlay":n.state="Playing a card";break;case"stateReturnGood":n.state="Returning a good";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_capereurope=capereurope,caravan={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/72.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Performing an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_caravan=caravan,carcassonne={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/73.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getUserPlayerId(e),s=await getPlayerData(e,t),i={smallImageKey:getPlayerAvatar(r),smallImageText:`Score: ${getPlayerScore(r)}`};if(t===r)switch(a){case"playTile":i.state="Placing a tile";break;case"canPlayPartisan":i.state="Placing a partisan on the tile";break;case"dragonWalkPlayerChoice":i.state="Moving the dragon";break;case"scorePoints":i.state="Scoring points";break;case"gameEnd":i.state="Viewing game results"}else i.state=`Waiting for ${s.name}`;return"unachievedCount"===a&&(i.state="Calculating unachieved points"),i}},C_carcassonne=carcassonne,carcassonnehuntersandgatherers={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/74.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playTile":n.state="Playing a tile";break;case"canPlayTribeMember":n.state="Placing a tribe member or hut";break;case"canGetBackTribeMember":n.state="Taking a tribe member back";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_carcassonnehuntersandgatherers=carcassonnehuntersandgatherers,cardiceo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/75.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"roll":n.state="Rolling the dice";break;case"play":n.state="Playing";break;case"pass":n.state="Passing";break;case"keep":n.state="Rolling or keeping the dice";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_cardiceo=cardiceo,caribbeanallfours={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/76.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},C_caribbeanallfours=caribbeanallfours,carnegie={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/77.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerInitialHousing":n.state="Building a housing project";break;case"playerInitialMovement":n.state="Making initial movement";break;case"playerSelectAction":n.state="Choosing an action";break;case"playerEvent":n.state="Collecting income";break;case"playerHumanResources":n.state="Using Human Resources Departments";break;case"playerManagement":n.state="Using Management Departments";break;case"playerConstruction":n.state="Using Construction Departments";break;case"playerRND":n.state="Using Research and Development Departments";break;case"multiActivateWorkers":case"playerActivateWorkers":n.state="Activating workers";break;case"processWelfareDonation":n.state="Making Welfare donations";break;case"playerChooseTabs":n.state="Choosing project tabs";break;case"playerReserveDepartment":n.state="Reserving a department";break;case"playerReplaceDonation":n.state="Replacing a donation tile";break;case"multiSecretDonation":n.state="Choosing a secret donation";break;case"playerConfirmSetup":n.state="Confirming setup";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_carnegie=carnegie,carrara={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/78.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"buyBlocks":n.state="Buying blocks";break;case"payBlocks":n.state="Paying using blocks";break;case"chooseAction":n.state="Choosing an action";break;case"chooseLocation":n.state="Choosing where to build";break;case"chooseUpgrade":n.state="Choosing an upgrade";break;case"buyObject":n.state="Buying an object";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_carrara=carrara,castlesofburgundy={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/79.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"setupChoices":n.state="Choosing starting positions";break;case"playerAction":n.state="Choosing an action";break;case"advPlaceTile":n.state="Town Hall Advantage: Placing a tile";break;case"chooseDepot":n.state="Taking goods from a depot";break;case"chooseGoods":n.state="Choosing goods to take";break;case"advTakeTile":n.state="Advantage: Taking a tile from main board";break;case"advSellGoods":n.state="Warehouse advantage: Selling goods";break;case"castleAdvAction":n.state="Castle advantage: Choosing an action";break;case"confirmTurn":n.state="Confirming turn";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_castlesofburgundy=castlesofburgundy,castlesofcaleira={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/80.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"selectTargets":n.state="Selecting a target";break;case"selectPlayer":n.state="Selecting a player to exchange a card with";break;case"observatory":n.state="Deciding what to do with an observatory";break;case"marketplace":n.state="Choosing a card to exchange";break;case"wizardTower":n.state="Sorting the top cards of the deck";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_castlesofcaleira=castlesofcaleira,catan={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/81.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getUserPlayerId(e),s=await getPlayerData(e,t),i={smallImageKey:getPlayerAvatar(r),smallImageText:`Score: ${getPlayerScore(r)}`};if(t===r)switch(a){case"playerWarmup":i.state="Producing resources";break;case"playerTurn":i.state="Choosing an action";break;case"selectRoad":i.state="Placing a road";break;case"selectCity":i.state="Placing a city";break;case"selectTile":i.state="Placing a tile";break;case"selectResources":i.state="Selecting resources";break;case"playersTrade":i.state="Trading with other players";break;case"gameEnd":i.state="Viewing game results"}else i.state=`Waiting for ${s.name}`;return i}},C_catan=catan,catcafe={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/82.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurnPicking":n.state="Picking a die";break;case"multiplayerDrawingPhase":n.state="Drawing";break;case"playerTurnDrawingPhase1":n.state="Choosing a die for location";break;case"playerTurnDrawingPhase2":n.state="Choosing a location";break;case"playerTurnDrawingPhase3":n.state="Choosing a shape";break;case"playerTurnCatSelection":n.state="Choosing a cat";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_catcafe=catcafe,caverna={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/83.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},C_caverna=caverna,caylus={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/84.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},C_caylus=caylus,celestia={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/85.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"captainRoll":n.state="Rolling";break;case"playerDecision":n.state="Making a decision (stay or disembark)";break;case"ejectionCard":n.state="Playing an ejection card";break;case"captainAnnouncement":n.state="Making an announcement";break;case"powerCards":case"playPowerCards":n.state="Playing a power card";break;case"alternativeRoute":n.state="Rerolling dice";break;case"equipmentCards":n.state="Playing equipment cards";break;case"airshipCrash":n.state="The airship crashed";break;case"loneCaptain":n.state="Making a decision (continue alone or not)";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_celestia=celestia,century={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/86.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurnAction":n.state="Choosing an action";break;case"playerTurnDiscard":n.state="Discarding spices";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_century=century,cephalopod={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/87.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectSquare":n.state="Selecting a square";break;case"selectDie":n.state="Selecting a die";break;case"finalizeThisCombination":n.state="Finalizing a combination";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_cephalopod=cephalopod,chakra={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/88.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"take":n.state="Taking energy";break;case"channel":n.state="Channeling energy";break;case"pickColor":n.state="Choosing energy color";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_chakra=chakra,checkers={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/89.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},C_checkers=checkers,chess={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/90.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerSelectPiece":n.state="Moving a piece";break;case"playerPromotePawn":n.state="Promoting a pawn";break;case"playerAgreeToDraw":n.state="Agreeing to a draw";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_chess=chess,chicagoexpress={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/91.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Choosing an action";break;case"auction":n.state="Bidding on an auction";break;case"expansion":case"expansionConfirm":n.state="Expanding a route";break;case"development":case"developmentConfirm":n.state="Developing a hex";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_chicagoexpress=chicagoexpress,chimerastation={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/92.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},C_chimerastation=chimerastation,chinagold={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/93.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},C_chinagold=chinagold,chinesecheckers={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/94.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Moving a marble";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_chinesecheckers=chinesecheckers,chocolatefactory={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/95.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"expandRecruit":n.state="Expanding and/or recruiting";break;case"runFactory":case"simultaneousRunFactory":n.state="Running a factory shift";break;case"fulfilOrders":case"simultaneousFulfilOrders":n.state="Fulfilling orders";break;case"cleanupEmployee":n.state="Using Department Store Agent";break;case"cleanupPickOrders":n.state="Replacing completed corner shop orders";break;case"cleanupDiscardChocolate":n.state="Discarding chocolate";break;case"gameoverSolo":case"gameover":n.state="Game over";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_chocolatefactory=chocolatefactory,chromino={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/96.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Placing or drawing a tile";break;case"playerTurnEmptyTileBag":case"playerTurnAfterDraw":n.state="Placing a tile";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_chromino=chromino,cinco={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/97.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking their turn";break;case"playToken":n.state="Placing a token";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_cinco=cinco,circleoflife={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/98.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Placing a stone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_circleoflife=circleoflife,cityofthebigshoulders={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/99.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerStartFirstCompany":case"gameStartFirstCompany":n.state="Starting a company";break;case"playerSellPhase":n.state="Selling certificates to the bank";break;case"playerBuildingPhase":n.state="Playing a building";break;case"playerBuyPhase":case"playerSkipSellBuyPhase":n.state="Buying a certificate or starting a company";break;case"playerActionPhase":n.state="Choosing an action";break;case"playerBuyResourcesPhase":n.state="Buying resources";break;case"playerProduceGoodsPhase":n.state="Producing goods";break;case"managerBonusResources":n.state="Choosing resources to gain from Haymarket Square";break;case"playerDistributeGoodsPhase":n.state="Distributing goods";break;case"playerDividendsPhase":n.state="Paying dividends";break;case"playerAssetWorkerBonus":n.state="Hiring a worker";break;case"playerAssetAutomationBonus":n.state="Automating a factory";break;case"playerFreeActionPhase":n.state="Trading with Haymarket Square or using Capital Assets";break;case"playerAssetAppealBonus":case"playerActionAppealBonus":case"playerBuyResourceAppealBonus":case"playerProduceGoodsAppealBonus":case"playerDistributeAppealBonus":case"playerDividendsAppealBonus":case"managerBonusAppeal":case"playerFreeActionAppealBonus":case"playerUseAssetsAppealBonus":n.state="Gaining or forfeiting appeal bonus";break;case"playerEmergencyFundraise":n.state="Performing Emergency Fundraising";break;case"playerUseAssetsPhase":n.state="Using unexhausted assets";break;case"playerconfirmDirectorship":n.state="Confirming directorship change";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_cityofthebigshoulders=cityofthebigshoulders,clansofcaledonia={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/100.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},C_clansofcaledonia=clansofcaledonia,clashofdecks={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/101.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"invocation":n.state="Invoking a card or assault";break;case"incantAssault":n.state="Playing an incantation or continuing assault";break;case"draftPick":n.state="Picking a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_clashofdecks=clashofdecks,classicgo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/102.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"playerPassed":n.state="Playing a stone";break;case"firstMarkStones":case"markStones":n.state="Designating dead stones";break;case"markStonesOrAgree":n.state="Designating status of stones";break;case"scoring":n.state="Scoring points";break;case"isDesignateStones":n.state="Defining action for dead stones";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_classicgo=classicgo,cloudcity={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/103.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeTile":n.state="Placing a tile";break;case"placeWalkway":n.state="Placing walkways";break;case"takeTile":n.state="Taking a tile";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_cloudcity=cloudcity,codexnaturalis={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/104.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickStarterCardSide":n.state="Choosing a side for their starter card";break;case"pickSecretObjectiveCard":n.state="Choosing a secret objective card";break;case"playerTurn":n.state="Playing a card";break;case"drawCard":n.state="Drawing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_codexnaturalis=codexnaturalis,coinche={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/105.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},C_coinche=coinche,coins={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/106.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},C_coins=coins,coloretto={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/107.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Picking a card or taking a row";break;case"chooseRow":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_coloretto=coloretto,colorflush={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/108.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},C_colorflush=colorflush,colorpop={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/109.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},C_colorpop=colorpop,coltexpress={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/110.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"randomGangsters":n.state="Setup: Randomizing gangsters";break;case"chooseGangsters":n.state="Choosing a character";break;case"playCard":n.state="Playing a card";break;case"chooseCar":n.state="Moving their character";break;case"chooseCarMarshal":n.state="Choosing where the Marshal moves";break;case"chooseTargetShoot":n.state="Choosing a target to shoot";break;case"chooseLoot":n.state="Choosing which loot to take";break;case"chooseTargetPunch":n.state="Choosing who to punch";break;case"discard":n.state="Choosing which cards to discard";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_coltexpress=coltexpress,commanderchess={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/111.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},C_commanderchess=commanderchess,concept={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/112.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickWord":n.state="Picking a word";break;case"addHint":case"guessWord":n.state=t===s?"Adding hints":"Guessing word";break;case"waitingScore":n.state="Attributing scores";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_concept=concept,connectfour={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/113.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"confirmMove":n.state="Playing a disc";break;case"playerTurnOrSwap":n.state="Swapping colors or choosing a column";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_connectfour=connectfour,connectsix={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/114.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"confirmMove":n.state="Playing a stone";break;case"drawProposal":n.state="Accepting or declining draw";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_connectsix=connectsix,consonar={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/115.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Giving orders";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_consonar=consonar,conspiracy={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/116.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"lordStackSelection":n.state="Choosing a lord stack";break;case"lordSelection":case"lordPick":n.state="Recruiting a lord";break;case"lordSwap":n.state="Swapping lords";break;case"locationStackSelection":n.state="Choosing a location stack";break;case"locationSelection":n.state="Choosing a location";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_conspiracy=conspiracy,copenhagen={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/117.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking a card or placing a facade tile";break;case"takeAdjacentCard":case"takeAdditionalCard":n.state="Taking another card";break;case"discardDownToMaxHandSize":n.state="Discarding a card";break;case"coatOfArms":n.state="Doing special abilities or actions";break;case"takeCardsLastCall":n.state="Using special ability tiles";break;case"placePolyominoAfterTakingCards":n.state="Placing a facade tile";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_copenhagen=copenhagen,cosmosempires={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/118.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"adjustProductionRollPhase":n.state="Adjusting the production roll";break;case"buildOrCyclePhase":n.state="Building or cycling a card";break;case"chooseDarkSpaceHubRollValuePhase":n.state="Choosing a roll value for the Darkspace Hub";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_cosmosempires=cosmosempires,coupcitystate={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/119.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerBegin":n.state="Taking an action";break;case"ask":case"askBlock":case"secondChance":n.state=t===s?"Stopping an action":"Waiting for players to respond";break;case"askChooseCard":n.state="Choosing a card";break;case"askDiscard":n.state="Discarding cards";break;case"askExamine":n.state="Acting on a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_coupcitystate=coupcitystate,coupell={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/120.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"confirmTurn":n.state="Taking an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_coupell=coupell,crazyfarmers={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/121.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectFirstCrossroad":n.state="Selecting first crossroad";break;case"playerTurn":n.state="Moving or playing a card";break;case"endTurn":n.state="Playing a card";break;case"discard":n.state="Discarding a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_crazyfarmers=crazyfarmers,cribbage={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/122.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"giveToCrib":n.state="Choosing cards to give to the crib";break;case"cutCard":n.state="Choosing a cut card";break;case"playerTurn":case"go":n.state="Playing a card";break;case"cutDeal":n.state="Choosing a card for deal";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_cribbage=cribbage,crimezoom={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/123.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Performing an investigation";break;case"questionnaire":n.state="Answering the questionnaire";break;case"epilogue":n.state="Reading the epilogue";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_crimezoom=crimezoom,crusadersthywillbedone={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/124.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},C_crusadersthywillbedone=crusadersthywillbedone,cubirds={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/125.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Laying birds";break;case"playerDrawChooser":n.state="Drawing cards";break;case"playerFlockChooser":n.state="Completing a flock";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_cubirds=cubirds,cubosaurs={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/126.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"mainAction":case"confirmation":n.state="Taking an action";break;case"dnaSteal":n.state="Stealing DNA";break;case"DNAtimer":case"chooseTile":n.state="Playing a DNA Evolution tile";break;case"dnaEffect":n.state="Buying a DNA Evolution tile";break;case"waitNextRound":n.state="Looking at the end of round scores";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},C_cubosaurs=cubosaurs,darkagent={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/127.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"NATIONPhase":n.state="Choosing a nation";break;case"PlaceSat":n.state="Placing a satellite";break;case"COLORPhase":n.state="Choosing a color";break;case"OnOwnSatClick":case"OnOwnSatClick2":case"ClickOnSecondSat":case"ClickOnSecondSat2":n.state="Interacting with a satellite";break;case"TDOACtion":n.state="Choosing an action for satellites";break;case"MediaAction":n.state="Choosing cards for media action";break;case"MediaAction2":n.state="Placing cards for media action";break;case"onAimLOKClick":n.state="Choosing an aim to lock";break;case"ONUPhase":n.state="Voting for U.N. Peace decision";break;case"ChooseSatToUpgrade":n.state="Upgrading a satellite";break;case"onEQPRIFClick":n.state="Choosing a target for RIFLE";break;case"onChooseDBL":n.state="Choosing a double agent";break;case"onEQPJETClick":case"onKAMKAZClick":n.state="Choosing a spy";break;case"JETPhase2":n.state="Choosing a sentinel";break;case"onEQPBINClick":n.state="Choosing an aim";break;case"onEQPBOTClick":n.state="Choosing an empty square";break;case"ChooseSPY":n.state="Moving a spy";break;case"onEQPSATClick":n.state="Choosing an opponent satellite";break;case"onAIMXCG":n.state="Exchanging cards";break;case"onCARNAVAL":n.state="Choosing a direction and a line for CARNAVAL";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_darkagent=darkagent,detectivepoker={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/128.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_detectivepoker=detectivepoker,deus={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/129.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_deus=deus,diablo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/130.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectOriginFirstTurn":n.state="Moving a checker";break;case"selectDestinationFirstTurn":n.state="Selecting initial destination";break;case"selectOriginMoveA":n.state="Selecting a stack for move A";break;case"selectDestinationMoveA":n.state="Selecting a destination for move A";break;case"selectOriginMoveB":n.state="Selecting a stack for move B";break;case"selectDestinationMoveB":n.state="Selecting a destination for move B";break;case"removeCheckerMoveA":n.state="Removing a checker (move A)";break;case"removeCheckerMoveB":n.state="Removing a checker (move B)";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_diablo=diablo,diams={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/131.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerDraw":n.state="Drawing a card";break;case"playerHandSelection":n.state="Selecting diamonds to market or secure";break;case"playerMarketSelection":n.state="Selecting diamonds to get from the market";break;case"playerDiscardToMarket":n.state="Discarding to the market";break;case"playerChooseCardPower":n.state="Using a card power";break;case"playerCompulsorySale":n.state="Choosing a diamond to sell";break;case"playerSecurExpress":n.state="Choosing diamonds to secure";break;case"playerSafeDrilling":n.state="Choosing a diamond quality to drill";break;case"playerSleightOfHand":n.state="Stealing a diamond from the market";break;case"playerSelectCardForDriller":n.state="Selecting a diamond to give from their safe";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_diams=diams,diceathlon={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/132.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerRollTurn":case"mplayerRollTurn":n.state="Rolling the dice";break;case"playerGADTurn":case"mplayerGADTurn":n.state="Selecting a die";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_diceathlon=diceathlon,dicedtomatoes={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/133.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_dicedtomatoes=dicedtomatoes,diceforge={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/134.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"beginPlayerTurn":n.state="Rolling the dice";break;case"ressourceChoice":case"doeRessourceChoice":case"exploitRessource":case"misfortuneChoice":n.state="Choosing resources for their side";break;case"reinforcement":n.state="Activating reinforcement cards";break;case"playerAction":n.state="Choosing an action";break;case"secondAction":n.state="Taking another action";break;case"playerOustingChoice":n.state="Choosing resources due to ousting";break;case"exploitEffect":n.state="Playing exploit effects";break;case"forgeShip":case"doeForgeShip":case"oustedForgeShip":case"exploitForgeShip":n.state="Forging a side";break;case"exploitForgeBoar":n.state="Forging a boar side";break;case"draft":n.state="Choosing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_diceforge=diceforge,dicehospital={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/135.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"special2Players":n.state="Choosing an additional department tile or specialist card";break;case"setupDiceChoice":n.state="Choosing values of starting dice";break;case"administratorChoice":n.state="Choosing an administrator";break;case"patientIntakePlaceDice":n.state="Placing dice on ambulances";break;case"patientIntakeChooseAmbulance":n.state="Choosing an ambulance";break;case"patientIntakeMortuary":n.state="Choosing dice to send to the mortuary";break;case"hospitalImprovement":n.state="Improving their hospital";break;case"hospitalActivation":n.state="Activating a nurse or specialist";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_dicehospital=dicehospital,dicehospitaler={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/136.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"otherPlayersTurn":n.state="Playing dice";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_dicehospitaler=dicehospitaler,dicesummoners={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/137.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_dicesummoners=dicesummoners,dicethemepark={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/138.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"InitialSetup":n.state="Setting up game";break;case"InitialAttraction":n.state="Selecting attraction tiles";break;case"Plan":n.state="Playing Staff cards";break;case"Welcome":n.state="Selecting Monorail card";break;case"WelcomeConcierge":n.state="Using Concierge ability";break;case"Expand":n.state="Expanding park";break;case"SetDiceValue":n.state="Setting guest dice value";break;case"DrawGuestDice":n.state="Drawing guest dice";break;case"BuildFreeAttraction":n.state="Building free attraction";break;case"RecruitMascot":n.state="Recruiting a mascot";break;case"Improve":n.state="Improving park";break;case"Operate":n.state="Operating park";break;case"TicketAgent":n.state="Using Ticket Agent ability";break;case"PlanAdmin":n.state="Reducing Staff card value";break;case"UpkeepAdmin":n.state="Swapping cards";break;case"WelcomeAdmin":n.state="Selecting Monorail die";break;case"AdministratorTicketAgent":n.state="Using Admin Ticket Agent ability";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_dicethemepark=dicethemepark,dingosdreams={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/139.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"setupDream":n.state="Starting new dream";break;case"dream":n.state="Sliding extra tile into dreamscape";break;case"summarizeDream":n.state="Ending the dream";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_dingosdreams=dingosdreams,dinnerinparis={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/140.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_dinnerinparis=dinnerinparis,dinosaurteaparty={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/141.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Asking about a trait or guessing a dinosaur";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_dinosaurteaparty=dinosaurteaparty,djambi={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/142.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_djambi=djambi,dobble={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/143.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"getReady":n.state="Getting ready";break;case"playerTurn":n.state="Finding their common symbol";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_dobble=dobble,dodo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/144.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectChecker":case"selectDestination":n.state="Moving a checker";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_dodo=dodo,dontgointhere={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/145.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_dontgointhere=dontgointhere,dotsandboxes={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/146.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Drawing a box side";break;case"pieSetupBlue":case"pieSetupRed":n.state="Drawing a box side or ending the setup phase";break;case"pieRule":n.state="Deciding whether to swap the colours or not";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_dotsandboxes=dotsandboxes,downforce={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/147.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"auctionTurn":case"playerTurn":n.state="Playing a card";break;case"prepareRace":n.state="Keeping a power";break;case"moveCar":n.state="Moving a car";break;case"chooseJokerColor":n.state="Choosing the color of the next car to move";break;case"betTurn":n.state="Placing a bet on a car";break;case"chooseColorToRemove":n.state="Choosing a color to remove from a card";break;case"chooseMovementsOrder":n.state="Inverting the movements order of the card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_downforce=downforce,draftcider={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/148.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_draftcider=draftcider,draftosaurus={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/149.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeDinos":n.state="Placing a dinosaur";break;case"discardDinos":n.state="Discarding a dinosaur";break;case"quarantinePlace":n.state="Placing a dinosaur from the quarantine zone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_draftosaurus=draftosaurus,dragonbridge={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/150.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_dragonbridge=dragonbridge,dragoncastle={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/151.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_dragoncastle=dragoncastle,dragonheart={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/152.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a set of cards";break;case"knightChoice":n.state="Choosing between Trolls and Sorceresses";break;case"sorceressChoice":n.state="Choosing between Treasure Chests and Petrified Dragons";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_dragonheart=dragonheart,dragonkeeper={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/153.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_dragonkeeper=dragonkeeper,dragonline={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/154.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_dragonline=dragonline,dragonwood={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/155.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking a turn";break;case"sunnyDay":case"sunnyDayEnd":n.state="Sunny day! Drawing cards";break;case"thunderStorm":n.state="Thunderstorm! Discarding cards";break;case"windStorm":n.state="Wind storm! Passing cards";break;case"quicksand":case"quicksandEnd":n.state="Quicksand! Replacing cards";break;case"discardAdventurer":case"discardAdventurerMP":n.state="Discarding Adventurers";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_dragonwood=dragonwood,dronesvsseagulls={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/156.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_dronesvsseagulls=dronesvsseagulls,dudo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/157.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"firstPlayerTurn":n.state="Bidding";break;case"playerTurn":n.state="Bidding or calling dudo";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_dudo=dudo,dungeonpetz={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/158.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Going shopping";break;case"playerTurnGroup":n.state="Going shopping in groups";break;case"playerTurnNeeds":n.state="Dealing with pets needs";break;case"playerTurnEvaluate":n.state="Caring for pets and showing off";break;case"playerTurnBusiness":n.state="Selling pets";break;case"playerTurnJobs":n.state="Assigning jobs to imps";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},D_dungeonpetz=dungeonpetz,dungeonroll={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/159.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_dungeonroll=dungeonroll,dungeontwister={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/160.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},D_dungeontwister=dungeontwister,earth={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/161.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},E_earth=earth,egocentricworld={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/162.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"drawCard":case"pickCard":n.state="Playing a card";break;case"exchangeCards":case"firstPlayerAnswerExchange":case"secondPlayerAnswerExchange":case"exchangeCardsOnePlayer":case"exchangeCardsFirstPlayer":case"exchangeCardsSecondPlayer":n.state="Exchanging cards";break;case"seeCards":case"playerSee":n.state="Looking at another player's cards";break;case"playerAnswer":n.state="Validating or cancelling an effect";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},E_egocentricworld=egocentricworld,eightmastersrevenge={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/163.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectFighter":n.state="Selecting a master";break;case"playerTurn":n.state="Taking an action";break;case"drawExtraCardForLater":n.state="Drawing a card for later";break;case"opponentDefend":n.state="Defending against an attack";break;case"opponentCounter":n.state="Countering an attack";break;case"opponentBlock":n.state="Blocking an attack";break;case"slideToken":n.state="Choosing a damage token";break;case"furyChooseWoundOverDamage":case"woundCardEffect":n.state="Placing damage on a card";break;case"furyChooseEffect":n.state="Applying an effect";break;case"slideCardEffect":case"slideFuryCardEffect":n.state="Sliding cards";break;case"trapCardEffect":n.state="Placing a trap";break;case"empowerCardEffect":n.state="Empowering a card";break;case"removeCardEffect":n.state="Removing an effect";break;case"switchCardEffect":n.state="Switching card effects";break;case"drawCardEffect":n.state="Drawing a card";break;case"copyCardEffect":n.state="Copying a card effect";break;case"putCrowTokenFuryCardEffect":n.state="Placing a crow token";break;case"revealFuryCardEffect":n.state="Revealing a card";break;case"putCardInHandFury":n.state="Removing cards from hand";break;case"masterDefeated":case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},E_eightmastersrevenge=eightmastersrevenge,ekonos={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/164.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playCard":n.state="Playing a card";break;case"growCompany":n.state="Managing company expansion";break;case"sellBuy":n.state="Deciding whether to sell and/or buy";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},E_ekonos=ekonos,elfenland={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/165.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},E_elfenland=elfenland,elgrande={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/166.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playPowerCards":n.state="Playing a power card";break;case"chooseActionCard":n.state="Choosing an action card";break;case"actionStep0Decide":n.state="Deciding between placing caballeros and action";break;case"actionStep1PlaceCaballeros":case"actionStep2PlaceCaballeros":n.state="Placing caballeros";break;case"actionStep1UseAction":case"actionStep2UseAction":n.state="Using an action";break;case"angryKing":n.state="Removing caballeros";break;case"chooseRegion":n.state="Choosing a secret region";break;case"vetoAsk":n.state="Vetoing against a special action";break;case"vetoSelectMove":n.state="Choosing a move to veto";break;case"refillProvince":n.state="Removing caballeros from regions to the province";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},E_elgrande=elgrande,emdomicrocosm={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/167.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"takeCard":n.state="Taking a card";break;case"chooseAction":n.state="Choosing an action";break;case"boostWarfare":n.state="Attacking the planet";break;case"researchAgain":n.state="Researching";break;case"boostColonize":n.state="Colonizing the planet";break;case"forceDiscard":n.state="Forcing a discard";break;case"takeDiscard":n.state="Swapping a Survey Mission for a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},E_emdomicrocosm=emdomicrocosm,eminentdomain={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/168.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},E_eminentdomain=eminentdomain,epizodiak={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/169.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},E_epizodiak=epizodiak,equinox={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/170.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},E_equinox=equinox,eriantys={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/171.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playAssistant":n.state="Playing an assistant card";break;case"moveStudents":n.state="Moving a student";break;case"moveMona":n.state="Moving Mother Nature";break;case"cloudTileDrafting":n.state="Choosing a Cloud tile";break;case"character1_ability":n.state="Moving a student to an island";break;case"character2_ability":n.state="Resolving an island's effects";break;case"character4_ability":n.state="Placing a No Entry token on an island";break;case"character6_ability":n.state="Replacing students in their school";break;case"character8_ability":case"character11_ability":n.state="Choosing a student color";break;case"character10_ability":n.state="Moving a student to their School Dining Hall";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},E_eriantys=eriantys,escapefromthehiddencastle={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/172.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"setupRoundPlayerTurn":case"newRound":n.state="Choosing a space on the gallery for a guest";break;case"playerTurnRoll":n.state="Rolling the die";break;case"playerTurnMove":case"playerTurnMoveDestination":n.state="Moving a guest";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},E_escapefromthehiddencastle=escapefromthehiddencastle,evl={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/173.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking a turn";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},E_evl=evl,evogamenoname={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/174.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},E_evogamenoname=evogamenoname,explorationwarzone={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/175.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},E_explorationwarzone=explorationwarzone,factum={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/176.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickStoryTeller":n.state="Picking a story teller";break;case"startStory":case"tellStory":n.state="Telling a story";break;case"chooseGuesser":n.state="Choosing a guesser";break;case"addCards":n.state="Adding cards";break;case"guessing":case"confirmGuessing":case"guessingMultiple":case"confirmGuessingMultiple":n.state="Guessing the story";break;case"storyMaster":n.state="Choosing the best story";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_factum=factum,faifo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/177.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"discardOneCard":n.state="Discarding a card";break;case"selectCard":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_faifo=faifo,fairytrails={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/178.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_fairytrails=fairytrails,farmclub={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/179.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"callOnTheBirds":n.state="Calling on the Birds";break;case"hireOrElect":n.state="Hiring or Electing a Leader";break;case"hire":n.state="Hiring an Animal";break;case"hirePlacement":n.state="Placing an Animal";break;case"elect":n.state="Electing a Leader";break;case"reorganiseDecision":case"reorganise":n.state="Reorganising their Farm";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_farmclub=farmclub,feastforodin={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/180.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickAction":case"command-clerk":case"confirmTurn":n.state="Taking an action";break;case"income-placegoods":case"bonus-placegoods":case"gameEnd-placegoods":n.state="Placing goods";break;case"command-personalfeast":case"feast-placegoods":n.state="Placing goods on their feast board";break;case"command-playOccupation":n.state="Playing an occupation";break;case"command-exchange":case"command-hornturner":case"command-hornturner2":case"command-wharfowner":case"command-fineblacksmith":case"command-shipbuilder":case"command-dragonslayer":case"command-privatechef":case"command-cowherd":case"command-bonecollector":case"command-breeder":case"command-shepherdboy":case"command-metalsmith":case"command-hidebuyer":case"command-preacher":case"command-hornblower":case"command-spicemerchant":case"command-meatmerchant":case"command-sower":case"command-flaxbaker":case"command-silkstitcher":case"command-laborer":case"command-meatcurer":case"command-deerstalker":case"command-spicetrader":case"command-sponsor":case"command-hornblower2":case"command-slowpoke":case"command-bosporustraveller":n.state="Making an exchange";break;case"command-forge":n.state="Taking a special tile from the forge";break;case"command-forgebuy":n.state="Buying a special tile from the forge";break;case"command-armedfighter":case"command-mountain":n.state="Taking resources from a mountain strip";break;case"command-trade":n.state="Upgrading green goods";break;case"command-upgrade":case"command-sameupgrade":case"command-nwupgrade":case"command-payupgrade":n.state="Upgrading goods";break;case"command-hunt":case"command-prehunt":n.state="Hunting";break;case"command-hunt-reward2":case"command-hunt-reward":n.state="Picking a hunting reward";break;case"command-emigrate":n.state="Emigrating";break;case"command-swapwhalingboatknarr":n.state="Swapping a whaling boat for a knarr";break;case"command-follower":case"command-clone":n.state="Copying an action";break;case"command-storeman":case"command-disheartenedwarrior":case"command-lancebearer":n.state="Taking a good";break;case"command-meatupgrade":n.state="Upgrading a meat good";break;case"command-inspector":case"command-inspector2":case"command-ironsmith":case"command-snarespecialist":n.state="Returning a viking to the Thing space";break;case"command-fieldfarmer":n.state="Upgrading an orange good";break;case"command-earl":n.state="Buying a stonehouse";break;case"command-flip":n.state="Flipping goods";break;case"command-quartermaster":case"command-longshipbuilder":n.state="Buying a longship";break;case"command-harborguard":case"command-emigratepassable":n.state="Picking a boat to emigrate";break;case"command-beforeorafter-draw":n.state="Choosing when to draw an occupation";break;case"command-beforeorafter-play":n.state="Choosing when to play an occupation";break;case"command-peacemaker":n.state="Taking a resource";break;case"command-swordfighter":case"command-berserker":n.state="Removing an ore for a boost";break;case"command-latecomer":n.state="Using Latecomer";break;case"command-preceptor":n.state="Choosing to draw or play an occupation";break;case"command-oreboatman":n.state="Placing ore on their boards";break;case"command-fishcook":n.state="Placing stockfish on their houses";break;case"command-soberman":n.state="Gaining silver";break;case"command-explore":n.state="Exploring an island";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_feastforodin=feastforodin,fifteendays={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/181.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"play_action":n.state="Taking an action";break;case"draw_hidden_cards":n.state="Drawing hidden cards";break;case"take_faceup_cards":n.state="Taking displayed cards";break;case"discard_exceeding_cards":n.state="Discarding cards";break;case"refill_column":n.state="Refilling a column";break;case"place_cards":n.state="Placing cards";break;case"pay_cards":n.state="Paying cards";break;case"take_wildcard":n.state="Taking a wildcard";break;case"place_wildcard":n.state="Placing a wildcard";break;case"game_end_bonus":n.state="Placing a wildcard (game end bonus)";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_fifteendays=fifteendays,fightthelandlord={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/182.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"bidTurn":n.state="Bidding for the landlord";break;case"discardPhase":n.state="Discarding cards";break;case"playerTurn":n.state="Playing combination of cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_fightthelandlord=fightthelandlord,finity={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/183.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},F_finity=finity,fistfulofgold={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/184.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"multiDiscardCards":n.state="Discarding cards";break;case"multiPlayerTurn":n.state="Playing a card";break;case"playerReclaimDiscardedCard":n.state="Returning a discarded card to hand";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_fistfulofgold=fistfulofgold,flamingpyramids={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/185.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"playerFall":n.state="Playing a tile";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_flamingpyramids=flamingpyramids,fleet={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/186.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"auction":n.state="Bidding on a license";break;case"launch":n.state="Launching a boat";break;case"hire":n.state="Hiring a captain";break;case"processing":n.state="Processing fish";break;case"draw":n.state="Drawing a card";break;case"launchHire":n.state="Launching a boat and/or hiring a captain";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_fleet=fleet,florenzacardgame={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/187.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},F_florenzacardgame=florenzacardgame,flume={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/188.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},F_flume=flume,fluxx={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/189.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playCard":n.state="Playing a card";break;case"enforceHandLimitForOthers":case"enforceHandLimitForSelf":n.state="Discarding cards";break;case"enforceKeepersLimitForOthers":case"enforceKeepersLimitForSelf":n.state="Discarding keepers";break;case"goalCleaning":n.state="Discarding a goal";break;case"actionResolve":n.state="Resolving an action";break;case"playRockPaperScissors":n.state="Playing Rock-Paper-Scissors";break;case"freeRuleResolve":n.state="Resolving a free rule";break;case"creeperResolveTurnStart":case"creeperResolveInPlay":n.state="Resolving a creeper";break;case"tempHandPlay":n.state="Playing a card from your hand";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_fluxx=fluxx,forbiddenisland={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/190.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"drawTreasure":n.state="Drawing treasure cards";break;case"discardTreasure":n.state="Discarding treasure cards";break;case"setFlood":case"drawFlood":n.state="Drawing flood cards";break;case"rescuePawn":n.state="Rescuing their pawn";break;case"bonusShoreup":n.state="Taking bonus shore up action";break;case"sandbags":n.state="Playing sandbags";break;case"heli_lift":n.state="Playing helicopter lift";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_forbiddenisland=forbiddenisland,forex={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/191.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerAction":n.state="Taking an action";break;case"strengthenCurrency":n.state="Strengthening a currency";break;case"offerResponse":n.state="Responding to an offer";break;case"nextDivest":n.state="Selling certificates";break;case"strongestCurrency":n.state="Choosing currency for final scoring";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_forex=forex,forsale={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/192.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerBidPass":n.state="Bidding";break;case"playerSell":n.state="Selling a property";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_forsale=forsale,fortheking={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/193.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"DistributeCards":n.state="Distributing cards";break;case"ChooseCentralCards":n.state="Choosing a central card";break;case"ModifyDuties":n.state="Modifying duties";break;case"GainEsteem":n.state="Gaining esteem";break;case"PayCard":n.state="Paying for a card";break;case"SelectNoble":n.state="Selecting a noble";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_fortheking=fortheking,fourcolorcards={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/194.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},F_fourcolorcards=fourcolorcards,fractal={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/195.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeTile":n.state="Placing a tile";break;case"firstMoveChoice":n.state="Choosing to switch colors";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_fractal=fractal,frenchtarot={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/196.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},F_frenchtarot=frenchtarot,fruitpicking={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/197.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"plantTurn":n.state="Planting seeds";break;case"farmTurn":n.state="Taking an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},F_fruitpicking=fruitpicking,gaia={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/198.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},G_gaia=gaia,gaiaproject={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/199.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"stateSetupRotate":n.state="Rotating map tiles";break;case"stateSetupChooseRace":n.state="Choosing a faction";break;case"stateSetupPlaceMine":n.state="Placing a mine";break;case"stateSetupPlacePI":n.state="Placing a planetary institute";break;case"stateSetupChooseBooster":n.state="Choosing a booster tile";break;case"stateSetupChooseAutoma":n.state="Making automa selections";break;case"statePlayerTurn":n.state="Taking an action";break;case"stateConvert":n.state="Performing conversions";break;case"stateGainTech":n.state="Gaining a technology";break;case"stateResearchAdv":case"stateGaiaRace14":n.state="Researching";break;case"statePlaceLost":n.state="Placing the lost planet";break;case"stateChargePwr":n.state="Charging power";break;case"stateIncomeChoice":n.state="Collecting income";break;case"stateGaiaRace1":n.state="Converting Gaia power";break;case"stateSetupBanRace":n.state="Banning a faction";break;case"stateSetupAddDraft":n.state="Choosing a faction to add to the draft pool";break;case"stateSetupDraft":n.state="Bidding on factions";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_gaiaproject=gaiaproject,gangofdice={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/200.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseDice":n.state="Choosing number of dice";break;case"rollDice":n.state="Rolling dice";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_gangofdice=gangofdice,gangsta={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/201.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerMobilize":n.state="Mobilizing gangsters";break;case"playerAction":n.state="Performing an action";break;case"discard":n.state="Discarding a card";break;case"snitch":n.state="Dealing with the snitch";break;case"rewardRecruit":n.state="Recruiting a gangster";break;case"rewardSteal":n.state="Stealing from a rival gang";break;case"rewardTap":n.state="Using rival gangsters";break;case"markForKill":n.state="Marking a rival gang for assassination";break;case"rewardSkill":n.state="Teaching a skill to a gangster";break;case"rewardKill":n.state="Choosing a gangster to kill";break;case"gdgMulti":n.state="Choosing a gangster";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_gangsta=gangsta,gardennation={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/202.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseSecretMissions":n.state="Choosing secret missions";break;case"chooseAction":n.state="Choosing an action";break;case"constructBuilding":n.state="Constructing a building";break;case"chooseTypeOfLand":n.state="Choosing a type of land";break;case"chooseCompletedCommonProject":n.state="Choosing a common project to complete";break;case"abandonBuilding":n.state="Abandoning a building";break;case"usePloyToken":n.state="Using a ploy token";break;case"strategicMovement":n.state="Choosing a territory for the Torticrane";break;case"chooseRoofToTransfer":n.state="Transferring a roof";break;case"chooseRoofDestination":n.state="Choosing a building for the roof";break;case"buildingInvasion":n.state="Invading a building";break;case"chooseNextPlayer":n.state="Choosing the next player";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_gardennation=gardennation,gearnpiston={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/203.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseAction":n.state="Placing a token";break;case"discardPart":n.state="Discarding a blueprint";break;case"chooseBackAlleyAction":n.state="Choosing a Back Alley action";break;case"pickBlackMarketPart":n.state="Picking a New Part tile from the Black Market";break;case"topOrBottom":n.state="Putting New Part tiles back on the New Part stack";break;case"choosePlayer":n.state="Taking a Blueprint from another player";break;case"pickPlayerPart":n.state="Picking a Blueprint";break;case"chooseToken":case"tokenDestination":n.state="Moving a token";break;case"pickNewPart":n.state="Picking a New Part tile";break;case"workshop":n.state="Performing actions at the workshop";break;case"assembling":n.state="Assembling their automobile";break;case"scrap":n.state="Adding Scrap Part tiles";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_gearnpiston=gearnpiston,geekoutmasters={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/204.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"gameOverAreYouSure":case"gameOverConfirmation":n.state="Confirming end of game";break;case"state_200":case"state_500":n.state="Rolling dice";break;case"state_210":n.state="Picking die to use";break;case"state_310":n.state="Picking die to flip";break;case"state_320":n.state="Picking die to reroll";break;case"state_330":n.state="Picking die to destroy";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_geekoutmasters=geekoutmasters,getonboard={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/205.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeDeparturePawn":n.state="Placing departure pawn";break;case"placeRoute":n.state="Placing route";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_getonboard=getonboard,getthemacguffin={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/206.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"seeSecretCards":n.state="Looking at secret cards";break;case"specifyClockwise":n.state="Choosing a hand to receive";break;case"specifyObjectToTake":n.state="Taking an object";break;case"specifyObjectsToSwap":n.state="Swapping objects between players";break;case"mandatoryCard":n.state="Playing a stolen card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_getthemacguffin=getthemacguffin,ghostathome={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/207.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},G_ghostathome=ghostathome,giftoftulips={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/208.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},G_giftoftulips=giftoftulips,ginkgopolis={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/209.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},G_ginkgopolis=ginkgopolis,gizmos={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/210.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"cardSelected":case"researchedCardSelected":n.state="Building/Filing a Gizmo";break;case"triggerSphereSelect":case"triggerSelect":case"triggerDraw":n.state="Triggering an action";break;case"research":n.state="Building/Filing a researched Gizmo";break;case"deckSelected":case"triggerResearch":n.state="Researching a Gizmo";break;case"buildLevel1For0":n.state="Building a Gizmo for free";break;case"triggerFile":n.state="Filing a Gizmo";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_gizmos=gizmos,glow={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/211.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseAdventurer":n.state="Choosing an adventurer";break;case"chooseTomDice":n.state="Choosing Tom dice";break;case"recruitCompanion":n.state="Recruiting a companion";break;case"removeCompanion":n.state="Removing a companion";break;case"selectSketalDie":case"selectSketalDieMulti":n.state="Selecting a sketal die";break;case"moveBlackDie":n.state="Moving the black die";break;case"rollDice":n.state="Rolling dice";break;case"resurrect":n.state="Resurrecting a companion";break;case"resolveCards":n.state="Resolving their cards";break;case"move":n.state="Moving their company";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_glow=glow,gofish={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/212.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"askCard":n.state="Asking for a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_gofish=gofish,gogoa={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/213.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"multiChoosePlans":n.state="Choosing tour plans";break;case"startingPlayer":n.state="Choosing a die for direction";break;case"multiTurn":n.state="Taking a turn";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_gogoa=gogoa,goldwest={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/214.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},G_goldwest=goldwest,gomoku={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/215.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"confirmMove":n.state="Playing a stone";break;case"playerTurnOrSwap":case"swap2SecondTurn":case"swap2SecondTurnOneStone":n.state="Swapping colors or playing a stone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_gomoku=gomoku,gonutsfordonuts={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/216.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeBids":n.state="Bidding for a donut";break;case"actionRaspberryFrosted":n.state="Discarding a donut";break;case"actionBearClaw":n.state="Stealing a donut";break;case"actionStrawberryGlazed":n.state="Discarding another player's donut";break;case"actionFrenchCruller":n.state="Discarding donuts";break;case"actionCinnamonTwist":n.state="Passing a donut to the next player";break;case"actionSprinkled":case"actionSprinkledSelectPlayer":n.state="Giving a donut to another player";break;case"actionDoubleChocolate":n.state="Selecting a donut to keep";break;case"actionRedVelvet":case"actionDayOldDonuts":n.state="Selecting donuts from the discard pile";break;case"myGameEnd":case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_gonutsfordonuts=gonutsfordonuts,goodcopbadcop={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/217.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"chooseCardToInvestigate":n.state="Investigating an Integrity Card";break;case"askInvestigateReaction":n.state="Reacting to an Investigate action";break;case"chooseCardToRevealForArm":case"chooseCardToRevealForEquip":n.state="Revealing an Integrity Card";break;case"askShootReaction":n.state="Reacting to a Shoot or Bite action";break;case"discardOutOfTurn":case"discardEquipment":n.state="Discarding Equipment";break;case"chooseEquipmentToPlayOnYourTurn":case"chooseEquipmentToPlayReactEndOfTurn":case"chooseEquipmentToPlayReactInvestigate":case"chooseEquipmentToPlayReactShoot":case"chooseEquipmentToPlayReactBite":n.state="Playing Equipment";break;case"askAimMustReaim":case"askAim":case"aimAtPlayer":n.state="Choosing a new target";break;case"askEndTurnReaction":n.state="Reacting to the end of a turn";break;case"chooseEquipmentTargetOutOfTurn":case"afterAimedOutOfTurn":case"afterDiscardedOutOfTurn":n.state="Choosing an Equipment target";break;case"askAimOutOfTurn":n.state="Aiming a gun";break;case"chooseIntegrityCards":case"choosePlayer":n.state="Targeting an Integrity Card with Equipment";break;case"chooseActiveOrHandEquipmentCard":n.state="Giving Equipment to another player";break;case"chooseAnotherPlayer":case"choosePlayerNoCancel":n.state="Targeting a player with Equipment";break;case"rollInfectionDie":n.state="Rolling the Infection Die";break;case"askBiteReaction":n.state="Reacting to a Bite action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_goodcopbadcop=goodcopbadcop,gopher={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/218.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Placing a checker";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_gopher=gopher,gorami={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/219.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a disc";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_gorami=gorami,grandbazaar={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/220.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"tradeJewels":n.state="Trading jewels";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_grandbazaar=grandbazaar,greatwesterntrail={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/221.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"firstPhaseA":n.state="Selecting trail start";break;case"phaseA":case"move":n.state="Moving";break;case"phaseB":n.state="Playing actions";break;case"phaseC":n.state="Drawing cards";break;case"bidOrder":n.state="Bidding for turn order";break;case"kansas1":n.state="Placing a Foresight 1 tile on the board";break;case"kansas2":n.state="Placing a Foresight 2 tile on the board";break;case"kansas3":n.state="Placing a Foresight 3 tile on the board";break;case"kansas4":n.state="Adding certificates to increase the breeding value";break;case"kansas5":n.state="Selecting a delivery city";break;case"kansasEnd":n.state="Ending their turn";break;case"cowMarket":n.state="Buying from the cattle market";break;case"build":n.state="Building a building";break;case"hire":n.state="Hiring a worker";break;case"pickObjective":n.state="Picking an objective";break;case"discard":n.state="Discarding cards";break;case"cogs":n.state="Playing an auxiliary action";break;case"upgradeStation":n.state="Upgrading a station";break;case"train":n.state="Moving a train";break;case"stationMaster":n.state="Assigning a station master";break;case"hazardTeepee":n.state="Choosing a hazard or teepee";break;case"hazard":n.state="Choosing a hazard";break;case"teepee":n.state="Choosing a teepee";break;case"branchlet":n.state="Placing a branchlet";break;case"remove":n.state="Removing cards from their hand";break;case"cowThreeOrFiveCoins":n.state="Gaining a reward";break;case"newyorkcity":n.state="Choosing a station master from New York City";break;case"kansasSimmental":n.state="Growing Simmental cards";break;case"extraAction":n.state="Performing an extra action";break;case"selectObjectives":n.state="Selecting objectives";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_greatwesterntrail=greatwesterntrail,grosstarock={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/222.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},G_grosstarock=grosstarock,guildes={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/223.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},G_guildes=guildes,guile={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/224.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"SelectFaction":n.state="Selecting a faction";break;case"DraftCard":n.state="Drafting a card";break;case"ReceiveCards":n.state="Receiving cards";break;case"PlaceCard":n.state="Placing influence cards";break;case"PlayerTurn":n.state="Revealing or swapping cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_guile=guile,gyges={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/225.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"initialPlace":n.state="Organizing initial position";break;case"choosePiece":case"chooseMove":n.state="Moving a piece";break;case"chooseReplace":n.state="Moving a piece to a free space";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},G_gyges=gyges,hacktrick={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/226.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"gameOverAreYouSure":case"gameOverConfirmation":n.state="Confirming game results";break;case"state_100":n.state="Choosing a first card";break;case"state_110":case"state_111":case"state_113":case"state_112":case"state_114":n.state="Taking their turn";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_hacktrick=hacktrick,hadara={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/227.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},H_hadara=hadara,hadron={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/228.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectSquare":n.state="Selecting a square";break;case"firstMoveChoice":n.state="Choosing first move";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_hadron=hadron,haggis={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/229.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"bidTurn":n.state="Bidding for the declarer";break;case"discardCards":n.state="Discarding cards";break;case"playComboOpen":case"playCombo":n.state="Playing a combination";break;case"giveCards":n.state="Giving captured cards to a player";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_haggis=haggis,haiclue={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/230.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"makeClues":n.state="Making a clue";break;case"guess":case"guessTurbo":n.state="Guessing";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_haiclue=haiclue,hanabi={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/231.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Selecting a clue or a card";break;case"color_clue":n.state="Giving a color clue to another player";break;case"value_clue":n.state="Giving a value clue to another player";break;case"discard_pick":n.state="Moving a discarded card back into the deck";break;case"discard_play":n.state="Playing a discarded card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_hanabi=hanabi,hanamikoji={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/232.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},H_hanamikoji=hanamikoji,handandfoot={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/233.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},H_handandfoot=handandfoot,happycity={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/234.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"discardCard":n.state="Discarding a building";break;case"drawCard":n.state="Drawing a building";break;case"playerTurn":n.state="Buying a structure or taking a coin";break;case"specialCard":n.state="Taking a special building";break;case"marketDraft":n.state="Drafting a market";break;case"endGameChoice":n.state="Choosing a card to copy";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_happycity=happycity,hardback={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/235.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},H_hardback=hardback,hawaii={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/236.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},H_hawaii=hawaii,hearts={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/237.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"giveCards":n.state="Giving cards";break;case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_hearts=hearts,heckinhounds={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/238.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseBadDog":n.state="Choosing a bad dog";break;case"giveClue":n.state="Giving a clue";break;case"assignCerberus":n.state="Assigning Cerberus";break;case"replaceIntoCerberus":n.state="Replacing a card with Cerberus";break;case"deadHandTrade":n.state="Trading a card with the dead hand";break;case"promiseShifts":n.state="Promising shifts to work";break;case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_heckinhounds=heckinhounds,herd={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/239.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeStoneFirstTurn":case"placeStone":n.state="Placing a stone";break;case"removeStone":n.state="Removing an enemy stone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_herd=herd,heroesofhellas={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/240.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"firstTurnChoice":n.state="Placing a hero disc on a monster";break;case"playerTurn":n.state="Doing an action";break;case"drawCard":n.state="Drawing cards";break;case"givenDiscard":n.state="Discarding cards";break;case"replaceCardOracle":case"consultOracle":n.state="Using the Oracle";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_heroesofhellas=heroesofhellas,herooj={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/241.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Moving a piece";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_herooj=herooj,herrlof={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/242.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"bidding":n.state="Bidding";break;case"playCard":n.state="Playing a card";break;case"threeOptOut":case"resolveThree":n.state="Using the 3 special abilities";break;case"chooseOneTarget":case"chooseSixTarget":n.state="Choosing a target to steal a trick from";break;case"chooseSixReturn":n.state="Choosing a card to return to the a player";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_herrlof=herrlof,hex={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/243.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"playerTurnNoPass":n.state="Placing a piece";break;case"playerTurnOrSwap":n.state="Deciding whether to swap";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_hex=hex,hive={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/244.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"playerTurnNoDraw":n.state="Placing a piece on the table";break;case"offeringDraw":n.state="Deciding whether to accept a draw";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_hive=hive,hoarders={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/245.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"choosingCards":n.state="Choosing cards";break;case"playingCards":n.state="Playing a card";break;case"chooseNutCard":n.state="Stealing a card";break;case"defendOrAllow":n.state="Defending or allowing theft";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_hoarders=hoarders,hokito={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/246.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},H_hokito=hokito,homesteaders={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/247.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},H_homesteaders=homesteaders,homeworlds={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/248.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"want_creation":n.state="Choosing a homestar from the bank";break;case"want_free":case"want_sacrifice_action":n.state="Activating or sacrificing a ship";break;case"want_catastrophe":n.state="Triggering a catastrophe";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_homeworlds=homeworlds,hoola={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/249.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"claimDrawStop":n.state="Taking an action";break;case"interceptTurn":n.state="Playing a meld using the claimed discard";break;case"playerTurn":n.state="Playing a meld or adding cards";break;case"jokerReplaceSelect":n.state="Substituting a card";break;case"addSelect":n.state="Adding cards to a location";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_hoola=hoola,hungariantarokk={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/250.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},H_hungariantarokk=hungariantarokk,hydroracers={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/251.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Betting or playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_hydroracers=hydroracers,hypnosia={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/252.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerSelectTurn":n.state="Selecting a pawn";break;case"playerMoveTurn":n.state="Moving a pawn";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},H_hypnosia=hypnosia,iceandthesky={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/253.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_iceandthesky=iceandthesky,icebreaker={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/254.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectChecker":case"selectDestination":n.state="Moving a checker";break;case"firstMoveChoice":n.state="Choosing whether to switch colors";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_icebreaker=icebreaker,icecoldicehockey={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/255.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurnCI":case"playerTurnDZ":case"playerTurnOZ":n.state="Taking an action";break;case"playerDefense":n.state="Playing a defense card";break;case"playerMomentum":n.state="Drawing an extra card";break;case"playerTouchUp":n.state="Touching up with the goalie";break;case"playerMayDiscard":case"playerMustDiscard":case"playerMustDiscardGoalie":n.state="Discarding a card";break;case"playerTakeShot":n.state="Taking a shot";break;case"prepareForPowerPlay":n.state="Preparing for a power play";break;case"pullDecision":n.state="Pulling the goalie";break;case"putBackDecision":n.state="Putting back the goalie";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_icecoldicehockey=icecoldicehockey,illustori={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/256.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"firstPlayerTurn":n.state="Calling the name of the first artwork";break;case"playerTurn":n.state="Playing a card";break;case"discussion":n.state="Discussing the artwork name and voting";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_illustori=illustori,imhotep={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/257.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickAction":n.state="Playing an action";break;case"loadShip":n.state="Placing a stone on a ship";break;case"sailShip":n.state="Sailing a ship";break;case"sailLoadedShip":n.state="Sailing a loaded ship";break;case"unloadShip":n.state="Unloading a ship";break;case"pickMarketCard":case"choseBetweenMarketCards":n.state="Picking a card from the market";break;case"pickPyramidB":n.state="Picking a pyramid to unload the stone";break;case"pickTempleBBonus":n.state="Picking a bonus";break;case"assessTemple":n.state="Assessing the temple";break;case"pickPyramidBViaEntranceCard":n.state="Picking a pyramid to place the stone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_imhotep=imhotep,impasse={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/258.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectOrigin":n.state="Selecting the origin stack";break;case"selectDestination":n.state="Selecting a destination";break;case"selectCrown":n.state="Selecting a crown";break;case"removeImpasseChecker":n.state="Removing an impasse checker";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_impasse=impasse,imtheboss={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/259.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"SelectStartSpace":n.state="Selecting the start space";break;case"playerTurn":case"playerTurn2":n.state="Taking an action";break;case"Deal":n.state="Making a deal";break;case"Negotiation":n.state="Negotiating a deal";break;case"DiscardCards":n.state="Discarding cards";break;case"RollingDie":n.state="Rolling the die to determine if the game is over";break;case"DecideOffer":n.state="Deciding whether to accept or reject an offer";break;case"StopBoss":n.state="Deciding whether to stop the boss card";break;case"StopTrip":n.state="Deciding whether to stop the travel card";break;case"StopRecruitment":n.state="Deciding whether to stop the recruitment card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_imtheboss=imtheboss,incangold={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/260.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"vote":n.state="Voting to continue exploring or to return to camp";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_incangold=incangold,innovation={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/261.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"turn0":n.state="Choosing a card to meld";break;case"playerTurn":n.state="Taking an action";break;case"dogmaEffect":case"interDogmaEffect":case"playerInvolvedTurn":case"interPlayerInvolvedTurn":case"interactionStep":case"interInteractionStep":case"preSelectionMove":case"interSelectionMove":n.state="Resolving a dogma effect";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_innovation=innovation,insert={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/262.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Placing a ring";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_insert=insert,intheyearofthedragon={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/263.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},I_intheyearofthedragon=intheyearofthedragon,inventors={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/264.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Sending an inventor to work";break;case"knownledge":n.state="Placing knowledge cubes";break;case"chooseReward":n.state="Choosing a reward";break;case"lastTurn":n.state="Using final tokens";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_inventors=inventors,isaac={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/265.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Placing a piece";break;case"playerTurnRemove":n.state="Removing a piece";break;case"playerScoreMarker":n.state="Placing a score marker";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_isaac=isaac,itsawonderfulworld={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/266.png",async getData(e){const a=await getCurrentGameState(e),t=await getCurrentGameStateType(e),r=await getActivePlayerId(e),s=await getUserPlayerId(e),i=await getPlayerData(e,r),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(r===s||"activeplayer"!==t)switch(a){case"stateDraft":n.state="Drafting a card";break;case"statePlanning":n.state="Using cards";break;case"statePlanDiscard":n.state="Choosing a card to keep";break;case"stateProductionBonus":n.state="Choosing a supremacy bonus";break;case"stateProduction":n.state="Placing a production cube";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_itsawonderfulworld=itsawonderfulworld,iwari={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/267.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerActions":case"dummyActions":n.state="Taking an action";break;case"drawCards":n.state="Drawing cards";break;case"offerFeat":n.state="Placing a feat";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},I_iwari=iwari,jaipur={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/268.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTakeOrSell":n.state="Taking or selling cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},J_jaipur=jaipur,jekyllvshide={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/269.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseSwapCards":n.state="Swapping cards";break;case"playerTurn":n.state="Playing a card";break;case"choosePotionColor":n.state="Choosing a potion color";break;case"chooseSwapCardsGreenPotion":n.state="Choosing cards to exchange";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},J_jekyllvshide=jekyllvshide,jumpdrive={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/270.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"stateSetupDiscard":case"stateDiscardExplore":case"stateDiscardDown":n.state="Discarding cards";break;case"stateTurn":n.state="Selecting actions";break;case"stateSecondSettle":n.state="Placing a second world";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},J_jumpdrive=jumpdrive,jumpgate={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/271.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"playerTurn2":n.state="Taking an action";break;case"markResource":n.state="Marking a resource on their current planet";break;case"harvestResource":n.state="Harvesting a resource on their current planet";break;case"allClaimMarkedResources":n.state="Taking a marked resource";break;case"claimResource":n.state="Claiming a resource on their current planet";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},J_jumpgate=jumpgate,justdesserts={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/272.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"serveSecondGuest":n.state="Serving guests";break;case"playerDiscardGuest":n.state="Discarding guests";break;case"allPlayersDiscardGuest":n.state="Discarding a satisfied guest";break;case"poachingReaction":n.state="Blocking a poaching attempt";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},J_justdesserts=justdesserts,justone={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/273.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"clueGiving":n.state="Giving a clue";break;case"clueCheck":n.state="Checking clues";break;case"guess":n.state="Guessing the mystery word";break;case"guessCheck":n.state="Checking the guess";break;case"discussRound":n.state="Deciding to proceed";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},J_justone=justone,k2={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/274.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},K_k2=k2,kabaleo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/275.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a piece";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_kabaleo=kabaleo,kahuna={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/276.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_kahuna=kahuna,kalah={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/277.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerFirstTurn":case"playerTurn":n.state="Selecting a hole";break;case"selectSideOfBoard":n.state="Selecting a side of the board";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_kalah=kalah,kami={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/278.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},K_kami=kami,keyflower={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/279.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"locationSelected":n.state="Placing workers";break;case"productionChoice":case"productionCost":n.state="Producing goods";break;case"villageTransportB":case"villageTransportA":n.state="Transporting resources";break;case"villageUpgrade":case"villageUpgradeChoice":n.state="Upgrading a tile";break;case"boatSelection":n.state="Selecting a boat";break;case"villageConstructionA":n.state="Placing new tiles in villages";break;case"winterSelection":n.state="Selecting winter tiles";break;case"scoringSelect":case"scoringDestination":n.state="Scoring tiles";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_keyflower=keyflower,khronos={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/280.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},K_khronos=khronos,kingdombuilder={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/281.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerBuild":n.state="Building";break;case"playerUseTile":n.state="Using a location tile";break;case"playerMove":n.state="Moving an existing settlement";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_kingdombuilder=kingdombuilder,kingdomino={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/282.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},K_kingdomino=kingdomino,kingdoms={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/283.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"opponentBid":case"challengerBid":n.state="Bidding on a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_kingdoms=kingdoms,kingofthepitch={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/284.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},K_kingofthepitch=kingofthepitch,kingoftokyo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/285.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickMonster":n.state="Choosing a monster";break;case"changeMimickedCard":n.state="Changing a mimicked card";break;case"throwDice":n.state="Throwing dice";break;case"changeDie":n.state="Changing dice results";break;case"psychicProbeRollDie":n.state="Rolling a die";break;case"resolveHeartDiceAction":n.state="Resolving heart dice action";break;case"cancelDamage":n.state="Reducing damage";break;case"leaveTokyo":n.state="Choosing to leave or stay in Tokyo";break;case"buyCard":n.state="Buying a card";break;case"chooseMimickedCard":case"opportunistChooseMimicCard":n.state="Choosing to mimic a card";break;case"opportunistBuyCard":n.state="Buying a card as an Opportunist";break;case"sellCard":n.state="Selling a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_kingoftokyo=kingoftokyo,kingsguild={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/286.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerGuildTurn":n.state="Choosing a guild bonus";break;case"playerTurn":n.state="Taking an action";break;case"playerGather":n.state="Gathering resources";break;case"playerExpand":n.state="Expanding a room or hiring a specialist";break;case"playerCraft":n.state="Crafting an item";break;case"playerBuildRoomOnly":n.state="Building a room";break;case"playerHireSpecialistOnly":n.state="Hiring a specialist";break;case"playerReplaceBonusResource":n.state="Replacing a resource";break;case"playerSpecialistOneTimeAction":case"playerSpecialistCraftAction":n.state="Using a specialist ability";break;case"playerSelectTreasureCard":n.state="Selecting treasure cards";break;case"playerSellTreasure":n.state="Selling or discarding treasure cards";break;case"playerPlayTreasureEffect":n.state="Resolving treasure card effect";break;case"kingsFuneralBidding":n.state="Bidding on the King's Statue";break;case"playerPlaceKingStatue":n.state="Placing the King's Statue";break;case"playerEndTurn":n.state="Playing treasure cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_kingsguild=kingsguild,klaverjassen={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/287.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},K_klaverjassen=klaverjassen,kmakici={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/288.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn_1":case"playerTurn_firstplayer":n.state="Playing a card (1/3)";break;case"playerTurn_2":n.state="Playing a card (2/3)";break;case"playerTurn_3":n.state="Playing a card (3/3)";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_kmakici=kmakici,koikoi={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/289.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerMatchHandCard":n.state="Playing a card";break;case"playerMatchDrawnCard":n.state="Playing the drawn card";break;case"playerChooseKoiKoiAfterDraw":n.state='Calling "Koi" or stopping';break;case"multiplayerReadyNextHand":n.state="Preparing for the next month";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_koikoi=koikoi,konane={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/290.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"player1Remove":case"player2Remove":n.state="Removing a stone";break;case"playerSelect":n.state="Moving a stone";break;case"playerCapture":n.state="Capturing a stone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_konane=konane,kqj={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/291.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},K_kqj=kqj,krakenup={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/292.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Selecting a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_krakenup=krakenup,krosmasterarena={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/293.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseTeam":case"chooseTeamSimultaneous":n.state="Choosing a Krosmaster for their team";break;case"placeTeam":n.state="Placing their Krosmasters on the board";break;case"chooseBoardSide":n.state="Choosing a board side for their team";break;case"changeDie":n.state="Choosing a die face";break;case"inspirationDiceNoReroll":case"inspirationDice":n.state="Attributing inspiration dice to Krosmasters";break;case"which_mob":n.state="Activating a mob";break;case"masterturn":n.state="Using Move Points and Action Points";break;case"selectSecondaryTargets":case"spelltarget":n.state="Choosing a target for a spell";break;case"buyReward":case"buyRewardHidden":n.state="Buying a reward";break;case"boostChoice":n.state="Choosing a bonus";break;case"move_next_to_me":case"move_next_to_target":n.state="Moving next to a target";break;case"place_next_to_target_square":case"place_next_to_target":n.state="Placing a summon around a target";break;case"summon_choice":n.state="Choosing a summon";break;case"give_one_move":n.state="Moving to a free cell";break;case"move_adjacent_to_target":n.state="Moving a character on target";break;case"move_on_latest_position":n.state="Moving a character to Mint Jelly freed cell";break;case"cold_chain":n.state="Choosing a target for Cold Chain";break;case"potion_bag":n.state="Choosing a bonus for Potion Bag";break;case"drhellzerker":n.state="Choosing the number of MP to spend";break;case"diy":n.state="Choosing 2 powers for Tactical Arrow";break;case"changeDieOnDouble":n.state="Choosing to re-roll a die";break;case"move_adjacent_ally_not_self_to_target":case"move_adjacent_ally_to_target_then_move_next_to_target":n.state="Moving an ally next to a target";break;case"move_adjacent_ally_summon_to_target":n.state="Moving an ally summon next to a target";break;case"move_adjacent_ally_gobbowl_to_target":n.state="Moving an ally Gobbowl next to a target";break;case"masquerade":n.state="Replacing a Maskeman";break;case"move_adjacent_opponent_to_target":n.state="Moving an opponent next to a target";break;case"temporalbubble":n.state="Choosing a target for Temporal Bubble";break;case"suckerstab":n.state="Choosing the number of AP to spend";break;case"cometomama":n.state="Choosing the number of Kama to spend";break;case"dracometeors":n.state="Choosing a target for Draco Meteor";break;case"summon_place":n.state="Placing a summon on the board";break;case"thrifty":n.state="Choosing to ignore the spell cost";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_krosmasterarena=krosmasterarena,krosmasterblast={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/294.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},K_krosmasterblast=krosmasterblast,kulami={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/295.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a marble";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},K_kulami=kulami,ladyandthetiger={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/296.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"collectorAction":n.state="Choosing a card from the display";break;case"guesserDiscard":n.state="Guessing, matching a set, or discarding a card from the display";break;case"guesserAction":n.state="Guessing, matching a set, or passing";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_ladyandthetiger=ladyandthetiger,ladyschoice={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/297.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"firstCourt2p":case"secondCourt2p":n.state="Courting a gentleman";break;case"turnStart":case"ladyTurn":n.state="Choosing a gentleman to court or marry";break;case"gentTurn":n.state="Boasting or changing an attribute card";break;case"ladyTurnClockExpired":case"ladyTurnFinalMarry":n.state="Marrying a gentleman immediately";break;case"ladyTurnFinalCourt":n.state="Courting a gentleman before deciding which to marry";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_ladyschoice=ladyschoice,lagranja={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/298.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},L_lagranja=lagranja,lama={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/299.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_lama=lama,lamarcheducrabe={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/300.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeBaddie":n.state="Placing a baddie";break;case"moveTurn":n.state="Moving a crab";break;case"continueSelection":case"resignSelection":n.state="Continuing or stopping the adventure";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_lamarcheducrabe=lamarcheducrabe,laserreflection={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/301.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"puzzleCreationInit":case"puzzleCreation":case"puzzleCreationEnd":n.state="Creating a puzzle";break;case"puzzlePlayInit":case"puzzlePlay":n.state="Solving a puzzle";break;case"createFromSeed":n.state="Creating a puzzle from a seed";break;case"teamSelectionInit":case"teamSelection":n.state="Selecting a team";break;case"design":n.state="Sharing a puzzle";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_laserreflection=laserreflection,lasvegan={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/302.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},L_lasvegan=lasvegan,ledernierpeuple={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/303.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},L_ledernierpeuple=ledernierpeuple,legendraiders={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/304.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"character_choice":n.state="Choosing a character";break;case"roll_dice":case"choose_action":n.state="Choosing an action";break;case"choose_dice_face":n.state="Playing a dice card";break;case"choose_dice_card_effect":n.state="Choosing a dice card effect";break;case"discard_tile":n.state="Discarding a tile";break;case"discard_tool":n.state="Discarding a tool";break;case"complete_discovery":n.state="Completing a discovery";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_legendraiders=legendraiders,lettertycoon={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/305.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerMayReplaceCard":n.state="Replacing a card";break;case"playerMayPlayWord":n.state="Playing a word";break;case"playersMayChallenge":n.state="Challenging a word";break;case"playerMayBuyPatent":n.state="Buying a patent";break;case"playerMayDiscardCards":case"playerMustDiscardCard":n.state="Discarding cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_lettertycoon=lettertycoon,lewisclark={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/306.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},L_lewisclark=lewisclark,libertalia={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/307.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseCard":case"parrot":n.state="Playing a card";break;case"chooseBooty":n.state="Choosing a booty";break;case"bootySaber":n.state="Discarding a character from another player";break;case"recruiter":n.state="Taking back a character";break;case"preacher":n.state="Keeping booty";break;case"gunner":n.state="Discarding a character";break;case"merchant":n.state="Discarding booty tiles";break;case"waitress":n.state="Discarding a treasure map";break;case"surgeon":n.state="Taking a character back from their cemetary";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_libertalia=libertalia,lielow={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/308.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},L_lielow=lielow,lifeline={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/309.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeStone":n.state="Placing a stone";break;case"pieChoice":n.state="Choosing whether to switch sides";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_lifeline=lifeline,lineae={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/310.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseLocations":n.state="Choosing a starting location";break;case"sunlightPhaseStart":n.state="Burning hydrocarbons for electricity";break;case"playerTurn":case"playerNextTurn":n.state="Placing workers";break;case"payTollsStart":n.state="Paying tolls";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_lineae=lineae,lineit={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/311.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},L_lineit=lineit,linesofaction={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/312.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},L_linesofaction=linesofaction,linkage={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/313.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Making a move";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_linkage=linkage,littlefactory={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/314.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"StartTurn":case"EndTurn":n.state="Activating buildings";break;case"PlayerAction":n.state="Producing or trading resources";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_littlefactory=littlefactory,liverpoolrummy={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/315.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},L_liverpoolrummy=liverpoolrummy,livingforest={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/316.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playersDraft":case"playersHiddenDraft":n.state="Forming a Guardian Animal Help Line";break;case"playerTurn":case"playerConfirm":n.state="Taking actions";break;case"gameSummary":case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_livingforest=livingforest,locomomo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/317.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseToken":n.state="Choosing an animal";break;case"placeTokens":n.state="Composing a group photo";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_locomomo=locomomo,logger={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/318.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerInitialLocation":n.state="Choosing initial location";break;case"playerAction":n.state="Taking an action";break;case"playerProtest":n.state="Protesting";break;case"playerMovement":n.state="Moving or staying";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_logger=logger,lookatthestars={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/319.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playCard":case"placeShape":n.state="Placing a shape";break;case"placePlanet":n.state="Placing a planet on a star";break;case"placeLine":n.state="Placing a line between two stars";break;case"placeStar":n.state="Placing a new star";break;case"placeBlackHole":n.state="Placing a black hole";break;case"placeCrescentMoon":n.state="Placing a crescent moon";break;case"placeLuminousAura":n.state="Placing a luminous aura";break;case"placeGalaxy":n.state="Placing a galaxy";break;case"placeNova":n.state="Placing a nova";break;case"placeTwinklingStar":n.state="Placing a twinkling star";break;case"confirmTurn":n.state="Confirming turn";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_lookatthestars=lookatthestars,lostcities={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/320.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerPlayCard":n.state="Placing a card";break;case"playerPickCard":n.state="Picking a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_lostcities=lostcities,lostexplorers={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/321.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerSetup":n.state="Flipping a starting token";break;case"retrieveExplorers":n.state="Retrieving Expedition Members";break;case"playExplorers":n.state="Using Expedition Members";break;case"completeMission":n.state="Completing a Mission";break;case"showVictory":case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_lostexplorers=lostexplorers,lostseas={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/322.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"setCols":n.state="Choosing column goals";break;case"setRows":n.state="Choosing row goals";break;case"playTile":n.state="Placing a tile";break;case"discardTile":n.state="Discarding a tile";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_lostseas=lostseas,loveletter={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/323.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"bishoptargeted":n.state="Discarding a card";break;case"cardinalchoice":n.state="Looking at a hand";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_loveletter=loveletter,lox={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/324.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"programming":n.state="Programming secret orders";break;case"resolution":n.state="Executing programmed orders";break;case"initialPlacement":n.state="Placing initial Idrakys";break;case"chooseTitan":n.state="Choosing a Raging Titan to eliminate";break;case"chooseTitanSquad":n.state="Fighting the Raging Titan";break;case"chooseReward":n.state="Choosing a reward";break;case"assignReputation":n.state="Assigning Bard tokens";break;case"dummyPlayer":n.state="Moving the Dummy Player";break;case"census":n.state="Grabbing for the Census";break;case"assignStories":n.state="Placing Sorcerers' Guild stories";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_lox=lox,luckynumbers={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/325.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"simpleSetup":case"gameSetup":case"allPlayersDrawATile":n.state="Setting up the game";break;case"playersInitialTurns":n.state="Placing initial clover";break;case"playerDrawsOrPlaysFromTable":n.state="Drawing or picking up a clover";break;case"placeOnBoardOrTable":n.state="Placing a clover";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_luckynumbers=luckynumbers,lumen={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/326.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"askActivatePlanning":case"planificationChooseFaces":n.state="Activating planning";break;case"chooseOperation":n.state="Choosing an operation";break;case"chooseCell":n.state="Choosing a cell";break;case"chooseCellLink":n.state="Choosing a cell link";break;case"confirmCell":n.state="Confirming a cell";break;case"chooseAction":n.state="Choosing an action";break;case"chooseFighter":case"chooseTerritory":n.state="Choosing a fighter";break;case"chooseCellInterference":n.state="Choosing a cell for Interference";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_lumen=lumen,luxor={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/327.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"assessMoveWithDie":n.state="Moving an adventurer";break;case"chooseTileToLoot":n.state="Looting a tile";break;case"chooseLootTile":n.state="Choosing a treasure tile";break;case"chooseHorusCardOrKey":n.state="Choosing a horus card or key";break;case"chooseScarabOrWildcard":n.state="Choosing a scarab or wildcard";break;case"chooseHorusCardEyes":n.state="Drawing a horus card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},L_luxor=luxor,machiavelli={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/328.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurnStart":case"playerTurnStateA":case"playerTurnStateB":n.state="Taking an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_machiavelli=machiavelli,madeira={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/329.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},M_madeira=madeira,mammalath={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/330.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_mammalath=mammalath,mapmaker={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/331.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"districtTieBreak":n.state="Selecting district winner";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_mapmaker=mapmaker,marcopolo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/332.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerBonus":n.state="Collecting bonuses";break;case"playerDieCompensation":n.state="Collecting dice compensation";break;case"playerTurn":n.state="Taking an action";break;case"playerTravel":n.state="Traveling";break;case"playerChooseResource":n.state="Choosing resources";break;case"playerChooseCityCardAward":n.state="Choosing city card award";break;case"playerPickContract":n.state="Picking a contract";break;case"playerMoveTradingPost":n.state="Moving a trading post";break;case"playerTriggerOtherCityBonus":n.state="Activating another city bonus";break;case"pickCharacter":n.state="Picking a character";break;case"pickGoals":n.state="Picking goal cards";break;case"playerGunjBonus":n.state="Choosing a good";break;case"gameover":case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_marcopolo=marcopolo,marcopolotwo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/333.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerBonus":n.state="Collecting bonuses";break;case"playerDieCompensation":n.state="Collecting dice compensation";break;case"playerTurn":n.state="Taking an action";break;case"pickCharacter":n.state="Picking a character";break;case"pickGoals":n.state="Picking goal cards";break;case"pickDonataBadoerFigures":n.state="Picking a figure";break;case"gameover":case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_marcopolotwo=marcopolotwo,marrakech={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/334.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"rotateAssam":n.state="Rotating Assam";break;case"moveAssam":n.state="Moving Assam";break;case"placeCarpet":n.state="Placing a rug adjacent to Assam";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_marrakech=marrakech,marram={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/335.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},M_marram=marram,martiandice={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/336.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"diceChoosing":n.state="Choosing a dice type to set aside";break;case"continueOrEnd":case"endOrEnd":n.state="Rolling available dice";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_martiandice=martiandice,mascarade={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/337.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"showCards":n.state="Waiting for other players";break;case"playerMainTurn":n.state="Taking an action";break;case"claimOrDoNotClaim":n.state="Claiming a role";break;case"powerOfTricksterRichestTie":n.state="Choosing a player to tax";break;case"powerOfFool":n.state="Exchanging cards";break;case"powerOfSpySwap":case"powerOfSorceress":n.state="Choosing a card to swap";break;case"powerOfSpyLook":n.state="Choosing a card to look at";break;case"powerOfGuru":n.state="Choosing a player to point at";break;case"powerOfGuruAnnouncement":n.state="Guessing their mask";break;case"powerOfPuppeteer":n.state="Choosing players to swap";break;case"powerOfPrincess":n.state="Choosing another player's card";break;case"powerOfGamer":n.state="Choosing coins to place in their hand";break;case"gamerGuessNbCoins":n.state="Guessing how many coins they placed in their hand";break;case"customScenarioBuild":n.state="Selecting masks to play with";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_mascarade=mascarade,mattock={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/338.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerPlayTunnel":n.state="Placing a tunnel";break;case"playerPlayTunnelWithMiner":n.state="Placing a tunnel with a miner";break;case"playerMoveMiner":n.state="Moving a miner";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_mattock=mattock,meadow={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/339.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"playerTurn2":n.state="Placing a stone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_meadow=meadow,mechadream={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/340.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},M_mechadream=mechadream,medina={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/341.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},M_medina=medina,megalomania={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/342.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},M_megalomania=megalomania,memoir={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/343.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"uploadScenario":n.state="Uploading a scenario";break;case"commissarCard":n.state="Placing a card under the commissar token";break;case"playCommissarCard":n.state="Playing a commissar card";break;case"playCard":n.state="Playing a card";break;case"orderUnits":n.state="Ordering units";break;case"moveUnits":n.state="Moving units";break;case"attackUnit":case"attackUnits":n.state="Attacking units";break;case"opponentAmbush":n.state="Reacting to an ambush";break;case"attackRetreat":n.state="Retreating";break;case"takeGround":n.state="Taking the ground";break;case"armorOverrun":n.state="Overrunning an armor unit";break;case"drawChoice":n.state="Choosing a card to discard";break;case"desertMove":n.state="Moving an additional hex (Desert rules)";break;case"battleBack":n.state="Battling back";break;case"orderUnitsFinestHour":n.state="Ordering units (Finest Hour)";break;case"targetAirPower":n.state="Targeting units (Air Power)";break;case"targetBarrage":n.state="Targeting units (Barrage)";break;case"targetMedics":n.state="Healing units";break;case"selectUnits":n.state="Selecting units";break;case"airDrop":n.state="Air dropping units";break;case"confirmTurn":n.state="Confirming turn";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_memoir=memoir,mercadodelisboaste={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/344.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"PickMarket":n.state="Selecting a market";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_mercadodelisboaste=mercadodelisboaste,meridians={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/345.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeStone":n.state="Placing a stone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_meridians=meridians,metromaniab={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/346.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},M_metromaniab=metromaniab,microdojo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/347.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Moving a worker";break;case"playerBuild":n.state="Building a building";break;case"playerAction":n.state="Doing an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_microdojo=microdojo,mijnlieff={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/348.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"player_turn":case"player_turn_after_pass":n.state="Placing a piece";break;case"player_setup_turn":n.state="Placing a board segment";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_mijnlieff=mijnlieff,mindup={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/349.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},M_mindup=mindup,minhwatu={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/350.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"captureSelect":n.state="Capturing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_minhwatu=minhwatu,modten={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/351.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},M_modten=modten,monsterfactory={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/352.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"startingTileState":n.state="Choosing a starting tile";break;case"playerTurnState":n.state="Playing a tile";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_monsterfactory=monsterfactory,morocco={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/353.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"SelectCube":n.state="Selecting an information cube";break;case"Scout":n.state="Moving the pawn and scouting stalls";break;case"AssignWorker":n.state="Assigning a worker to a stall";break;case"ClosedStall":n.state="Collecting rewards for closed stalls";break;case"ChooseBonus":n.state="Choosing a bonus";break;case"CollectJuiceSellerTokens":n.state="Collecting the Juice Seller tokens";break;case"RotateMarketTile":n.state="Rotating the market tile";break;case"UseCubes":n.state="Swapping cubes for gold";break;case"MoveTourist":n.state="Moving tourists";break;case"DiscardCubes":n.state="Discarding information cubes";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_morocco=morocco,mow={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/354.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"chooseDirection":n.state="Choosing a direction";break;case"swapHands":n.state="Swapping hands";break;case"playFarmer":n.state="Playing a farmer";break;case"selectOpponent":n.state="Selecting an opponent for a farmer";break;case"viewCards":n.state="Viewing opponent's cards";break;case"giveCard":n.state="Giving a card to an opponent";break;case"selectFliesType":n.state="Selecting flies to ignore";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_mow=mow,mrjack={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/355.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickCharacterCard":n.state="Picking a character";break;case"moveCharacterWithAbility":n.state="Using a character";break;case"moveCharacter":n.state="Moving a character";break;case"selectSourceGaslight":case"selectGaslightDestination":n.state="Moving a gaslight";break;case"selectSourceCordon":case"selectCordonDestination":n.state="Moving a cordon";break;case"selectSourceManhole":case"selectManholeDestination":n.state="Moving a manhole";break;case"switchPlace":n.state="Switching places";break;case"moveCloser":case"pickCharacterToMoveCloser":n.state="Moving closer to Sergeant Goodley";break;case"rotateWatson":n.state="Rotating Watson";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_mrjack=mrjack,murusgallicus={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/356.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"firstTurn":n.state="Placing a tower";break;case"colorswap":n.state="Choosing a color";break;case"playerTurn":n.state="Moving or sacrificing a tower";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_murusgallicus=murusgallicus,mycity={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/357.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeWell":n.state="Placing a well";break;case"playTile":n.state="Playing a building";break;case"placeRail":n.state="Placing a rail";break;case"placeInGame":case"setRewards":n.state="Applying stickers";break;case"final":case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_mycity=mycity,myfirstcastlepanic={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/358.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"drawCard":n.state="Drawing a card";break;case"PlayaCard":n.state="Playing a card";break;case"SelectMonster":n.state="Removing a monster";break;case"AskCard":case"AskCard2":n.state="Asking for a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_myfirstcastlepanic=myfirstcastlepanic,myshelfie={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/359.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"choosingTiles":n.state="Choosing tiles from the living room";break;case"fillingShelf":n.state="Filling their shelf";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},M_myshelfie=myshelfie,nangaparbat={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/360.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"guideSetup":n.state="Placing the guide";break;case"playerTurn":n.state="Selecting an animal to trap";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_nangaparbat=nangaparbat,narabi={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/361.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Switching a stone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_narabi=narabi,nautilus={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/362.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"giveSpecialCardToOpponent":n.state="Giving a special card";break;case"playDiverOrSpecialCard":n.state="Playing a diver or special card";break;case"sendDiverCardToOppositeSide":n.state="Sending a diver card to opposite side";break;case"sendDiverCardToSameSide":n.state="Sending a diver card to same side";break;case"playSpecialCardAnchor":n.state="Playing the anchor special card";break;case"lookDiverCardsInOpponentHand":n.state="Looking at the diver cards in opponent's hand";break;case"keepExtraDiverCard":n.state="Keeping an extra diver card";break;case"returnDiverCardToOpponent":n.state="Returning a diver card to opponent";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_nautilus=nautilus,neutreeko={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/363.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},N_neutreeko=neutreeko,newfrontiers={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/364.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},N_newfrontiers=newfrontiers,nextstation={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/365.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playersDraw":n.state="Playing an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_nextstation=nextstation,niagara={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/366.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"choosePaddle":n.state="Playing a paddle card";break;case"moveCanoe":n.state="Moving a canoe";break;case"chooseCanoeAction":n.state="Choosing a canoe action";break;case"canoeMaySteal":n.state="Stealing a gem";break;case"chooseWeather":n.state="Changing the weather";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_niagara=niagara,nicodemus={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/367.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseAction":n.state="Playing or repairing a machine";break;case"choosePlayAction":n.state="Choosing an action for played card";break;case"selectResource":n.state="Choosing a resource";break;case"selectExchange":n.state="Exchanging resources";break;case"selectMachine":n.state="Choosing a machine";break;case"selectProject":n.state="Choosing a project";break;case"chooseProject":n.state="Choosing a completed project";break;case"chooseProjectDiscardedMachine":n.state="Choosing machines to discard";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_nicodemus=nicodemus,nidavellir={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/368.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerBids":n.state="Bidding for taverns";break;case"ulineBid":n.state="Bidding (Uline's power)";break;case"recruitDwarf":n.state="Recruiting a dwarf";break;case"recruitHero":n.state="Recruiting a hero";break;case"transformCoin":n.state="Transforming a coin";break;case"discardTavernCard":case"discardCard":n.state="Discarding a card";break;case"distinctionExplorer":n.state="Choosing a card (Explorer's power)";break;case"ulineTradeCoin":n.state="Trading coins (Uline's power)";break;case"chooseThrudColumn":case"chooseYludColumn":n.state="Placing Thrud";break;case"recruitCamp":n.state="Recruiting a mercenary or an artifact (Holda's effect)";break;case"enlistMercenary":case"chooseEnlistOrder":n.state="Enlisting a mercenary";break;case"vidofnirTransforms":n.state="Choosing transformations (Vidofnir and Vedrfölnir's effect)";break;case"pickDiscardAndumia":n.state="Picking a card in the discard (Andumia's effect)";break;case"placeOlwynDouble":n.state="Placing Olwyn's double";break;case"discardHofud":n.state="Discarding a card (Hofud's effect)";break;case"brisingamens":n.state="Picking a card in the discard (Brisingamens's effect)";break;case"khradTransform":n.state="Choosing a coin to upgrade (Khrad's effect)";break;case"brisingamensDiscard":n.state="Discarding a card (Brisingamens's effect)";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_nidavellir=nidavellir,ninemensmorris={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/369.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Placing/Moving a stone";break;case"removePhase":n.state="Removing a stone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_ninemensmorris=ninemensmorris,ninetynine={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/370.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},N_ninetynine=ninetynine,ninetynineaddition={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/371.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"aceAskValue":n.state="Selecting Ace value";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_ninetynineaddition=ninetynineaddition,nippon={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/372.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking a worker or consolidating";break;case"playerPreFinal":n.state="Exchanging blueprints";break;case"playerPostFinal":n.state="Acknowledging end of game";break;case"playerTurnUpgradePrompt":n.state="Using factory replacement bonus";break;case"playerBonus2x":n.state="Placing 2x multiplier on achievement slot";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_nippon=nippon,noah={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/373.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"loadAnimal":n.state="Loading an animal";break;case"chooseGender":n.state="Choosing gender";break;case"chooseOpponent":n.state="Choosing opponent for an action";break;case"viewCards":n.state="Viewing opponent cards";break;case"giveCard":n.state="Giving a card to an opponent";break;case"chooseWeight":n.state="Choosing weight";break;case"reorderTopDeck":n.state="Reordering top deck cards";break;case"replaceOnTopDeck":n.state="Replacing a card on top of the deck";break;case"moveNoah":n.state="Moving Noah";break;case"optimalLoadingGiveCards":n.state="Giving cards to opponents";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_noah=noah,noirkvi={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/374.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"killerTurn":case"inspectorTurn":n.state="Performing an action";break;case"killerFirstTurn":n.state="Killing a suspect";break;case"inspectorFirstTurn":n.state="Picking an identity";break;case"inspectorPickExonerate":case"inspectorPickCitizensArrestCard":n.state="Discarding a card";break;case"inspectorPickCitizensArrestTarget":n.state="Picking a suspect";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_noirkvi=noirkvi,noneshallpass={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/375.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickGuards":n.state="Choosing their guard class";break;case"standardTurn":case"notifyPlayer":n.state="Taking an action";break;case"doSixAction":case"playerSecondTurn":n.state="Performing a bonus action";break;case"playerDead":case"playerDeadNotify":n.state="Incapacitated - treating wounds";break;case"playerTriples":case"playerTriplesTwo":case"notifyPlayerTriplesTwo":n.state="Performing a triple action";break;case"commanderActions":n.state="Performing a commander action";break;case"choosePeril":n.state="Choosing their peril";break;case"monsterTurnReady":case"monsterArriveReady":n.state="Preparing for the monster's turn";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_noneshallpass=noneshallpass,northwestpassage={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/376.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},N_northwestpassage=northwestpassage,notalone={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/377.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},N_notalone=notalone,nothanks={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/378.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking a card or spending a chip";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_nothanks=nothanks,novaluna={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/379.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},N_novaluna=novaluna,numberdrop={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/380.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},N_numberdrop=numberdrop,nxs={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/381.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurnMove":n.state="Moving a ship";break;case"playerTurnRotate":n.state="Rotating a ship";break;case"endOfGame":case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_nxs=nxs,nylonppong={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/382.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"handCheck":n.state="Checking hand";break;case"claimDrawStop":n.state="Choosing action";break;case"playerTurn":n.state="Discarding a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},N_nylonppong=nylonppong,oasis={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/383.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},O_oasis=oasis,obsession={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/384.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickFamily":n.state="Choosing a family";break;case"pickStartingGuest":n.state="Choosing a starting guest";break;case"hostActivity":n.state="Hosting an activity";break;case"builderMarket":n.state="Purchasing an improvement";break;case"playerResolveFavor":n.state="Resolving a favor";break;case"pickFairChild":n.state="Inviting a Fairchild";break;case"discardObjective":n.state="Discarding an objective";break;case"playVpCard":n.state="Playing a VP card";break;case"gameover":case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},O_obsession=obsession,offtherails={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/385.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerActionPhase":n.state="Taking actions";break;case"playerMovementCart":case"playerMovementDirection":n.state="Choosing which cart moves first";break;case"playerMovementJewels":n.state="Choosing which jewels to pick up";break;case"playerCollisionSplit":n.state="Dividing jewels from struck cart";break;case"playerCollisionHand":n.state="Choosing which hand to drop";break;case"playerMissionClaim":n.state="Claiming a mission card";break;case"playerChasmExpand":n.state="Choosing where the mine will collapse";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},O_offtherails=offtherails,ohhell={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/386.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"actionBidding":case"actionSimultaneousBidding":n.state="Bidding";break;case"actionPlayCard":n.state="Playing a card";break;case"chooseTrump":n.state="Choosing the trump suit";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},O_ohhell=ohhell,ohseven={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/387.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},O_ohseven=ohseven,onceuponaforest={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/388.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"drawCardInit":case"drawCard":n.state="Drawing a card";break;case"playCardOnForest":case"playImposedCardOnForest":case"playLatestCardsOnForest":n.state="Playing a card on their forest";break;case"giveCardToPlayer":n.state="Giving a card to another player";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},O_onceuponaforest=onceuponaforest,one={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/389.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurnPlace":case"confirmTurnPlace":n.state="Placing a stone";break;case"playerTurnPlaceOrCapture":case"confirmTurnPlaceOrCapture":n.state="Placing a stone or capturing an opponent's stone";break;case"selectFirstCapture":case"selectCaptureVariant":n.state="Capturing an opponent's stone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},O_one=one,onitama={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/390.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Moving a pawn";break;case"playerPass":n.state="Discarding a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},O_onitama=onitama,oriflamme={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/391.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playCard":n.state="Playing a card";break;case"askReveal":n.state="Choosing to reveal card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},O_oriflamme=oriflamme,origin={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/392.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurnSetup":n.state="Keeping an objective";break;case"playerTurnMain":n.state="Taking an action";break;case"playerTurnDiscard":n.state="Discarding some cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},O_origin=origin,oust={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/393.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeChecker":n.state="Placing a checker";break;case"firstMoveChoice":n.state="Choosing to switch colors";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},O_oust=oust,outlaws={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/394.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},O_outlaws=outlaws,painttheroses={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/395.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"drawWhim":n.state="Drawing a Whim card";break;case"placeTile":n.state="Placing a tile";break;case"suggestWhimToGuess":case"selectWhimToGuess":n.state="Selecting a Whim card to guess";break;case"suggestGuessWhim":n.state="Suggesting a guess for a Whim card";break;case"guessWhim":n.state="Guessing a Whim card";break;case"suggestModuleCards":case"selectModuleCards":n.state="Selecting a Queen card and a Helper card to keep";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_painttheroses=painttheroses,palace={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/396.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"switchStartCards":n.state="Exchanging cards";break;case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_palace=palace,pandemic={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/397.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickRole":n.state="Choosing a role";break;case"chooseAction":n.state="Choosing an action";break;case"forecast":n.state="Sorting cards";break;case"endTurn":n.state="Ending turn";break;case"discardCards":n.state="Discarding cards";break;case"showEpidemic":n.state="Epidemic!";break;case"beforeInfection":n.state="Drawing infection cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_pandemic=pandemic,paniclab={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/398.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"readyTurn":case"rolldice":n.state="Rolling the dice";break;case"ChkSolution":n.state="Finding the Amoeba";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_paniclab=paniclab,papayoo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/399.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"giveCards":n.state="Giving cards";break;case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_papayoo=papayoo,parisconnection={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/400.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},P_parisconnection=parisconnection,parks={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/401.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"stateChooseYear":n.state="Choosing a year card";break;case"statePlayerTurn":n.state="Taking a turn";break;case"stateSeasonPhoto":n.state="Taking a photo";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_parks=parks,patchwork={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/402.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Performing an action";break;case"playerPatchOne":n.state="Placing a special patch";break;case"playerGameEnd":case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_patchwork=patchwork,pedro={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/403.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},P_pedro=pedro,penaltychallenge={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/404.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},P_penaltychallenge=penaltychallenge,pennypress={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/405.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},P_pennypress=pennypress,pente={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/406.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a stone";break;case"confirmMove":n.state="Confirming move";break;case"playerTurnOrSwap":case"swap2SecondTurnOneStone":case"swapSecondTurn":case"swap2SecondTurn":n.state="Swapping colors or playing a stone";break;case"overtimeTurn":n.state="Capturing the winning line";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_pente=pente,phat={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/407.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},P_phat=phat,photosynthesis={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/408.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerSetup":n.state="Placing a starting small tree";break;case"playerTurn":n.state="Taking an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_photosynthesis=photosynthesis,pi={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/409.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},P_pi=pi,piereighteen={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/410.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"setupTurn":n.state="Choosing a Pier card";break;case"playerTurn":n.state="Placing a card";break;case"finishPlan":n.state="Placing the Plan card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_piereighteen=piereighteen,pingimus={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/411.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"paint":n.state="Painting";break;case"guess":n.state="Guessing";break;case"vote":n.state="Voting";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_pingimus=pingimus,piratenkapern={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/412.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"StartPlayerTurn":n.state="Starting buccaneering quest";break;case"playerTurn":n.state="Rolling the dice";break;case"skullIsland":n.state="Rolling the dice on Skull Island";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_piratenkapern=piratenkapern,polis={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/413.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},P_polis=polis,pontedeldiavolo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/414.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"setupPlayerFirst":case"setupPlayerSecond":n.state="Playing two tiles";break;case"setupPlayerFirstB":case"playerTurnB":n.state="Playing another tile";break;case"playerTurn":n.state="Playing two tiles or a bridge";break;case"playerTurnNoTiles":n.state="Playing a bridge";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_pontedeldiavolo=pontedeldiavolo,potionexplosion={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/415.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"potionSelection":n.state="Selecting a potion";break;case"playerTurnA":n.state="Performing an action";break;case"newPotionSelection":n.state="Selecting a new potion";break;case"potionUsageA":n.state="Using a potion";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_potionexplosion=potionexplosion,president={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/416.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"presidentSwapTurn":n.state="Exchanging cards (President)";break;case"primeMinisterSwapTurn":n.state="Exchanging cards (Prime Minister)";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_president=president,puertorico={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/417.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerRoleSelection":n.state="Selecting a role";break;case"playerCaptainShipSelection":n.state="Selecting a cargo ship";break;case"playerCaptainGoodSelection":n.state="Selecting a good to ship";break;case"playerTraderGoodSelection":n.state="Selecting a good to trade";break;case"playerSettlerPlantationSelection":n.state="Selecting a plantation";break;case"playerCraftsmanPrivilege":n.state="Selecting a good to produce";break;case"playerBuilderBlackMarket":case"playerBuilderBuildingSelection":n.state="Selecting a building to build";break;case"multiplayerPlaceColonists":n.state="Placing colonists";break;case"multiplayerGuesthouseBeforeEndOfGame":case"playerGuesthouseBeforeCaptainShipSelection":case"multiplayerGuesthouseBeforeCraftsman":case"playerGuesthouseBeforeProspector":case"playerGuesthouseBeforeTrader":case"playerGuesthouseBeforeCaptainRoyalSupplier":n.state="Moving colonists from guesthouse";break;case"playerCaptainRoyalSupplier":n.state="Trading goods for VPs";break;case"playerCaptainSmallWharf":n.state="Selecting goods to ship";break;case"multiplayerStoreGoods":case"multiplayerStoreTypeOfGoods":n.state="Storing goods";break;case"multiplayerStoreOneGood":n.state="Storing a good";break;case"playerTraderLocationSelection":n.state="Selecting a trading location";break;case"playerTraderBuyPlantation":n.state="Buying a plantation";break;case"playerTraderSellPlantation":n.state="Selling a plantation";break;case"playerSettlerHacienda":n.state="Selecting a plantation from the deck";break;case"playerBuilderUniversity":case"playerSettlerHospice":n.state="Selecting a colonist from the supply or ship";break;case"playerSettlerPlantationSelectionToDiscard":n.state="Selecting a plantation to discard";break;case"playerSettlerHuntingLodge":n.state="Discarding a plantation";break;case"playerMayorPrivilege":n.state="Selecting a colonist from the supply";break;case"playerMayorVilla":n.state="Selecting a noble from the supply";break;case"playerDraftBuilding":n.state="Drafting a building";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_puertorico=puertorico,pugsinmugs={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/418.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an\taction";break;case"discardCards":n.state="Discarding cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_pugsinmugs=pugsinmugs,pylos={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/419.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"returnSecondBall":case"returnFirstBall":n.state="Returning a ball to the reserve";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_pylos=pylos,pyramidpoker={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/420.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"PlaceTile":n.state="Placing a tile";break;case"CreateHand":n.state="Selecting a tile for their hand";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_pyramidpoker=pyramidpoker,pyrgos={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/421.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Placing a piece";break;case"setDirection":n.state="Choosing the direction of placed triangle";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},P_pyrgos=pyrgos,quantik={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/422.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a token";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Q_quantik=quantik,quantum={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/423.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"firstConstruct":n.state="Placing the first cube";break;case"firstDeploy":case"firstDeployDest":case"firstDeployShip":n.state="Deploying the first ship";break;case"firstRepositionShip":case"firstRepositionDest":n.state="Repositioning the first ship";break;case"chooseAction":n.state="Choosing an action";break;case"chooseShipAction":n.state="Choosing an action for a ship";break;case"reconfigure":n.state="Reconfiguring a ship";break;case"deployShip":case"deployDest":n.state="Deploying a ship";break;case"moveShip":case"moveDest":n.state="Moving a ship";break;case"multipleTargetShip":n.state="Choosing a ship to attack";break;case"allowDangerous":n.state="Choosing to be Dangerous";break;case"allowCruel":n.state="Choosing to be Cruel";break;case"attackEndPosition":n.state="Choosing where to end the attacking ship move";break;case"construct":n.state="Constructing on a planet";break;case"ability":n.state="Using a ship ability";break;case"strikeDest":n.state="Choosing where to strike";break;case"transportInShip":n.state="Choosing which ship to transport";break;case"transportOut":n.state="Choosing where to unload the transported ship";break;case"warpDest":n.state="Choosing which ship to warp to";break;case"warpOrTransport":n.state="Choosing whether to transport or warp";break;case"modifyInto":n.state="Choosing what type of ship to modify";break;case"infamy":n.state="Choosing where to place a quantum cube";break;case"chooseCard":n.state="Choosing a card";break;case"replaceCommand":n.state="Replacing a command";break;case"deployExpansion":n.state="Deploying an expansion ship";break;case"reorganizeShip":n.state="Reorganizing a ship";break;case"reorganizeDeploy":n.state="Deploying a reorganized ship";break;case"repositionCube":case"repositionDest":n.state="Repositioning a cube";break;case"sabotage":n.state="Choosing a card to discard";break;case"chooseReconfigure":n.state="Choosing a new ship type";break;case"rerollReconfigure":n.state="Choosing whether to reconfigure again";break;case"useFlexibleShip":case"useFlexibleInto":n.state="Choosing a ship to add or remove 1";break;case"useResourcefulShip":n.state="Choosing a ship to sacrifice";break;case"useNomadicShip":n.state="Choosing a ship to move";break;case"useNomadicDest":n.state="Choosing where to move the ship";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Q_quantum=quantum,quarto={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/424.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectPiece":n.state="Selecting a piece for their opponent";break;case"placePiece":n.state="Placing a piece";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Q_quarto=quarto,queenskings={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/425.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Moving a piece";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Q_queenskings=queenskings,quetzal={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/426.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"rerollMeeples":n.state="Rerolling meeples";break;case"placeMeepleWithLocation":case"placeMeeple":case"chooseMeepleType":n.state="Placing meeples";break;case"campAction":n.state="Choosing meeple to roll";break;case"pickArtifactFromTemple":n.state="Picking an artifact from temple";break;case"selectOneCard":n.state="Keeping a card";break;case"pickCardToSell":n.state="Sell an artifact";break;case"pickUpgradeTile":n.state="Picking an upgrade tile";break;case"deliverArtifactsToOffice":n.state="Delivering artifacts to office";break;case"deliverArtifactsToShips":n.state="Delivering artifacts to ships";break;case"decideUpgradeToDiscard":n.state="Deciding which upgrade to discard";break;case"exchangeBeforeEnd":n.state="Exchanging coins";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Q_quetzal=quetzal,quinque={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/427.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"firstPlayer":n.state="Placing a parachute on the first tile";break;case"playerAction1":n.state="Taking an action";break;case"playerAction2":n.state="Moving a tile";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Q_quinque=quinque,quoridor={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/428.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Q_quoridor=quoridor,raceforthegalaxy={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/429.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"initialDiscard":case"initialDiscardHomeWorld":n.state="Discarding initial cards";break;case"breedingTube":case"orbActionPlay":case"initialOrb":n.state="Playing an Orb card";break;case"initialTeam":n.state="Placing initial team";break;case"phaseChoice":case"phaseChoiceCrystal":n.state="Choosing a phase";break;case"orbActionMove":case"orbActionMoveDest":n.state="Moving an Orb exploration team";break;case"orbActionDraw":n.state="Drawing an Orb card";break;case"exploreconsume":n.state="Discarding for prestige";break;case"explore":n.state="Choosing cards to keep";break;case"develop":n.state="Placing a development";break;case"settle":n.state="Placing a world";break;case"discardtoputgood":n.state="Discarding to put a good";break;case"takeover_attackerboost":case"takeover_defenderboost":n.state="Choosing a takeover boost";break;case"takeover_maydefeat":n.state="Choosing whether to defeat";break;case"consumesell":n.state="Selling a resource";break;case"consume":n.state="Consuming resources";break;case"productionwindfall":n.state="Using produce powers";break;case"endturndiscard":case"developdiscard":n.state="Discarding excess cards";break;case"draft":n.state="Choosing a card to keep";break;case"invasionGameResolution":n.state="Using temporary Xeno powers";break;case"invasionGameDamage":n.state="Choosing damage to take";break;case"orbActionBackToSas":n.state="Returning to the SAS";break;case"searchAction":case"searchActionChoose":n.state="Searching for a card";break;case"additionalSas":n.state="Choosing an additional SAS";break;case"settlediscard":case"initialDiscardAncientRace":case"initialDiscardScavenger":n.state="Discarding a card";break;case"warEffort":n.state="Discarding to increase war effort";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_raceforthegalaxy=raceforthegalaxy,rage={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/430.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"actionBidding":case"actionBiddingHidden":n.state="Bidding";break;case"actionPlayCard":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_rage=rage,railroadink={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/431.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"useDice":n.state="Using dice";break;case"decideMeteor":case"decideMeteorCancel":n.state="Deciding if meteor will strike";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_railroadink=railroadink,railwaysoftheworld={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/432.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"buildTrack":n.state="Building track";break;case"chooseCard":n.state="Taking an operation card";break;case"urbanize":n.state="Managing a city";break;case"deliverGood":n.state="Delivering a good";break;case"bidding":n.state="Bidding for first player";break;case"westernLink":n.state="Building a Western Link";break;case"chooseRailBaron":n.state="Keeping a Rail Baron card";break;case"playerTurn":n.state="Taking an action";break;case"tradingDepot":n.state="Building a trading depot";break;case"placeMine":n.state="Placing a mine";break;case"buildFuelDepot":n.state="Building a fuel depot";break;case"maritimeConnection":n.state="Building a maritime connection";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_railwaysoftheworld=railwaysoftheworld,rainbow={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/433.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_rainbow=rainbow,rainforest={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/434.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_rainforest=rainforest,rallymangt={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/435.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"diceSelection":n.state="Setting trajectory";break;case"diceRoll":n.state="Rolling dice";break;case"pitStop":n.state="Making a pit stop";break;case"tireChoose":n.state="Choosing tires";break;case"flatout":n.state="Setting back dice due to loss of control";break;case"lossSide":n.state="Choosing which side to spin off";break;case"flystartOrBoostFlatout":case"flystartOrBoost":n.state="Choosing between flying start or boost dice";break;case"manualStart":n.state="Choosing starting position";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_rallymangt=rallymangt,raubbau={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/436.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_raubbau=raubbau,rauha={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/437.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_rauha=rauha,redsevengame={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/438.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playFirst":case"playSecond":n.state="Playing a card";break;case"playAction1":n.state="Picking a card from another player's Palette";break;case"playAction7":n.state="Picking a card from their Palette";break;case"playAdPalette":n.state="Playing a card to their Palette";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_redsevengame=redsevengame,redstone={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/439.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectSquare":n.state="Placing a stone";break;case"chooseNonCaptureOrCapture":n.state="Making a capturing or non-capturing placement";break;case"firstMoveChoice":n.state="Choosing to switch colors or not";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_redstone=redstone,reflectionsinthelookingglass={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/440.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_reflectionsinthelookingglass=reflectionsinthelookingglass,regicide={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/441.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playPhase":n.state="Playing a card";break;case"multiJester":n.state="Volunteering to go next";break;case"discardPhase":n.state="Discarding cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_regicide=regicide,regidice={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/442.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectRoleAndRoll":n.state="Selecting a role and rolling dice";break;case"selectAction":n.state="Taking an action";break;case"sufferDamage":n.state="Deciding how to take damage";break;case"distributeBlackDice":n.state="Distribution black dice";break;case"prepareDice":n.state="Preparing dice";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_regidice=regidice,rememberwhen={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/443.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_rememberwhen=rememberwhen,resarcana={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/444.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_resarcana=resarcana,restinpeace={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/445.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_restinpeace=restinpeace,reversi={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/446.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a disc";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_reversi=reversi,riftvalleyreserve={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/447.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_riftvalleyreserve=riftvalleyreserve,riichimahjong={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/448.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_riichimahjong=riichimahjong,rive={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/449.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeChecker":n.state="Placing a checker";break;case"removeChecker":n.state="Removing a checker";break;case"firstMoveChoice":n.state="Deciding whether to switch colors";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_rive=rive,robotsateourpizza={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/450.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_robotsateourpizza=robotsateourpizza,rollandbump={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/451.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Rolling dice";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_rollandbump=rollandbump,rolledwest={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/452.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_rolledwest=rolledwest,rollforthegalaxy={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/453.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_rollforthegalaxy=rollforthegalaxy,rollingpins={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/454.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"RollDice":n.state="Rolling dice";break;case"ChooseComb":n.state="Choosing combination";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_rollingpins=rollingpins,rollintotown={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/455.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_rollintotown=rollintotown,rolltothetopjourneys={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/456.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"multiplayerSelectionPhase":case"playersTurn":case"confirmEndTurn":n.state="Taking their turn";break;case"addDice":n.state="Adding a die to the active pool";break;case"removeDice":n.state="Removing a die from the active pool";break;case"addOrRemoveDice":n.state="Adding or removing a die from the active pool";break;case"swapDice2":case"swapDice1":n.state="Selecting a die to swap in the active pool";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_rolltothetopjourneys=rolltothetopjourneys,roomtwentyfive={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/457.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_roomtwentyfive=roomtwentyfive,roppyakken={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/458.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"captureSelect":n.state="Capturing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},R_roppyakken=roppyakken,ruhr={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/459.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_ruhr=ruhr,russianrailroads={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/460.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},R_russianrailroads=russianrailroads,saboteur={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/461.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerSelectCard":n.details="Selecting a card";break;case"playerPlayMineCard":n.state="Playing a mine card";break;case"playerPlayActionCard":n.state="Playing an action card";break;case"playerShowGoalCard":n.state="Peeking at a goal card";break;case"playerStealGold":n.state="Stealing gold";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_saboteur=saboteur,saintpetersburg={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/462.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.details="Choosing a card";break;case"useObservatory":n.state="Observatory: Take or discard";break;case"usePub":n.state="Pub: Buy points";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_saintpetersburg=saintpetersburg,saintpoker={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/463.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectRiverCardFromHand":n.details="Selecting a card to add to the river";break;case"playCards":n.state="Playing a hand";break;case"pickupCards":n.state="Taking back a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_saintpoker=saintpoker,sakura={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/464.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.details="Playing a card";break;case"captureSelect":n.state="Capturing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_sakura=sakura,samarkand={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/465.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"PlacePawn":n.details="Placing a pawn";break;case"MovePawn":n.details="Moving a pawn";break;case"Oasis":n.details="Buying goods in the Oasis";break;case"City":n.details="Selling goods in the City";break;case"Nomad":n.details="Giving a greeting gift";break;case"ChooseMarket":n.details="Choosing a market to remove chips from";break;case"Nomad2":n.details="Trading goods or moving again";break;case"MovePawnDice":n.details="Moving a pawn based on the dice result";break;case"DiscardCubes":case"DiscardCubesDone":n.state="Discarding cubes";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_samarkand=samarkand,santorini={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/466.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerPlaceWorker":n.details="Placing a worker";break;case"playerMove":n.details="Moving";break;case"playerBuild":n.details="Building";break;case"buildOffer":n.details="Offering powers";break;case"powersPlayerChoose":n.details="Choosing a power";break;case"playerUsePower":n.details="Using a power";break;case"chooseFirstPlayer":n.details="Choosing first player";break;case"playerPlaceSetup":n.state="Performing power setup";break;case"playerPlaceRam":n.state="Placing the Ram figure";break;case"chooseNyxNightPower":n.state="Choosing Nyx's night power";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_santorini=santorini,sapiens={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/467.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},S_sapiens=sapiens,sasaki={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/468.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"handCheck":n.state="Checking hand";break;case"playerTurn":n.details="Playing a combination";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_sasaki=sasaki,schroedingerscats={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/469.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurnPreHypothesis":case"playerTurnPostHypothesis":n.state="Taking actions";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_schroedingerscats=schroedingerscats,scopa={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/470.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"cirullaDeclare":n.details="Declaring a Cirulla combination";break;case"playerTurn":n.details="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_scopa=scopa,seasaltpaper={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/471.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"takeCards":n.state="Taking cards";break;case"chooseCard":n.state="Keeping a card";break;case"chooseDiscardPile":case"putDiscardPile":n.state="Choosing a discard pile";break;case"playCards":n.state="Playing cards duo";break;case"chooseDiscardCard":n.state="Choosing a card to discard";break;case"chooseOpponent":n.state="Stealing a card from an opponent";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_seasaltpaper=seasaltpaper,seasons={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/472.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"draftChoice":n.state="Keeping a card";break;case"draftTwist":n.state="Keeping a card (Twist of Fate)";break;case"buildLibrary3":n.state="Choosing cards for the 3rd year";break;case"buildLibrary2":n.state="Choosing cards for the 2nd year";break;case"buildLibraryNew":n.state="Choosing cards for the 1st year";break;case"diceChoice":n.state="Choosing a die";break;case"maliceDie":n.state="Using Die of Malice";break;case"playerTurn":n.details="Taking actions";break;case"checkEnergy":case"nextEffectCheckEnergy":case"bonusExchangeDiscard":n.details="Discarding energy";break;case"keepOrDiscard":n.details="Keeping or discarding a card";break;case"summonVariableCost":n.details="Choosing how to pay the cost of a card";break;case"bonusDrawChoice":n.details="Choosing a card to draw";break;case"gainEnergy":case"bonusGainEnergy":n.details="Choosing energy to gain";break;case"discardIshtar":n.details="Discarding identical energies (Ishtar)";break;case"discardKairn":n.details="Discarding an energy (Kairn)";break;case"necroticSacrifice":n.details="Discarding or sacrificing a familiar";break;case"mirrorDiscard":n.details="Discarding identical energies";break;case"mirrorChoose":n.details="Choosing a type of energy (Mirror)";break;case"elementalChoice":n.details="Choosing a type of energy (Elemental)";break;case"treeOfLifeChoice":n.details="Choosing a type of energy (Tree of Life)";break;case"discardTree":n.details="Discarding an energy (Tree of Life)";break;case"cauldronPlace":n.details="Placing an energy on the Cauldron";break;case"vampiricChoice":n.details="Choosing to draw or discard a card (Vampire)";break;case"vampiricDiscard":n.details="Discarding a card (Vampire)";break;case"amuletFireChoice":n.details="Choosing a card to add to your hand (Amulet of Fire)";break;case"divineChoice":n.details="Choosing a card to summon for free (Divine Intervention)";break;case"potionDreamChoice":n.details="Choosing a card to summon for free (Potion of Dreams)";break;case"dragonSkull1":case"dragonSkull2":case"dragonSkull3":n.details="Sacrificing a card (Dragon Skull)";break;case"temporalBoots":n.details="Moving the season token";break;case"syllasSacrifice":n.details="Sacrificing a card (Syllas)";break;case"nariaChoice":n.details="Choosing a card for Naria";break;case"amsugTakeback":n.details="Taking back a magical item (Amsug)";break;case"lewisChoice":n.details="Choosing an opponent (Lewis)";break;case"orbChoice":case"orbChoice2":n.details="Choosing a card (Orb of Time)";break;case"discardHornPlenty":n.details="Discarding an energy (Horn of Plenty)";break;case"familiarChoice":n.details="Choosing a familiar";break;case"amuletOfTime":n.details="Discarding power cards (Amulet of Time)";break;case"rattyNightshade":n.details="Collecting energy from opponents (Ratty Nightshade)";break;case"wardenChoice":n.details="Choosing a card (Warden of the Forest)";break;case"wardenDiscardEnergy":n.details="Discarding energy (Warden of the Forest)";break;case"wardenDiscardCard":n.details="Discarding a card (Warden of the Forest)";break;case"throneDiscard":n.details="Discarding a card (Throne of the High King)";break;case"telescopeChoice":n.details="Choosing a card (Telescope)";break;case"discardJewel":n.details="Discarding 3 identical energies (Jewel of the Ancients)";break;case"fairyMonolith":n.details="Placing an energy on the Fairy Monolith";break;case"fairyMonolithActive":n.details="Choosing energy to return to your reserve (Fairy Monolith)";break;case"seleniaTakeback":n.details="Taking back a magical item (Selenia)";break;case"scrollIshtarChoice":n.details="Choosing a type of energy (Scroll of Ishtar)";break;case"scrollIshtarCardChoice":n.details="Choosing a card (Scroll of Ishtar)";break;case"statueOfEolisChoice":n.details="Choosing a card (Statue of Eolis)";break;case"statueOfEolisLook":n.details="Looking at the top card of the draw pile (Statue of Eolis)";break;case"resurrectionChoice":n.details="Choosing a card to add to your hand (Resurrection)";break;case"potionSacrificeChoice":n.details="Sacrficing Shield of Zira instead (Potion of Sacrifice)";break;case"ravenChoice":n.details="Choosing a magical item to mimic (Raven)";break;case"potionOfAncientChoice":n.details="Choosing a card (Potion of Ancient Choice)";break;case"potionOfAncientCardChoice":n.details="Choosing a card to add to your hand (Potion of Ancient Choice)";break;case"sepulchralAmuletChoice":case"sepulchralAmuletChoice2":n.details="Choosing a card to add to your hand (Sepulchral Amulet)";break;case"discardEstorian":n.details="Discarding 2 identical energies (Estorian Orb)";break;case"arusSacrifice":n.details="Discarding or sacrificing a card (Arus)";break;case"argosianChoice":n.details="Choosing a familiar to lock (Argosian)";break;case"discardEolis":n.details="Discarding a water energy (Statue of Eolis)";break;case"dragonsouldCardChoice":n.details="Choosing a card (Dragon Soul)";break;case"dialDualChoice":n.details="Choosing a die to reroll (Dial of Dual Choice)";break;case"staffWinterDiscard":n.details="Discarding a card (Staff of Winter)";break;case"chronoRingChoice":n.details="Choosing a card (Chrono Ring)";break;case"urmianChoice":n.details="Choosing a card (Urmian)";break;case"urmianSacrifice":n.details="Sacrificing a card (Urmian)";break;case"keepOrDiscardRagfield":n.details="Choosing to keep or discard a card (Ragfield)";break;case"craftyChooseOpponent":n.details="Choosing an opponent (Crafty)";break;case"crafyChoice":n.details="Choosing a card to give to an opponent (Crafty)";break;case"discardMinion":n.details="Discarding an Air energy (Minion of the Elements)";break;case"chaliceEternity":n.details="Placing an energy on Chalice of Eternity";break;case"chaliceEternityChoice":n.details="Choosing a card to summon for free (Chalice of Eternity)";break;case"carnivoraChoice":n.details="Choosing to keep or replace this card (Carnivora)";break;case"igramulChoice":n.details="Naming a card (Igramul the Resolute)";break;case"igramulDiscard":n.details="Choosing to sacrifice Shield of Zira instead (Igramul the Resolute)";break;case"crystalTitanChoice":n.details="Choosing an opponent Power card to sacrifice (Crystal Titan)";break;case"escapedChoice":n.details="Choosing to get the last card drawn (Escaped Prisoner)";break;case"steadfastDie":n.details="Choosing a die to reroll (Steadfast Die)";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_seasons=seasons,sechsnimmt={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/473.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"cardChoice":n.state="Picking a card to play";break;case"smallestCard":n.state="Taking a row";break;case"multipleChoice":n.state="Choosing where to place a card";break;case"pickCard":n.state="Picking a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_sechsnimmt=sechsnimmt,secretmoon={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/474.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},S_secretmoon=secretmoon,seikatsu={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/475.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Placing a tile";break;case"soloFirstTile":n.state="Placing the first tile";break;case"soloSecondTile":n.state="Placing the second tile";break;case"soloKoiChoice":n.state="Keeping a tile";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_seikatsu=seikatsu,senet={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/476.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Moving a stone";break;case"waterTurn":n.state="Drowning in the House of Waters...";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_senet=senet,sensei={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/477.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectAndMove":n.state="Moving a stone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_sensei=sensei,senshi={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/478.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},S_senshi=senshi,seotda={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/479.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"cardReveal":n.state="Revealing a card";break;case"raiseBet":n.state="Betting or folding";break;case"changeCard":n.state="Changing cards";break;case"selectHandRank":n.state="Selecting hand rank";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_seotda=seotda,setup={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/480.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},S_setup=setup,sevens={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/481.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_sevens=sevens,sevenwonders={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/482.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseWonderSide":n.state="Choosing a wonder side";break;case"playerTurn":n.state="Choosing a card to play";break;case"pickDiscard":n.state="Picking a card from the discard pile";break;case"playerSeventhCard":n.state="Playing their last card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_sevenwonders=sevenwonders,sevenwondersarchitects={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/483.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Performing an action";break;case"chooseCard":n.state="Choosing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_sevenwondersarchitects=sevenwondersarchitects,sevenwondersduel={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/484.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"gameEnd":n.state="Viewing game results";break;case"selectWonder":n.state="Selecting a wonder";break;case"nextAge":n.state="Preparing next age";break;case"selectStartPlayer":n.state="Selecting the start player";break;case"playerTurn":n.state="Choosing an action";break;case"conspire":case"chooseConspireRemnantPosition":case"chooseConspiratorAction":n.state="Conspiring";break;case"senateActions":n.state="Choosing a senate action";break;case"placeInfluence":n.state="Adding influence to the Senate";break;case"moveInfluence":n.state="Moving influence in the Senate";break;case"removeInfluence":n.state="Removing influence from the Senate";break;case"triggerUnpreparedConspiracy":n.state="Triggering an unprepared conspiracy";break;case"constructLastRowBuilding":case"constructBuildingFromBox":n.state="Building a building";break;case"destroyConstructedWonder":n.state="Destroying a constructed wonder";break;case"lockProgressToken":n.state="Locking a progress token";break;case"moveDecree":n.state="Moving a decree";break;case"chooseProgressToken":n.state="Choosing a progress token";break;case"swapBuilding":n.state="Swapping a building with another player";break;case"takeBuilding":n.state="Taking a building from another player";break;case"takeUnconstructedWonder":n.state="Taking an unconstructed wonder from another player";break;case"chooseAndPlaceDivinity":n.state="Choosing and placing a Divinity";break;case"deconstructWonder":n.state="Deconstructing a wonder";break;case"constructWonderWithDiscardedBuilding":n.state="Constructing a wonder with a discarded building";break;case"chooseEnkiProgressToken":n.state="Choosing an Enki progress token";break;case"placeSnakeToken":n.state="Placing a snake token";break;case"discardAgeCard":n.state="Discarding an age card";break;case"placeMinervaToken":n.state="Placing a Minerva token";break;case"discardMilitaryToken":n.state="Discarding a military token";break;case"applyMilitaryToken":n.state="Applying a military token";break;case"chooseDivinityDeck":case"chooseDivinityFromTopCards":n.state="Choosing a Divinity card";break;case"chooseOpponentBuilding":n.state="Choosing an opponent's building to discard";break;case"chooseProgressTokenFromBox":n.state="Choosing a progress token from the box";break;case"chooseDiscardedBuilding":n.state="Choosing a discarded building to build";break;case"nextPlayerTurn":n.state="Counting end of game victory points"}else n.state=`Waiting for ${i.name}`;return n}},S_sevenwondersduel=sevenwondersduel,sheepboombah={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/485.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"setupTurn":n.state="Placing a sheep";break;case"playerTurn":case"choiceCard":case"playerEnd":n.state="Taking an action";break;case"reactCard":n.state="Reacting to a card";break;case"reactPeep":n.state="Reacting to a peep";break;case"reactBump":n.state="Reacting to a bump";break;case"reactMine":n.state="Reacting to a mine";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_sheepboombah=sheepboombah,shiftingstones={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/486.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Selecting a pattern card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_shiftingstones=shiftingstones,siam={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/487.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"gameOverAreYouSure":case"gameOverConfirmation":n.state="Confirming game result";break;case"state_200":n.state="Selecting a piece";break;case"state_201":n.state="Moving a piece";break;case"state_202":n.state="Turning a piece";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_siam=siam,signorie={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/488.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"playerTurnHelper":n.state="Performing helper actions";break;case"playerTurnReward":n.state="Picking a reward";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_signorie=signorie,silo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/489.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Moving a checker";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_silo=silo,similo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/490.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"play_clue":n.state="Playing a clue";break;case"guess_character":n.state="Guessing a character";break;case"referee_confirm":n.state="Referee confirming";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_similo=similo,simplicity={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/491.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},S_simplicity=simplicity,sixtyone={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/492.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"multiplayerPhase":n.state="Taking a turn";break;case"chooseArea":n.state="Choosing an area";break;case"chooseDie":case"chooseDieLocation":n.state="Choosing a die";break;case"chooseCrossLocation":n.state="Choosing a location for the joker";break;case"chooseLeaveDie":n.state="Choosing a die for leaves score";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_sixtyone=sixtyone,skat={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/493.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},S_skat=skat,skull={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/494.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a disc or issuing a challenge";break;case"bidTurn":n.state="Increasing the bid or passing";break;case"reveal":n.state="Revealing a disc";break;case"initialCoaster":n.state="Playing a disc";break;case"discardCoaster":n.state="Discarding a disc";break;case"chooseStartPlayer":n.state="Choosing a start player";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_skull=skull,smallislands={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/495.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},S_smallislands=smallislands,sobek={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/496.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},S_sobek=sobek,sobektwoplayers={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/497.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"deben":n.state="Choosing whether to take a Deben token";break;case"orientation":n.state="Choosing the orientation of the Ankh pawn";break;case"pickResource":n.state="Choosing a resource for the set";break;case"characterArchitect":case"pirogue":n.state="Choosing a Pirogue token";break;case"pirogue04":n.state="Choosing a tile for the opponent to take";break;case"pirogue07":n.state="Choosing a resource to add the Pirogue token to";break;case"characterMerchant":case"playerTurn2":n.state="Choosing a tile from the market";break;case"characterVizier":n.state="Choosing a tile from the opponent's Corruption board";break;case"characterThief":n.state="Choosing a tile from the opponent's hand";break;case"characterHighPriest":n.state="Choosing a type to remove from the Corruption board";break;case"characterCourtesan":n.state="Choosing a set to add tiles to";break;case"characterScribe":n.state="Discarding tiles";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_sobektwoplayers=sobektwoplayers,solarstorm={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/498.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"playerMove":n.state="Choosing a destination";break;case"playerScavenge":n.state="Rolling the dice";break;case"playerScavengePickCards":n.state="Choosing a resource card";break;case"playerShare":n.state="Sharing resources";break;case"playerRepair":n.state="Repairing using resources";break;case"playerDivert":n.state="Diverting power";break;case"playerRoomCrewQuarter":n.state="Moving a meeple";break;case"playerRoomCargoHold":n.state="Reordering resource cards";break;case"playerRoomMessHall":n.state="Taking, giving or swapping a resource card (Mess Hall)";break;case"playerRoomEngineRoom":n.state="Swapping a resource card (Engine Room)";break;case"playerRoomRepairCentre":n.state="Repairing a room";break;case"playerRoomArmoury":n.state="Placing protection tokens (Armoury)";break;case"playerRoomBridge":n.state="Reordering damage cards (Bridge)";break;case"pickResources":n.state="Picking resource cards";break;case"playerAskActionTokensPlay":n.state="Using action tokens";break;case"playerDiscardResources":n.state="Discarding resource cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_solarstorm=solarstorm,solo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/499.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"playerChooseColor":n.state="Choosing a color";break;case"playerChoosePlayer":n.state="Exchanging cards with another player";break;case"playerHasToDraw":n.state="Drawing cards";break;case"playerTurnAfterDraw":n.state="Playing a card or passing";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_solo=solo,solowhist={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/500.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerBid":n.state="Bidding or passing";break;case"annulHand":n.state="Confirming annulment of hand";break;case"upgradeToSolo":n.state="Upgrading bid to solo";break;case"eldestCanCop":n.state="Deciding whether to bid Cop or pass";break;case"chooseTrumpSuit":n.state="Choosing a trump suit";break;case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_solowhist=solowhist,soluna={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/501.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_soluna=soluna,soulaween={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/502.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"waitClientCardInformation":n.state="Choosing a character";break;case"playerTurn":n.state="Playing a card";break;case"checkBoard":n.state="Checking board";break;case"selectPossible":case"waitClientPossible":n.state="Selecting a possible action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_soulaween=soulaween,spacebase={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/503.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickSector":n.state="Picking a sector";break;case"startingCards":n.state="Picking starting cards";break;case"setDie":case"setDie2":n.state="Setting die value";break;case"rerollDice":n.state="Rerolling dice";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_spacebase=spacebase,spaceempires={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/504.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},S_spaceempires=spaceempires,spacestationphoenix={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/505.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"stateDraftShip":n.state="Drafting a ship";break;case"stateDraftHub":n.state="Drafting a hub";break;case"stateSetupHubShip":n.state="Choosing additional starting ships";break;case"stateSetupHubConstruct":n.state="Building a starting sector";break;case"stateSetupDiplomacyAdv":n.state="Advancing on the diplomacy track";break;case"statePlayerTurn":n.state="Taking a turn";break;case"stateDiplomacy":n.state="Choosing a diplomacy reward";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_spacestationphoenix=spacestationphoenix,spades={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/506.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"actionBidding":n.state="Bidding";break;case"cardExchange":n.state="Exchanging cards";break;case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_spades=spades,sparts={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/507.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},S_sparts=sparts,spiritsoftheforest={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/508.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"take_tile":n.state="Taking a spirit tile";break;case"place_gemstone":n.state="Placing a gemstone";break;case"discard_gemstone":n.state="Discarding a gemstone";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_spiritsoftheforest=spiritsoftheforest,spiteandmalice={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/509.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_spiteandmalice=spiteandmalice,splashdown={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/510.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Rolling the dice";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_splashdown=splashdown,splendor={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/511.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getUserPlayerId(e),s=await getPlayerData(e,t),i={smallImageKey:getPlayerAvatar(r),smallImageText:`Score: ${getPlayerScore(r)}`};if(t===r)switch(a){case"playerTurn":i.state="Choosing an action";break;case"playerDiscard":i.state="Discarding excess gems";break;case"playerPass":i.state="Passing";break;case"chooseCard":i.state="Choosing a noble";break;case"gameEnd":i.state="Viewing game results"}else i.state=`Waiting for ${s.name}`;return i}},S_splendor=splendor,splito={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/512.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"turn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_splito=splito,splits={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/513.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"tilePlacement":n.state="Placing a tile";break;case"stackPlacement":n.state="Choosing a starting position";break;case"split":n.state="Splitting a stack";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_splits=splits,spots={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/514.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"statePlayerTurn":n.state="Performing an action";break;case"statePerformTrick":n.state="Performing a trick";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_spots=spots,spyrium={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/515.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},S_spyrium=spyrium,squadro={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/516.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Moving a piece";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_squadro=squadro,starfluxx={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/517.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playCard":n.state="Playing cards";break;case"enforceHandLimitForOthers":case"enforceHandLimitForSelf":n.state="Discarding cards";break;case"enforceKeepersLimitForOthers":case"enforceKeepersLimitForSelf":n.state="Discarding keepers";break;case"goalCleaning":n.state="Discarding a goal";break;case"actionResolve":case"actionResolveForOther":n.state="Resolving an action";break;case"freeRuleResolve":n.state="Resolving a free rule";break;case"creeperResolveTurnStart":case"creeperResolveInPlay":n.state="Resolving a creeper";break;case"tempHandPlay":n.state="Playing a card from their hand";break;case"surpriseCounterPlay":n.state="Playing a surprise counter";break;case"surpriseCancelSurprise":n.state="Cancelling a surprise";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_starfluxx=starfluxx,steamrollers={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/518.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"modifyDice":case"plusOrMinusDice":case"flipOrThrowDice":n.state="Modifying dice";break;case"askForBlock":n.state="Allowing or stealing dice";break;case"proposeOrderTile":n.state="Acquiring an order tile";break;case"buyStartingTile":n.state="Acquiring a starting tile";break;case"startingImproveEngine":n.state="Improving an engine";break;case"startingBuyActionTile":n.state="Acquiring an action tile";break;case"startingDrawPath":n.state="Drawing a path";break;case"startingExtraGood":n.state="Choosing a starting city";break;case"proposeReroll":n.state="Rerolling Olive dice";break;case"proposePreventRemove":n.state="Preventing Olive from removing a good or pass";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_steamrollers=steamrollers,steamworks={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/519.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},S_steamworks=steamworks,stella={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/520.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"associate":n.state="Associating cards with the clue word";break;case"reveal":n.state="Revealing a selected card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_stella=stella,stirfryeighteen={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/521.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerAction":n.state="Taking an action";break;case"askTasteTest":n.state="Asking for a taste test";break;case"askCardType":n.state="Informing about a discarded protein card";break;case"playerReduce":n.state="Reducing hand to 3 cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_stirfryeighteen=stirfryeighteen,stockpile={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/522.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"Supply1":n.state="Playing a market card Face-Up";break;case"Supply2":n.state="Playing a market card Face-Down";break;case"Demand":n.state="Placing a bidding meeple";break;case"Action":n.state="Playing an action card";break;case"Selling":n.state="Selling shares";break;case"DecideMovement2":case"DecideMovement":n.state="Deciding to declare owned shares to receive dividends";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_stockpile=stockpile,stoneage={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/523.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeWorkers":n.state="Placing workers";break;case"useWorkers":n.state="Using workers";break;case"resourceProduction":case"resourceProductionNoIncrease":n.state="Using tools to increase production";break;case"mammothTaming":n.state="Taming a mammoth";break;case"diceChoice":n.state="Choosing an item";break;case"feedWorkers":n.state="Feeding workers";break;case"insulate":n.state="Insulating a building";break;case"spendGold":n.state="Spending gold for points";break;case"buyCardFaceDown":n.state="Buying a card face down";break;case"animalRewards":n.state="Choosing a reward for fending off wild animals";break;case"mammothWinnerChoice":n.state="Choosing a reward for taming a mammoth";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_stoneage=stoneage,strands={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/524.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerFirstTurn":case"playerTurn":n.state="Covering a space";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_strands=strands,streets={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/525.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"stateSetupGrifter":n.state="Selecting a character";break;case"stateAbandon":n.state="Abandoning a building";break;case"statePlaceTile":n.state="Placing a building";break;case"stateScoreStreet":n.state="Selecting a street to score";break;case"stateBusinessGain":n.state="Selecting a business token";break;case"stateGrifterBusinessGain":n.state="Selecting a business token for the Grifter";break;case"stateEntrepreneurScore":n.state="Selecting a building for the Entrepreneur ability";break;case"stateMovePeople":n.state="Moving people";break;case"stateGrifterPlaceTile":n.state="Placing a building for the Grifter";break;case"stateGrifterMovePeople":n.state="Moving people for the Grifter";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_streets=streets,superfantasybrawl={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/526.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"showHand":n.state="Looking at their opponent's hand";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_superfantasybrawl=superfantasybrawl,sushigo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/527.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"multiplayerTurn":n.state="Picking a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_sushigo=sushigo,sushigoparty={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/528.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"MenuSelection":n.state="Selecting a menu";break;case"multiplayerTurn":n.state="Picking a card";break;case"multiplayerTurnMenu":n.state="Selecting a card";break;case"multiplayerTurnTakeout":n.state="Selecting cards to flip";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},S_sushigoparty=sushigoparty,tablut={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/529.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"state_200":n.state="Making a move";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tablut=tablut,takaraisland={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/530.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_takaraisland=takaraisland,takenoko={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/531.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"rain":n.state="Growing a bamboo section";break;case"movePanda":case"storm":n.state="Moving the panda";break;case"clouds":n.state="Choosing an improvement from the reserve";break;case"questionmark":n.state="Choosing a weather condition for this turn";break;case"playerTurn":n.state="Taking an action or playing an objective";break;case"playerTurnNoMoreAction":n.state="Playing an objective";break;case"placeIrrigationImmediately":n.state="Placing an irrigation";break;case"placeImprovementImmediately":n.state="Placing an improvement";break;case"moveImprovementStep1":case"moveImprovementStep2":n.state="Moving an improvement";break;case"choosePlots":n.state="Placing a new plot";break;case"moveGardener":n.state="Moving the gardener";break;case"chooseObjective":n.state="Choosing an objective category";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_takenoko=takenoko,talon={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/532.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_talon=talon,taluva={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/533.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_taluva=taluva,tanghulu={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/534.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"roll_dice":n.state="Rolling the dice";break;case"bonus_fruit":n.state="Choosing if to place the drawn fruit or return it to the bag";break;case"caramelize_skewer":n.state="Garnishing a completed stick";break;case"choose_action":n.state="Buying a fruit or going to work";break;case"buy_fruit":n.state="Buying a fruit";break;case"choose_pattern":n.state="Selecting the pattern completed";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tanghulu=tanghulu,tapestry={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/535.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"setupChoice":n.state="Choosing a civilization";break;case"playerTurn":n.state="Taking an action";break;case"civAbility":n.state="Using a civilization ability";break;case"playTapestryCard":n.state="Playing a tapestry card";break;case"upgradeTechnology":n.state="Upgrading a technology";break;case"benefitChoice":case"benefitOption":n.state="Choosing a benefit";break;case"explore":n.state="Exploring";break;case"invent":n.state="Inventing";break;case"conquer":n.state="Conquering";break;case"conquer_trap":n.state="Playing a trap card";break;case"conquer_roll":n.state="Choosing a benefit from one die (conquer)";break;case"research":n.state="Researching";break;case"placeStructure":n.state="Placing a structure";break;case"spaceExploration":n.state="Exploring space";break;case"techBenefit":n.state="Choosing a benefit from one die (technology)";break;case"resourceChoice":n.state="Choosing resources";break;case"trackSelect":n.state="Selecting a cube on an advancement track";break;case"buildingSelect":n.state="Selecting a building";break;case"bonus":n.state="Applying a bonus";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tapestry=tapestry,targi={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/536.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Placing a Targi";break;case"playAction":n.state="Taking an action";break;case"placeCard":n.state="Placing a Tribe card";break;case"showWareCard":n.state="Taking a Goods card from the Caravan";break;case"moveTribu_1":case"moveTribu_2":n.state="Moving a Tribe marker";break;case"tradeForWaresGold":n.state="Trading goods for gold or other goods";break;case"tradeForPoints":n.state="Trading goods or gold for victory points";break;case"endOfTurnLimitResources":n.state="Discarding excess goods and gold";break;case"raid":n.state="Choosing what to lose during the raid";break;case"chooseTribe":n.state="Choosing what to do with a tribe card";break;case"chooseWare":n.state="Choosing which goods to get";break;case"chooseGoldWaresVP":n.state="Choosing to get goods, gold, or victory points";break;case"swapTribesPhase1":case"swapTribesPhase2":n.state="Choosing a Tribe card to swap position with another";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_targi=targi,tashkalar={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/537.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"deckChoice":n.state="Choosing a school";break;case"initialPiecesDuel":case"initialPiecesMelee":n.state="Placing initial pieces";break;case"actionChoice":n.state="Taking an action";break;case"pickPiece":n.state="Picking up a piece";break;case"chooseColorFlare":n.state="Choosing a color for a flare";break;case"chooseColorImpro":n.state="Choosing a color for improvised summoning";break;case"chooseColorLegend":n.state="Choosing a color to score the legend in";break;case"cardChoice":n.state="Choosing a card";break;case"squareChoice":n.state="Choosing a square";break;case"moveChoice":case"pieceChoice":case"directionChoice":n.state="Moving a piece";break;case"orEffects2":case"orEffects3":n.state="Choosing an effect";break;case"chooseOption":n.state="Choosing an option";break;case"frozenChoice":n.state="Choosing a frozen effect";break;case"turnEndHF":n.state="Invoking a flare or claiming a task";break;case"turnEndDM":n.state="Invoking a flare";break;case"chooseColor":n.state="Choosing a color to score the unpaired pieces in";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tashkalar=tashkalar,teatime={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/538.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_teatime=teatime,teotihuacan={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/539.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_teotihuacan=teotihuacan,terramystica={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/540.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_terramystica=terramystica,thatslife={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/541.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerRoll":n.state="Rolling the die";break;case"playerMove":n.state="Moving a piece";break;case"playerSteal":n.state="Stealing a tile";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_thatslife=thatslife,theboss={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/542.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_theboss=theboss,thebuilders={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/543.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking actions";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_thebuilders=thebuilders,thebuildersantiquity={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/544.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking actions";break;case"endResolution":n.state="Freeing prisoners or refunding loans";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_thebuildersantiquity=thebuildersantiquity,thecrew={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/545.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"pickTask":n.state="Choosing a task";break;case"endMission":n.state="Ending mission";break;case"comm":n.state="Communicating";break;case"distressSetup":n.state="Using the distress signal";break;case"distress":n.state="Choosing a card to pass";break;case"question":n.state="Answering a question";break;case"pickCrew":n.state="Choosing a crew member";break;case"moveTile":n.state="Moving a task token";break;case"giveTask":case"giveTaskConfirmation":n.state="Giving a task to another player";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_thecrew=thecrew,thecrewdeepsea={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/546.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"pickTask":n.state="Choosing a task";break;case"optionTask":n.state="Choosing a prediction for the task";break;case"endMission":n.state="Ending mission";break;case"comm":n.state="Communicating";break;case"distressSetup":n.state="Using the distress signal";break;case"distress":n.state="Choosing a card to pass";break;case"question":n.state="Answering a question";break;case"pickCrew":n.state="Choosing a crew member";break;case"freeAllocation":case"freeAllocationPropose":case"freeAllocationAccept":n.state="Choosing a task bundle";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_thecrewdeepsea=thecrewdeepsea,thegnomesofzavandor={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/547.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"SoilSamples":n.state="Taking soil samples";break;case"ActionPhase":n.state="Performing an action";break;case"SelectGems":n.state="Selecting gems to mine";break;case"Mining2":n.state="Mining gems";break;case"DrawCard":n.state="Drawing a card";break;case"SortCard":n.state="Sorting discarded cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_thegnomesofzavandor=thegnomesofzavandor,theisleofcats={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/548.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"STATE_PHASE_2_EXPLORE_DRAFT":n.state="Choosing cards to keep";break;case"STATE_PHASE_ANYTIME_BUY_CARDS":case"STATE_PHASE_2_BUY_CARDS":n.state="Buying cards";break;case"STATE_PHASE_4_CHOOSE_RESCUE_CARDS_SINGLE":case"STATE_PHASE_4_CHOOSE_RESCUE_CARDS":n.state="Choosing rescue cards";break;case"STATE_FAMILY_RESCUE_CAT":case"STATE_PHASE_4_RESCUE_CAT":n.state="Rescuing cats";break;case"STATE_PHASE_5_RARE_FINDS":n.state="Taking a rare find";break;case"STATE_PHASE_ANYTIME_DRAW_AND_BOAT_SHAPE":case"STATE_PHASE_ANYTIME_DRAW_AND_FIELD_SHAPE":n.state="Placing the drawn shape";break;case"STATE_PHASE_ANYTIME_ROUND":n.state="Playing an Anytime card";break;case"STATE_FAMILY_CHOOSE_LESSONS":n.state="Choosing lesson cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_theisleofcats=theisleofcats,thejellymonsterlab={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/549.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerChooseCards":case"playerLeaveACard":n.state="Leaving a card at a lab";break;case"playerMove":n.state="Moving to a lab or center";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_thejellymonsterlab=thejellymonsterlab,themotherroad={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/550.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"SelectDice":n.state="Selecting a dice combination";break;case"Decision":n.state="Deciding if to pass or to re-roll";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_themotherroad=themotherroad,theninedomains={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/551.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_theninedomains=theninedomains,thermopyles={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/552.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_thermopyles=thermopyles,thirteenclues={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/553.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectCombinaison":n.state="Selecting initial clues";break;case"playerTurn":n.state="Taking an action";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_thirteenclues=thirteenclues,thirtyone={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/554.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_thirtyone=thirtyone,thrive={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/555.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurnSelectPieceToMove":case"playerTurnSelectLocationToMove":n.state="Moving a piece";break;case"playerTurnSelectPieceForPeg1Add":case"playerTurnSelectPegLocationForPeg1Add":case"playerTurnSelectPieceForPeg2Add":case"playerTurnSelectPegLocationForPeg2Add":n.state="Adding a peg";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_thrive=thrive,throneandthegrail={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/556.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking actions";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_throneandthegrail=throneandthegrail,throughtheages={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/557.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_throughtheages=throughtheages,throughtheagesnewstory={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/558.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"bidTerritorySendUnitOrBonus":n.state="Sending units or playing colonization bonus cards";break;case"playerTurn":case"playerTurnFirstTurn":n.state="Taking actions";break;case"buildChoice":n.state="Choosing a build action";break;case"bidTerritory":n.state="Bidding for a territory";break;case"bidTerritorySendUnit":n.state="Sending units to a territory";break;case"playerTurnPolitic":n.state="Taking a political action";break;case"lossBlueToken":n.state="Choosing from where to take blue tokens";break;case"aggressionMaySacrifice":n.state="Defending against aggression";break;case"pactMayAccept":n.state="Accepting a pact";break;case"discardMilitaryCards":n.state="Discarding military cards";break;case"mustBuildCivil":n.state="Building or upgrading an urban building";break;case"mustBuildProduction":n.state="Building or upgrading a mine or farm";break;case"freeWarrior":n.state="Building a warrior unit";break;case"freeTemple":n.state="Building a temple";break;case"chooseReservesGain":case"freeFoodResourceCustom":case"freeFoodResource":n.state="Gaining food or resources";break;case"mustBuildWonder":n.state="Building a wonder step";break;case"lossPopulation":n.state="Choosing which yellow token to lose";break;case"lossBuilding":n.state="Choosing which building to lose";break;case"mustPlayTechnology":n.state="Playing a technology card";break;case"mustUpgradeBuilding":n.state="Upgrading a building";break;case"mustBuildMilitary":n.state="Building a military unit";break;case"wonderForFree":n.state="Building stages of Wonder";break;case"christopherColumbus":n.state="Playing a territory card (Christopher Columbus)";break;case"stealFoodResource5":case"stealFoodResource7":case"stealFoodResource":n.state="Stealing food or resources";break;case"destroyBuilding":n.state="Destroying an urban building";break;case"payResourceFood":n.state="Paying food or resources";break;case"pickCardsFromRow":case"pickCardsFromRowContinue":n.state="Picking cards from the card row";break;case"ravagesOfTime":n.state="Ravaging a wonder";break;case"annex":n.state="Annexing a territory";break;case"lossColony":n.state="Choosing a colony to lose";break;case"stealTechnology":n.state="Stealing a technology";break;case"developmentOfCivilization":n.state="Developing a technology or building";break;case"homerGiveWonderHappyFace":n.state="Giving a wonder an extra happy face";break;case"infiltrate":n.state="Destroying a leader or wonder";break;case"churchill":n.state="Gaining culture or science";break;case"lossYellowToken":n.state="Choosing from where to take yellow tokens";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_throughtheagesnewstory=throughtheagesnewstory,thurnandtaxis={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/559.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"getCard":n.state="Drawing a card";break;case"discardCards":n.state="Discarding cards";break;case"getCardOrReplaceCards":n.state="Drawing a card or using the administrator";break;case"getSecondCard":n.state="Drawing a second card (postmaster)";break;case"getSecondCardOrPlayCard":n.state="Drawing a second card (postmaster) or playing a card";break;case"playCard":case"playSecondCard":n.state="Playing a city card";break;case"playSecondCardOrScoreRouteWithCartwright":n.state="Playing a second city card (postal carrier) or placing houses and closing the route (with cartwright)";break;case"scoreRoute":n.state="Placing houses and closing the route";break;case"playSecondCardOrScoreRoute":n.state="Playing a second city card (postal carrier) or placing houses and closing the route";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_thurnandtaxis=thurnandtaxis,tichu={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/560.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"grandTichuBets":n.state="Betting Grand Tichu";break;case"giveCards":n.state="Giving cards to other players";break;case"showPassedCards":n.state="Accepting cards from other players";break;case"playComboOpen":n.state="Playing an opening card combination";break;case"playCombo":n.state="Playing a card combination";break;case"playBomb":n.state="Playing a bomb";break;case"phoenixPlay":n.state="Playing a phoenix combination";break;case"mahjongPlay":n.state="Making a wish";break;case"confirmTrick":n.state="Collecting the trick";break;case"chooseDragonGift":n.state="Choosing who to give the Dragon trick";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tichu=tichu,tickettoride={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/561.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getUserPlayerId(e),s=await getPlayerData(e,t),i={smallImageKey:getPlayerAvatar(r),smallImageText:`Score: ${getPlayerScore(r)}`};if(t===r)switch(a){case"chooseInitialDestinations":i.state="Choosing initial destinations";break;case"chooseAction":i.state="Choosing an action";break;case"drawSecondCard":i.state="Drawing a train card";break;case"chooseAdditionalDestinations":i.state="Choosing additional destinations";break;case"gameEnd":i.state="Viewing game results"}else i.state=`Waiting for ${s.name}`;return i}},T_tickettoride=tickettoride,tictacmatch={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/562.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tictacmatch=tictacmatch,tigriseuphrates={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/563.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking actions";break;case"supportWar":n.state="Sending war support";break;case"supportRevolt":n.state="Sending revolt support";break;case"warLeader":n.state="Selecting war leader";break;case"multiMonument":case"buildMonument":n.state="Building monument";break;case"pickTreasure":n.state="Taking treasure";break;case"buildCivilizationBuilding":n.state="Building civilization building";break;case"multiWonder":n.state="Selecting wonder center";break;case"wonderScore":n.state="Picking point color from wonder";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tigriseuphrates=tigriseuphrates,tiki={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/564.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"state_100":n.state="Creating a new totem";break;case"state_251":case"state_151":n.state="Moving the Shaman";break;case"state_200":n.state="Creating a new totem or moving an existing one";break;case"state_201":n.state="Moving a totem";break;case"state_202":n.state="Resolving a totem";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tiki=tiki,timemasters={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/565.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"delay":n.state="Delaying a timer";break;case"playCard":n.state="Playing a card";break;case"choice":case"multiChoice":n.state="Making a choice";break;case"pickCard":n.state="Picking a card from the Spheres of Consciousness";break;case"scores":case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_timemasters=timemasters,tinnerstrail={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/566.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"InitialSetup":n.state="Selecting initial Survey Cards";break;case"ActionPhase":n.state="Taking an action";break;case"BuildMine":n.state="Placing a bid";break;case"ExtractOre":n.state="Extracting ore";break;case"DevelopmentActions":n.state="Performing a development action";break;case"SellInvest":n.state="Investing";break;case"EndTurn":n.state="Looking at a face down area tile";break;case"PlaySurveyCard":n.state="Playing a Survey Card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tinnerstrail=tinnerstrail,tinyfarms={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/567.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"pickDie":n.state="Picking a die";break;case"moveFarmer":n.state="Moving a farmer";break;case"collectAnimal":n.state="Collecting an animal";break;case"gameover":case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tinyfarms=tinyfarms,tiwanaku={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/568.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_tiwanaku=tiwanaku,tobago={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/569.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_tobago=tobago,toc={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/570.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerPlay":n.state="Playing a card and moving a pawn";break;case"continueSevenMove":n.state="Continuing to move pawns";break;case"playerDiscard":n.state="Discarding a card";break;case"cardExchange":n.state="Exchanging a card";break;case"charityPlayerDemand":n.state="Demanding a card (charity)";break;case"charityPlayerExchange":n.state="Exchanging a card (charity)";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_toc=toc,toeshambo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/571.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_toeshambo=toeshambo,tokaido={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/572.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTravel":n.state="Traveling";break;case"stopManagement":n.state="Taking an action";break;case"villageStop":n.state="Purchasing souvenirs";break;case"templeStop":n.state="Donating to the temple";break;case"innStopSatsuki":case"innStop":n.state="Purchasing a meal";break;case"multiplayerChooseTraveler":n.state="Choosing a traveler";break;case"neutralTravel":n.state="Moving the neutral traveler";break;case"legendaryObjectStop":n.state="Purchasing a legendary object";break;case"innStopJirocho":case"gamingRoomStop":n.state="Gambling";break;case"amuletStop":n.state="Purchasing an amulet";break;case"encounterStopPrepare":n.state="Choosing an encounter";break;case"innStopChuubeiPay":case"encounterStopPay":n.state="Paying for an encounter";break;case"encounterStopKitoushi":case"innStopHiroshige":case"encounterStopPanoramaChoice":n.state="Choosing a free panorama";break;case"calligraphyStop":n.state="Purchasing a calligraphy";break;case"innStopChuubei":n.state="Making an encounter";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tokaido=tokaido,tournay={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/573.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_tournay=tournay,tranquility={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/574.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_tranquility=tranquility,tranquilitytheascent={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/575.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tranquilitytheascent=tranquilitytheascent,trekkingtheworld={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/576.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"setupAirport":n.state="Setting up an airport";break;case"airport":n.state="Flying to an airport";break;case"moveSelection":n.state="Moving to a location";break;case"moveCard":n.state="Playing trek cards";break;case"choose":n.state="Choosing an action";break;case"draw":n.state="Drawing a card";break;case"tourLess":case"tour":n.state="Playing tour cards";break;case"moveBonus":case"journey":n.state="Playing journey cards";break;case"payJourney":n.state="Paying for journey cards";break;case"chooseCube":case"chooseRow":n.state="Choosing a cube to move";break;case"cubeRegion":n.state="Choosing a souvenir";break;case"swap":n.state="Choosing a player to swap with";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_trekkingtheworld=trekkingtheworld,trektwelve={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/577.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"ready":n.state="Viewing ascent";break;case"assistance":n.state="Choosing an assist";break;case"endAssist":n.state="Discarding an assist";break;case"lastRope":n.state="Playing a rope";break;case"linkMax":n.state="Choosing a link";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_trektwelve=trektwelve,triatri={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/578.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"DecideonFirstplayer":n.state="Deciding on first player";break;case"selectToken":n.state="Selecting a token";break;case"playerTurn":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_triatri=triatri,trickoftherails={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/579.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_trickoftherails=trickoftherails,trio={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/580.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_trio=trio,troggu={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/581.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_troggu=troggu,troyes={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/582.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_troyes=troyes,troyesdice={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/583.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseDice":n.state="Choosing a die";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_troyesdice=troyesdice,trusis={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/584.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_trusis=trusis,tucano={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/585.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerSelectColumn":n.state="Collecting a column of cards";break;case"playerResolveToucans":n.state="Resolving toucans";break;case"playerChooseGift":case"playerResolveGift":n.state="Gifting a card to another player";break;case"playerResolveSteal":n.state="Stealing a card from another player";break;case"playerAssignJoker":n.state="Assigning a joker to a set of fruit";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tucano=tucano,tumbleweed={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/586.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"initialTurn":n.state="Placing initial stacks";break;case"swapTurn":n.state="Deciding whether to swap";break;case"playerTurn":case"confirmMove":n.state="Placing a stack";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tumbleweed=tumbleweed,turncoats={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/587.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_turncoats=turncoats,turnthetide={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/588.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectCards":n.state="Selecting a weather card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_turnthetide=turnthetide,twentyfourseven={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/589.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_twentyfourseven=twentyfourseven,twinpalms={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/590.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"bidTurn":n.state="Bidding";break;case"playerTurn":n.state="Playing cards";break;case"wildSelect":n.state="Selecting a wild suit";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_twinpalms=twinpalms,twintinbots={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/591.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},T_twintinbots=twintinbots,tzolkin={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/592.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseWealthTiles":n.state="Choosing wealth tiles";break;case"playerTurn":n.state="Placing or picking up a worker";break;case"placeWorker":n.state="Placing a worker";break;case"pickUpWorker":n.state="Picking up a worker";break;case"harvest":n.state="Harvesting corn or wood";break;case"technologyUpgrade":n.state="Upgrading a technology";break;case"construct":n.state="Constructing a building";break;case"constructChooseSparedResources":n.state="Choosing a non required resource";break;case"tikal4":n.state="Constructing two buildings or a monument";break;case"tikal5":n.state="Climbing up two temples";break;case"technologyUpgradeFree":n.state="Upgrading a technology for free";break;case"trade":n.state="Exchanging corn and resources";break;case"uxmal4":n.state="Constructing a building with corn";break;case"anyAction":n.state="Performing an action on a gear";break;case"resourceReward":n.state="Receiving a resource";break;case"templeReward":n.state="Climbing up a temple";break;case"freeTechnology":n.state="Advancing one level in any technology for free";break;case"constructWithoutArchitecture":n.state="Constructing a building without architecture bonuses";break;case"theology2":n.state="Climbing up a temple for a resource";break;case"turnWheel":n.state="Choosing to advance the calendar 2 days";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},T_tzolkin=tzolkin,ultimaterailroads={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/593.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},U_ultimaterailroads=ultimaterailroads,ultimatetictactoe={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/594.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an area";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},U_ultimatetictactoe=ultimatetictactoe,unclechestnuttablegype={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/595.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},U_unclechestnuttablegype=unclechestnuttablegype,unconditionalsurrender={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/596.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"setup":case"countrySetup":n.state="Setting up the game";break;case"declareWar":n.state="Declaring war";break;case"transferPP":n.state="Transferring production points";break;case"nuclearStrike":n.state="Launching a nuclear strike";break;case"strategicCombat":n.state="Committing events";break;case"strategicMovement":n.state="Performing a strategic movement";break;case"scenarioSpecific":n.state="Performing scenario specific actions";break;case"ActionsSubPhase":n.state="Performing actions to move and fight";break;case"voluntaryElimination":n.state="Voluntarily eliminating units";break;case"replacements":case"upgrades":n.state="Improving units";break;case"USSRMotorizedGuards":n.state="Upgrading units to USSR Motorized Guards";break;case"mobilization":n.state="Mobilizing units";break;case"diplomacy":n.state="Performing diplomacy actions";break;case"politicalSuccess":case"politicalRestricted":case"politicalFailure":case"politicalUnrestricted":n.state="Performing a political action";break;case"specialMobilization":n.state="Performing a special mobilization";break;case"airActions":n.state="Performing air actions";break;case"airCombat":n.state="Committing events for air combat";break;case"escort":case"escortStrike":n.state="Choosing an escort";break;case"interceptionCombat2":case"interceptionCombat":n.state="Committing events for interception";break;case"airStrike":n.state="Considering an air strike";break;case"airStrikeCombat":n.state="Committing events for an air strike";break;case"bombingRun":n.state="Considering a bombing run";break;case"groundActions":n.state="Performing ground actions";break;case"enterFort":n.state="Entering a fortification";break;case"displacement":n.state="Evacuating a unit";break;case"mobileAttack":n.state="Considering an attack";break;case"groundCombat":n.state="Committing events for ground combat";break;case"mobileAttackRetreat":n.state="Retreating from combat";break;case"mobileAttackAdvance":n.state="Advancing after combat";break;case"mulberry":n.state="Placing a Mulberry marker";break;case"navalRebaseAfterInvasion":n.state="Rebasing an invasion fleet";break;case"convoyChoice":n.state="Choosing a convoy";break;case"navalActions":n.state="Performing naval actions";break;case"interception":n.state="Considering intercepting an action";break;case"abortInvasion":n.state="Aborting an amphibious invasion";break;case"conditional":n.state="Performing a conditional mobilization";break;case"emergencyShipping":n.state="Performing emergency shipping";break;case"repatriation":n.state="Repatriating units";break;case"homeDefenseNotSatisfied":n.state="Satisfying home defense";break;case"homeDefenseNotSatisfiedCheck":n.state="Checking home defense";break;case"placeEvent":case"placeEvent2":n.state="Placing a marker";break;case"supplyPhase":n.state="Tracing supply lines";break;case"groundSupply":n.state="Tracing ground supply lines";break;case"seaSupply":n.state="Tracing sea supply lines";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},U_unconditionalsurrender=unconditionalsurrender,unitedsquare={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/597.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Placing a square";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},U_unitedsquare=unitedsquare,uptown={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/598.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a tile";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},U_uptown=uptown,vaalbara={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/599.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Playing a card";break;case"askFighter":n.state="Revealing a Fighter";break;case"playerLand":n.state="Taking a Land card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},V_vaalbara=vaalbara,vegetables={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/600.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},V_vegetables=vegetables,veggiegarden={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/601.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerpick":n.state="Picking a veggie from the harvest";break;case"selectTarget":n.state="Selecting a target for the card effect";break;case"selectDestination":n.state="Selecting a destination for the card effect";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},V_veggiegarden=veggiegarden,vektorace={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/602.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"firstPlayerPositioning":case"flyingStartPositioning":n.state="Choosing starting position";break;case"tokenAmountChoice":n.state="Choosing starting tokens";break;case"greenLight":n.state="Choosing starting gear vector";break;case"gearVectorPlacement":n.state="Placing gear vector";break;case"boostPrompt":n.state="Choosing boost";break;case"boostVectorPlacement":n.state="Using boost";break;case"carPlacement":n.state="Placing car";break;case"pitStop":n.state="Refilling tokens";break;case"attackManeuvers":n.state="Performing attack maneuvers";break;case"boxBoxPromt":n.state="Calling BoxBox";break;case"futureGearDeclaration":n.state="Declaring future gear";break;case"emergencyBrake":n.state="Rotating car after emergency brake";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},V_vektorace=vektorace,veletas={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/603.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"placeShooters":n.state="Placing initial shooters";break;case"playerTurn":n.state="Taking a shot";break;case"placeStones":n.state="Placing initial stones";break;case"pieRule":n.state="Deciding to swap sides or place shooters";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},V_veletas=veletas,veronatwist={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/604.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"PlaceCharacters":n.state="Placing characters";break;case"ChooseCharacters":n.state="Choosing characters";break;case"MoveCharacters":n.state="Moving a character";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},V_veronatwist=veronatwist,viamagica={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/605.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"chooseInitCards":n.state="Choosing starting portal cards";break;case"placeGem":n.state="Placing a crystal";break;case"completeCard":n.state="Completing a portal card";break;case"resolvePortalCount":n.state="Choosing portal card reward";break;case"exPlayGem":n.state="Placing extra crystal";break;case"chooseNewCardBonus":n.state="Choosing new portal card";break;case"completePortalBonus":n.state="Opening a bonus portal";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},V_viamagica=viamagica,villagers={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/606.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"draftPhase":n.state="Drafting a villager";break;case"buildPhase":n.state="Building a villager";break;case"draftUpdateRoad2P":n.state="Adding a coin to a villager on the road";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},V_villagers=villagers,viticulture={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/607.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"mamaPapaChoose":n.state="Choosing mama and papa";break;case"papaOptionChoose":n.state="Choosing papa option";break;case"springChooseWakeup":n.state="Choosing wake-up row";break;case"seasonWorkers":n.state="Placing a worker";break;case"chooseVisitorCardDraw":case"fallChooseCard":n.state="Drawing a visitor card";break;case"plant":n.state="Planting a field";break;case"makeWine":n.state="Making wine";break;case"playYellowCard":n.state="Playing a summer visitor card";break;case"playBlueCard":n.state="Playing a winter visitor card";break;case"fillOrder":n.state="Filling a wine order";break;case"chooseCards":n.state="Choosing cards";break;case"chooseOptions":n.state="Choosing an option";break;case"executeLocation":n.state="Executing a location effect";break;case"playCardSecondOption":n.state="Playing a visitor card";break;case"takeActionPrev":n.state="Taking an action in a previous season";break;case"allBuild":n.state="Building a structure";break;case"allChoose":n.state="Exchanging resources";break;case"allPlant":n.state="Planting a vine card";break;case"allGiveCard":n.state="Giving a card";break;case"discardVines":n.state="Discarding vine cards";break;case"discardCards":n.state="Discarding excess cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},V_viticulture=viticulture,volto={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/608.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},V_volto=volto,vultureculture={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/609.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectCard":n.state="Playing a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},V_vultureculture=vultureculture,warchest={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/610.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"draftUnit":n.state="Drafting a unit";break;case"selectUnit":n.state="Selecting a unit";break;case"secondActions":case"unitSelected":n.state="Selecting an action";break;case"askAttacked":case"afterChooseVictimAttack":n.state="Selecting a unit to remove";break;case"decreeSelected":case"decreeSecondActions":n.state="Selecting a decree action";break;case"spyDecree":n.state="Discarding a coin (Spy Decree)";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},W_warchest=warchest,welcometo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/611.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":case"chooseCards":n.state="Picking a pair of construction cards";break;case"applyTurns":n.state="Viewing player actions";break;case"writeNumber":n.state="Writing a house number";break;case"actionSurveyor":n.state="Building a fence";break;case"actionEstate":n.state="Increasing the value of an estate";break;case"actionBis":n.state="Duplicating a house number";break;case"actionPark":n.state="Building a park";break;case"actionPool":n.state="Building a pool";break;case"actionTemp":n.state="Crossing off a box from the temp agency";break;case"choosePlan":case"validatePlan":n.state="Validating a plan";break;case"askReshuffle":n.state="Reshuffling the deck";break;case"confirmTurn":n.state="Confirming turn";break;case"waitOthers":n.state="Waiting for other players";break;case"buildRoundabout":n.state="Building a roundabout";break;case"iceCream":n.state="Moving an ice cream truck";break;case"computeScores":n.state="Computing scores";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},W_welcometo=welcometo,welcometonewlasvegas={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/612.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"soloChoice":n.state="Choosing an ACME opponent";break;case"playerTurn":n.state="Picking a pair of casino cards";break;case"borrowChoice":n.state="Choosing whether to borrow from the bank";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},W_welcometonewlasvegas=welcometonewlasvegas,werewolves={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/613.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},W_werewolves=werewolves,whisttwentytwo={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/614.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},W_whisttwentytwo=whisttwentytwo,wingspan={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/615.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getUserPlayerId(e),s=await getPlayerData(e,t),i={smallImageKey:getPlayerAvatar(r),smallImageText:`Score: ${getPlayerScore(r)}`};if(t===r)switch(a){case"gameSetup":i.state="Loading";break;case"playerInitialDiscard":i.state="Selecting initial birds";break;case"playerNormalTurn":i.state="Choosing an action";break;case"playerDrawBirds":i.state="Drawing birds";break;case"playerPowerWhite":case"playerPowerBrown":case"playerPowerPink":case"playerPowerAllPlayers":case"processActionEffect":case"processPowerEffectWhite":case"processPowerEffectBrown":case"processPowerEffectPink":i.state="Activating a power";break;case"playerGainFromFeeder":i.state="Gaining food from the bird feeder";break;case"playerDiscardBird":i.state="Discarding a bird";break;case"gameEnd":i.state="Viewing game results"}else i.state=`Waiting for ${s.name}`;return i}},W_wingspan=wingspan,wizard={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/616.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};return t===s||"activeplayer"!==r?"gameEnd"===a&&(n.state="Viewing game results"):n.state=`Waiting for ${i.name}`,n}},W_wizard=wizard,worldwidetennis={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/617.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"serverTurn":n.state="Playing a serve card";break;case"playerMove":n.state="Moving or giving up a point";break;case"chooseCard":n.state="Playing a card";break;case"chooseSide":n.state="Choosing a side";break;case"playerReplacement":n.state="Moving a player";break;case"changeEnds":n.state="Recovering, focusing and elaborating a strategy";break;case"multiDiscardExtraCards":case"discardExtraCards":n.state="Discarding some cards";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},W_worldwidetennis=worldwidetennis,xiangqi={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/618.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Moving a piece";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},X_xiangqi=xiangqi,yaniv={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/619.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"throwTurn":n.state="Playing a card combination";break;case"pickupTurn":case"slapdownTurn":n.state="Drawing or picking up a card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Y_yaniv=yaniv,yatzy={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/620.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getUserPlayerId(e),s=await getPlayerData(e,t),i={smallImageKey:getPlayerAvatar(r),smallImageText:`Score: ${getPlayerScore(r)}`};if(t===r)switch(a){case"playerTurn":i.state="Rolling dice";break;case"gameEnd":i.state="Viewing game results"}else i.state=`Waiting for ${s.name}`;return i}},Y_yatzy=yatzy,yinyang={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/621.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"buildDominos":n.state="Building dominos";break;case"startOfTurn":n.state="Starting turn";break;case"movePiece":n.state="Moving a piece";break;case"applyLaw":n.state="Applying a law";break;case"adaptDomino":n.state="Adapting a domino";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Y_yinyang=yinyang,yokai={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/622.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurnPeekCards":n.state="Peeking at Yokaï cards";break;case"playerTurnMoveCard":n.state="Moving a Yokaï card";break;case"playerTurnPlayHint":n.state="Placing a hint card";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Y_yokai=yokai,yokohama={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/623.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"initialOrder":n.state="Selecting initial Order card";break;case"placeAssistantsStep":n.state="Placing assistants";break;case"placeAdjacentAssistant":n.state="Placing an additional assistant";break;case"payForAssistant":n.state="Deciding if paying for presence of other presidents";break;case"movePresidentStep":n.state="Moving president";break;case"removeAssistants":n.state="Removing assistants";break;case"payForPresident":n.state="Paying for moving president";break;case"sellImports":n.state="Selling imports";break;case"complementFaith":n.state="Adding faith";break;case"selectResource":n.state="Selecting resource";break;case"tradeResource":n.state="Trading resource";break;case"warehouseOut":n.state="Taking items out of warehouse";break;case"completePhase":n.state="Completing order";break;case"claimPhase":n.state="Claiming achievement";break;case"agentPhase":n.state="Selecting tile for Agent";break;case"selectOrder":case"selectOrder2":n.state="Acquiring an order";break;case"selectTech":n.state="Selecting a technology";break;case"placeStation":n.state="Placing a station";break;case"moveAssistant":case"moveAssistantTo":n.state="Moving an assistant";break;case"selectConstruct":n.state="Selecting a construction";break;case"placePresidentStep":n.state="Placing president";break;case"leaveAssistant":n.state="Leaving an assistant behind";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Y_yokohama=yokohama,yoxii={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/624.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn_Bis":n.state="Playing the totem";break;case"playerTurn":n.state="Playing a token";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Y_yoxii=yoxii,zefiria={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/625.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"meetingTurn":case"startMeeting":n.state="Planning the game";break;case"spiritsTurn":case"selTheNextSpirit":case"selTheSpirit":n.state="Choosing the Spirit";break;case"placeNextSpirit":case"placeSpirit":n.state="Placing the Spirit";break;case"selThePlayer":n.state="Choosing the First Player";break;case"playerTurn":n.state="Moving the Spirit";break;case"hideSpirit":n.state="Hiding the Spirit";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Z_zefiria=zefiria,zener={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/626.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"mandatoryChoose":case"mandatoryMove":n.state="Moving a piece (mandatory)";break;case"freeChoose":case"freeMove":n.state="Moving a piece (free)";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Z_zener=zener,zola={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/627.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"selectChecker":case"selectDestination":n.state="Moving a checker";break;case"firstMoveChoice":n.state="Deciding whether to switch colors";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Z_zola=zola,zooloretto={logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/628.png",async getData(e){const a=await getCurrentGameState(e),t=await getActivePlayerId(e),r=await getCurrentGameStateType(e),s=await getUserPlayerId(e),i=await getPlayerData(e,t),n={smallImageKey:getPlayerAvatar(s),smallImageText:`Score: ${getPlayerScore(s)}`};if(t===s||"activeplayer"!==r)switch(a){case"playerTurn":n.state="Taking an action";break;case"PlaceTile":n.state="Placing a tile on a Wagon";break;case"ArrangeZoo":n.state="Arranging tiles in their Zoo";break;case"Move":n.state="Moving an animal or stall tile";break;case"Swap":n.state="Swapping two sets on animals";break;case"Buy":n.state="Buying a tile from an opponent's Barn";break;case"Discard":n.state="Discarding a tile from their Barn";break;case"gameEnd":n.state="Viewing game results"}else n.state=`Waiting for ${i.name}`;return n}},Z_zooloretto=zooloretto,games={abalone:A_abalone,abandonallartichokes:A_abandonallartichokes,abyss:A_abyss,ageofcivilization:A_ageofcivilization,agricola:A_agricola,akeruption:A_akeruption,aknile:A_aknile,akropolis:A_akropolis,alhambra:A_alhambra,almadi:A_almadi,alveole:A_alveole,amyitis:A_amyitis,anachrony:A_anachrony,apocalypseazcc:A_apocalypseazcc,applejack:A_applejack,architectsofthewestkingdom:A_architectsofthewestkingdom,arcticscavengers:A_arcticscavengers,armadora:A_armadora,arnak:A_arnak,artdecko:A_artdecko,artthief:A_artthief,assyria:A_assyria,astra:A_astra,automobiles:A_automobiles,azul:A_azul,babydinosaurrescue:B_babydinosaurrescue,backgammon:B_backgammon,bahamataxi:B_bahamataxi,balloonpop:B_balloonpop,bandada:B_bandada,bandido:B_bandido,bang:B_bang,baolakiswahili:B_baolakiswahili,barbu:B_barbu,barenpark:B_barenpark,barrage:B_barrage,battleforhill:B_battleforhill,battleoflits:B_battleoflits,battleship:B_battleship,belote:B_belote,betta:B_betta,beyondthesun:B_beyondthesun,bids:B_bids,bigmonster:B_bigmonster,bigtimesoccer:B_bigtimesoccer,bigtwo:B_bigtwo,biyi:B_biyi,blackjack:B_blackjack,blaze:B_blaze,bloodrage:B_bloodrage,blooms:B_blooms,blueskies:B_blueskies,bobail:B_bobail,bombay:B_bombay,boomerangaustralia:B_boomerangaustralia,boomerangeurope:B_boomerangeurope,boomerangusa:B_boomerangusa,boop:B_boop,bossquest:B_bossquest,breakthecode:B_breakthecode,briscola:B_briscola,bubbleepop:B_bubbleepop,bug:B_bug,burglebros:B_burglebros,butterfly:B_butterfly,buttons:B_buttons,buyword:B_buyword,cacao:C_cacao,canosa:C_canosa,cantstop:C_cantstop,cantstopexpress:C_cantstopexpress,capereurope:C_capereurope,caravan:C_caravan,carcassonne:C_carcassonne,carcassonnehuntersandgatherers:C_carcassonnehuntersandgatherers,cardiceo:C_cardiceo,caribbeanallfours:C_caribbeanallfours,carnegie:C_carnegie,carrara:C_carrara,castlesofburgundy:C_castlesofburgundy,castlesofcaleira:C_castlesofcaleira,catan:C_catan,catcafe:C_catcafe,caverna:C_caverna,caylus:C_caylus,celestia:C_celestia,century:C_century,cephalopod:C_cephalopod,chakra:C_chakra,checkers:C_checkers,chess:C_chess,chicagoexpress:C_chicagoexpress,chimerastation:C_chimerastation,chinagold:C_chinagold,chinesecheckers:C_chinesecheckers,chocolatefactory:C_chocolatefactory,chromino:C_chromino,cinco:C_cinco,circleoflife:C_circleoflife,cityofthebigshoulders:C_cityofthebigshoulders,clansofcaledonia:C_clansofcaledonia,clashofdecks:C_clashofdecks,classicgo:C_classicgo,cloudcity:C_cloudcity,codexnaturalis:C_codexnaturalis,coinche:C_coinche,coins:C_coins,coloretto:C_coloretto,colorflush:C_colorflush,colorpop:C_colorpop,coltexpress:C_coltexpress,commanderchess:C_commanderchess,concept:C_concept,connectfour:C_connectfour,connectsix:C_connectsix,consonar:C_consonar,conspiracy:C_conspiracy,copenhagen:C_copenhagen,cosmosempires:C_cosmosempires,coupcitystate:C_coupcitystate,coupell:C_coupell,crazyfarmers:C_crazyfarmers,cribbage:C_cribbage,crimezoom:C_crimezoom,crusadersthywillbedone:C_crusadersthywillbedone,cubirds:C_cubirds,cubosaurs:C_cubosaurs,darkagent:D_darkagent,detectivepoker:D_detectivepoker,deus:D_deus,diablo:D_diablo,diams:D_diams,diceathlon:D_diceathlon,dicedtomatoes:D_dicedtomatoes,diceforge:D_diceforge,dicehospital:D_dicehospital,dicehospitaler:D_dicehospitaler,dicesummoners:D_dicesummoners,dicethemepark:D_dicethemepark,dingosdreams:D_dingosdreams,dinnerinparis:D_dinnerinparis,dinosaurteaparty:D_dinosaurteaparty,djambi:D_djambi,dobble:D_dobble,dodo:D_dodo,dontgointhere:D_dontgointhere,dotsandboxes:D_dotsandboxes,downforce:D_downforce,draftcider:D_draftcider,draftosaurus:D_draftosaurus,dragonbridge:D_dragonbridge,dragoncastle:D_dragoncastle,dragonheart:D_dragonheart,dragonkeeper:D_dragonkeeper,dragonline:D_dragonline,dragonwood:D_dragonwood,dronesvsseagulls:D_dronesvsseagulls,dudo:D_dudo,dungeonpetz:D_dungeonpetz,dungeonroll:D_dungeonroll,dungeontwister:D_dungeontwister,earth:E_earth,egocentricworld:E_egocentricworld,eightmastersrevenge:E_eightmastersrevenge,ekonos:E_ekonos,elfenland:E_elfenland,elgrande:E_elgrande,emdomicrocosm:E_emdomicrocosm,eminentdomain:E_eminentdomain,epizodiak:E_epizodiak,equinox:E_equinox,eriantys:E_eriantys,escapefromthehiddencastle:E_escapefromthehiddencastle,evl:E_evl,evogamenoname:E_evogamenoname,explorationwarzone:E_explorationwarzone,factum:F_factum,faifo:F_faifo,fairytrails:F_fairytrails,farmclub:F_farmclub,feastforodin:F_feastforodin,fifteendays:F_fifteendays,fightthelandlord:F_fightthelandlord,finity:F_finity,fistfulofgold:F_fistfulofgold,flamingpyramids:F_flamingpyramids,fleet:F_fleet,florenzacardgame:F_florenzacardgame,flume:F_flume,fluxx:F_fluxx,forbiddenisland:F_forbiddenisland,forex:F_forex,forsale:F_forsale,fortheking:F_fortheking,fourcolorcards:F_fourcolorcards,fractal:F_fractal,frenchtarot:F_frenchtarot,fruitpicking:F_fruitpicking,gaia:G_gaia,gaiaproject:G_gaiaproject,gangofdice:G_gangofdice,gangsta:G_gangsta,gardennation:G_gardennation,gearnpiston:G_gearnpiston,geekoutmasters:G_geekoutmasters,getonboard:G_getonboard,getthemacguffin:G_getthemacguffin,ghostathome:G_ghostathome,giftoftulips:G_giftoftulips,ginkgopolis:G_ginkgopolis,gizmos:G_gizmos,glow:G_glow,gofish:G_gofish,gogoa:G_gogoa,goldwest:G_goldwest,gomoku:G_gomoku,gonutsfordonuts:G_gonutsfordonuts,goodcopbadcop:G_goodcopbadcop,gopher:G_gopher,gorami:G_gorami,grandbazaar:G_grandbazaar,greatwesterntrail:G_greatwesterntrail,grosstarock:G_grosstarock,guildes:G_guildes,guile:G_guile,gyges:G_gyges,hacktrick:H_hacktrick,hadara:H_hadara,hadron:H_hadron,haggis:H_haggis,haiclue:H_haiclue,hanabi:H_hanabi,hanamikoji:H_hanamikoji,handandfoot:H_handandfoot,happycity:H_happycity,hardback:H_hardback,hawaii:H_hawaii,hearts:H_hearts,heckinhounds:H_heckinhounds,herd:H_herd,heroesofhellas:H_heroesofhellas,herooj:H_herooj,herrlof:H_herrlof,hex:H_hex,hive:H_hive,hoarders:H_hoarders,hokito:H_hokito,homesteaders:H_homesteaders,homeworlds:H_homeworlds,hoola:H_hoola,hungariantarokk:H_hungariantarokk,hydroracers:H_hydroracers,hypnosia:H_hypnosia,iceandthesky:I_iceandthesky,icebreaker:I_icebreaker,icecoldicehockey:I_icecoldicehockey,illustori:I_illustori,imhotep:I_imhotep,impasse:I_impasse,imtheboss:I_imtheboss,incangold:I_incangold,innovation:I_innovation,insert:I_insert,intheyearofthedragon:I_intheyearofthedragon,inventors:I_inventors,isaac:I_isaac,itsawonderfulworld:I_itsawonderfulworld,iwari:I_iwari,jaipur:J_jaipur,jekyllvshide:J_jekyllvshide,jumpdrive:J_jumpdrive,jumpgate:J_jumpgate,justdesserts:J_justdesserts,justone:J_justone,k2:K_k2,kabaleo:K_kabaleo,kahuna:K_kahuna,kalah:K_kalah,kami:K_kami,keyflower:K_keyflower,khronos:K_khronos,kingdombuilder:K_kingdombuilder,kingdomino:K_kingdomino,kingdoms:K_kingdoms,kingofthepitch:K_kingofthepitch,kingoftokyo:K_kingoftokyo,kingsguild:K_kingsguild,klaverjassen:K_klaverjassen,kmakici:K_kmakici,koikoi:K_koikoi,konane:K_konane,kqj:K_kqj,krakenup:K_krakenup,krosmasterarena:K_krosmasterarena,krosmasterblast:K_krosmasterblast,kulami:K_kulami,ladyandthetiger:L_ladyandthetiger,ladyschoice:L_ladyschoice,lagranja:L_lagranja,lama:L_lama,lamarcheducrabe:L_lamarcheducrabe,laserreflection:L_laserreflection,lasvegan:L_lasvegan,ledernierpeuple:L_ledernierpeuple,legendraiders:L_legendraiders,lettertycoon:L_lettertycoon,lewisclark:L_lewisclark,libertalia:L_libertalia,lielow:L_lielow,lifeline:L_lifeline,lineae:L_lineae,lineit:L_lineit,linesofaction:L_linesofaction,linkage:L_linkage,littlefactory:L_littlefactory,liverpoolrummy:L_liverpoolrummy,livingforest:L_livingforest,locomomo:L_locomomo,logger:L_logger,lookatthestars:L_lookatthestars,lostcities:L_lostcities,lostexplorers:L_lostexplorers,lostseas:L_lostseas,loveletter:L_loveletter,lox:L_lox,luckynumbers:L_luckynumbers,lumen:L_lumen,luxor:L_luxor,machiavelli:M_machiavelli,madeira:M_madeira,mammalath:M_mammalath,mapmaker:M_mapmaker,marcopolo:M_marcopolo,marcopolotwo:M_marcopolotwo,marrakech:M_marrakech,marram:M_marram,martiandice:M_martiandice,mascarade:M_mascarade,mattock:M_mattock,meadow:M_meadow,mechadream:M_mechadream,medina:M_medina,megalomania:M_megalomania,memoir:M_memoir,mercadodelisboaste:M_mercadodelisboaste,meridians:M_meridians,metromaniab:M_metromaniab,microdojo:M_microdojo,mijnlieff:M_mijnlieff,mindup:M_mindup,minhwatu:M_minhwatu,modten:M_modten,monsterfactory:M_monsterfactory,morocco:M_morocco,mow:M_mow,mrjack:M_mrjack,murusgallicus:M_murusgallicus,mycity:M_mycity,myfirstcastlepanic:M_myfirstcastlepanic,myshelfie:M_myshelfie,nangaparbat:N_nangaparbat,narabi:N_narabi,nautilus:N_nautilus,neutreeko:N_neutreeko,newfrontiers:N_newfrontiers,nextstation:N_nextstation,niagara:N_niagara,nicodemus:N_nicodemus,nidavellir:N_nidavellir,ninemensmorris:N_ninemensmorris,ninetynine:N_ninetynine,ninetynineaddition:N_ninetynineaddition,nippon:N_nippon,noah:N_noah,noirkvi:N_noirkvi,noneshallpass:N_noneshallpass,northwestpassage:N_northwestpassage,notalone:N_notalone,nothanks:N_nothanks,novaluna:N_novaluna,numberdrop:N_numberdrop,nxs:N_nxs,nylonppong:N_nylonppong,oasis:O_oasis,obsession:O_obsession,offtherails:O_offtherails,ohhell:O_ohhell,ohseven:O_ohseven,onceuponaforest:O_onceuponaforest,one:O_one,onitama:O_onitama,oriflamme:O_oriflamme,origin:O_origin,oust:O_oust,outlaws:O_outlaws,painttheroses:P_painttheroses,palace:P_palace,pandemic:P_pandemic,paniclab:P_paniclab,papayoo:P_papayoo,parisconnection:P_parisconnection,parks:P_parks,patchwork:P_patchwork,pedro:P_pedro,penaltychallenge:P_penaltychallenge,pennypress:P_pennypress,pente:P_pente,phat:P_phat,photosynthesis:P_photosynthesis,pi:P_pi,piereighteen:P_piereighteen,pingimus:P_pingimus,piratenkapern:P_piratenkapern,polis:P_polis,pontedeldiavolo:P_pontedeldiavolo,potionexplosion:P_potionexplosion,president:P_president,puertorico:P_puertorico,pugsinmugs:P_pugsinmugs,pylos:P_pylos,pyramidpoker:P_pyramidpoker,pyrgos:P_pyrgos,quantik:Q_quantik,quantum:Q_quantum,quarto:Q_quarto,queenskings:Q_queenskings,quetzal:Q_quetzal,quinque:Q_quinque,quoridor:Q_quoridor,raceforthegalaxy:R_raceforthegalaxy,rage:R_rage,railroadink:R_railroadink,railwaysoftheworld:R_railwaysoftheworld,rainbow:R_rainbow,rainforest:R_rainforest,rallymangt:R_rallymangt,raubbau:R_raubbau,rauha:R_rauha,redsevengame:R_redsevengame,redstone:R_redstone,reflectionsinthelookingglass:R_reflectionsinthelookingglass,regicide:R_regicide,regidice:R_regidice,rememberwhen:R_rememberwhen,resarcana:R_resarcana,restinpeace:R_restinpeace,reversi:R_reversi,riftvalleyreserve:R_riftvalleyreserve,riichimahjong:R_riichimahjong,rive:R_rive,robotsateourpizza:R_robotsateourpizza,rollandbump:R_rollandbump,rolledwest:R_rolledwest,rollforthegalaxy:R_rollforthegalaxy,rollingpins:R_rollingpins,rollintotown:R_rollintotown,rolltothetopjourneys:R_rolltothetopjourneys,roomtwentyfive:R_roomtwentyfive,roppyakken:R_roppyakken,ruhr:R_ruhr,russianrailroads:R_russianrailroads,saboteur:S_saboteur,saintpetersburg:S_saintpetersburg,saintpoker:S_saintpoker,sakura:S_sakura,samarkand:S_samarkand,santorini:S_santorini,sapiens:S_sapiens,sasaki:S_sasaki,schroedingerscats:S_schroedingerscats,scopa:S_scopa,seasaltpaper:S_seasaltpaper,seasons:S_seasons,sechsnimmt:S_sechsnimmt,secretmoon:S_secretmoon,seikatsu:S_seikatsu,senet:S_senet,sensei:S_sensei,senshi:S_senshi,seotda:S_seotda,setup:S_setup,sevens:S_sevens,sevenwonders:S_sevenwonders,sevenwondersarchitects:S_sevenwondersarchitects,sevenwondersduel:S_sevenwondersduel,sheepboombah:S_sheepboombah,shiftingstones:S_shiftingstones,siam:S_siam,signorie:S_signorie,silo:S_silo,similo:S_similo,simplicity:S_simplicity,sixtyone:S_sixtyone,skat:S_skat,skull:S_skull,smallislands:S_smallislands,sobek:S_sobek,sobektwoplayers:S_sobektwoplayers,solarstorm:S_solarstorm,solo:S_solo,solowhist:S_solowhist,soluna:S_soluna,soulaween:S_soulaween,spacebase:S_spacebase,spaceempires:S_spaceempires,spacestationphoenix:S_spacestationphoenix,spades:S_spades,sparts:S_sparts,spiritsoftheforest:S_spiritsoftheforest,spiteandmalice:S_spiteandmalice,splashdown:S_splashdown,splendor:S_splendor,splito:S_splito,splits:S_splits,spots:S_spots,spyrium:S_spyrium,squadro:S_squadro,starfluxx:S_starfluxx,steamrollers:S_steamrollers,steamworks:S_steamworks,stella:S_stella,stirfryeighteen:S_stirfryeighteen,stockpile:S_stockpile,stoneage:S_stoneage,strands:S_strands,streets:S_streets,superfantasybrawl:S_superfantasybrawl,sushigo:S_sushigo,sushigoparty:S_sushigoparty,tablut:T_tablut,takaraisland:T_takaraisland,takenoko:T_takenoko,talon:T_talon,taluva:T_taluva,tanghulu:T_tanghulu,tapestry:T_tapestry,targi:T_targi,tashkalar:T_tashkalar,teatime:T_teatime,teotihuacan:T_teotihuacan,terramystica:T_terramystica,thatslife:T_thatslife,theboss:T_theboss,thebuilders:T_thebuilders,thebuildersantiquity:T_thebuildersantiquity,thecrew:T_thecrew,thecrewdeepsea:T_thecrewdeepsea,thegnomesofzavandor:T_thegnomesofzavandor,theisleofcats:T_theisleofcats,thejellymonsterlab:T_thejellymonsterlab,themotherroad:T_themotherroad,theninedomains:T_theninedomains,thermopyles:T_thermopyles,thirteenclues:T_thirteenclues,thirtyone:T_thirtyone,thrive:T_thrive,throneandthegrail:T_throneandthegrail,throughtheages:T_throughtheages,throughtheagesnewstory:T_throughtheagesnewstory,thurnandtaxis:T_thurnandtaxis,tichu:T_tichu,tickettoride:T_tickettoride,tictacmatch:T_tictacmatch,tigriseuphrates:T_tigriseuphrates,tiki:T_tiki,timemasters:T_timemasters,tinnerstrail:T_tinnerstrail,tinyfarms:T_tinyfarms,tiwanaku:T_tiwanaku,tobago:T_tobago,toc:T_toc,toeshambo:T_toeshambo,tokaido:T_tokaido,tournay:T_tournay,tranquility:T_tranquility,tranquilitytheascent:T_tranquilitytheascent,trekkingtheworld:T_trekkingtheworld,trektwelve:T_trektwelve,triatri:T_triatri,trickoftherails:T_trickoftherails,trio:T_trio,troggu:T_troggu,troyes:T_troyes,troyesdice:T_troyesdice,trusis:T_trusis,tucano:T_tucano,tumbleweed:T_tumbleweed,turncoats:T_turncoats,turnthetide:T_turnthetide,twentyfourseven:T_twentyfourseven,twinpalms:T_twinpalms,twintinbots:T_twintinbots,tzolkin:T_tzolkin,ultimaterailroads:U_ultimaterailroads,ultimatetictactoe:U_ultimatetictactoe,unclechestnuttablegype:U_unclechestnuttablegype,unconditionalsurrender:U_unconditionalsurrender,unitedsquare:U_unitedsquare,uptown:U_uptown,vaalbara:V_vaalbara,vegetables:V_vegetables,veggiegarden:V_veggiegarden,vektorace:V_vektorace,veletas:V_veletas,veronatwist:V_veronatwist,viamagica:V_viamagica,villagers:V_villagers,viticulture:V_viticulture,volto:V_volto,vultureculture:V_vultureculture,warchest:W_warchest,welcometo:W_welcometo,welcometonewlasvegas:W_welcometonewlasvegas,werewolves:W_werewolves,whisttwentytwo:W_whisttwentytwo,wingspan:W_wingspan,wizard:W_wizard,worldwidetennis:W_worldwidetennis,xiangqi:X_xiangqi,yaniv:Y_yaniv,yatzy:Y_yatzy,yinyang:Y_yinyang,yokai:Y_yokai,yokohama:Y_yokohama,yoxii:Y_yoxii,zefiria:Z_zefiria,zener:Z_zener,zola:Z_zola,zooloretto:Z_zooloretto};function getGame(e){return games[e]?games[e]:{logo:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/logo.png",getData:async()=>({})}}const presence=new Presence({clientId:"1089962805270171689"}),browsingTimestamp=Math.floor(Date.now()/1e3);let forumTopic={title:"",url:""};presence.on("iFrameData",(e=>{forumTopic=e})),presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/B/Board%20Game%20Arena/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:a,href:t}=document.location,r=a.split("/").filter(Boolean);switch(r[0]??"welcome"){case"welcome":e.details="Browsing homepage";break;case"tutorial":{const a=getGame(await getGameTag(presence));e.details=`Playing tutorial for ${document.querySelector("meta[property='og:title']").getAttribute("content")}`,e.largeImageKey=a.logo,Object.assign(e,await a.getData(presence));break}case"gamepanel":e.details="Viewing game panel",e.state=document.querySelector(".text-bga-gamename").textContent,e.buttons=[{label:"View Game",url:t}];break;case"player":e.details="Viewing player profile",e.state=document.querySelector("#player_name").textContent.trim(),e.largeImageKey=document.querySelector("#player_avatar img").src,e.buttons=[{label:"View Profile",url:t}];break;case"table":e.details="Viewing a table",e.state=document.querySelector("#table_name").textContent,e.buttons=[{label:"Join Table",url:t}];break;case"gamelist":e.details="Viewing game list";break;case"lobby":e.details="Viewing lobby";break;case"headlines":e.details="Viewing news";break;case"forum":switch(r[1]??""){case"viewtopic.php":e.details="Viewing a forum topic",e.state=forumTopic.title,e.buttons=[{label:"View Topic",url:forumTopic.url}];break;case"viewforum.php":e.details="Viewing a forum category",e.state=forumTopic.title;break;default:e.details="Browsing the forum"}break;default:if(/^\d+$/.test(r[0])){const a=getGame(await getGameTag(presence));e.details=`Playing ${document.querySelector("meta[property='og:title']").getAttribute("content")}`,e.largeImageKey=a.logo,Object.assign(e,await a.getData(presence));break}}e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;