var __webpack_exports__={};const presence=new Presence({clientId:"1103408220921397349"}),browsingTimestamp=Math.floor(Date.now()/1e3),getVideoStatus=(e,t)=>(t.paused?(e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png",e.smallImageText="paused",delete e.startTimestamp):([e.startTimestamp,e.endTimestamp]=presence.getTimestampsfromMedia(t),e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText="playing"),e);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/Z/Zee5/assets/logo.jpg",startTimestamp:browsingTimestamp},{pathname:t}=document.location;if("/"===t)e.details="Browsing home page";else if("/movies"===t)e.details="Browsing movies";else if(t.includes("/movies/details")){const t=getVideoStatus(e,document.querySelector("video"));t.details="Watching",t.state=document.querySelector("div.consumptionMetaDiv > div > h1").textContent}else if(t.includes("tv-shows/details")){const t=getVideoStatus(e,document.querySelector("video"));t.details=`Watching ${document.querySelector("div.consumptionMetaDiv >  a  > h2").textContent}`,t.state=`${document.querySelector("div.consumptionMetaDiv >  div  > h1").textContent} ${document.querySelector("div.consumptionMetaDiv >  div  > p").textContent}`}else if(t.includes("web-series/details")){const t=getVideoStatus(e,document.querySelector("video"));t.details=`Watching ${document.querySelector("div.consumptionMetaDiv >  a  > h2").textContent}`,t.state=`${document.querySelector("div.consumptionMetaDiv >  div  > h1").textContent} ${document.querySelector("div.consumptionMetaDiv >  div  > p").textContent}`}else"tv-shows"===t?e.details="Browsing TV shows":t.includes("/premium")?e.details="Browsing premium":t.includes("/web-series")?e.details="Browsing web series":t.includes("/news")&&(e.details="Browsing news");e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;