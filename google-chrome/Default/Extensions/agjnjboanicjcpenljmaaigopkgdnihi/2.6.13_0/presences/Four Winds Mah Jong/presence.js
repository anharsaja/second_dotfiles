"use strict";var __webpack_exports__={};function handler(e,t){const a=e[0]??"index.htm";"index.htm"===a?t.details="Viewing the PPC page":"intro.htm"===a?t.details="Reading the PPC overview":a.startsWith("features")?t.details="Reading about the PPC features":a.startsWith("gallery")?t.details="Viewing the PPC gallery":"systeminfo.htm"===a?t.details="Viewing PPC system information":a.startsWith("downloads")?t.details="Viewing PPC downloads":"support01.htm"===a&&(t.details="Viewing PPC support resources")}function pocketpc_handler(e,t){const a=e[0]??"index.htm";switch(a){case"index.htm":t.details="Viewing the PPC page";break;case"overview.htm":t.details="Reading the PPC overview";break;case"features.htm":t.details="Reading about the PPC features";break;default:if(a.startsWith("gallery"))t.details="Viewing the PPC gallery";else switch(a){case"devices.htm":t.details="Viewing PPC system information";break;case"downloads.htm":t.details="Viewing PPC downloads";break;case"support.htm":t.details="Viewing PPC support resources"}}}function knowledge_handler(e){const t=document.querySelector("frame[src='kbstart.htm']"),{contentDocument:a}=t;e.details="Viewing the knowledge base",e.state=a.querySelector("h3")}function store_handler(e,t){const{href:a,search:s,pathname:i}=document.location,r=e[0]??"/",n=document.querySelector("h1");switch(r){case"/":new URLSearchParams(s).get("s")?(t.details="Searching the store",t.state=n.querySelector("span")):t.details="Browsing the store";break;case"product":t.details="Viewing a product",t.state=n,t.buttons=[{label:"View Product",url:a}];break;case"product-category":t.details="Viewing a product category",t.state=n;break;case"cart":case"checkout":t.details="Viewing the cart";break;case"about":t.details="Reading about Four Winds Mah Jong";break;case"category":t.details="Viewing a category",t.state=n.querySelector("span");break;case"author":t.details="Viewing posts by an author",t.state=n.querySelector("span");break;default:/^[/]store[/]\d{4}[/](\d{2}[/])?(\d+)?/.test(i)?(t.details="Browsing posts by date",t.state=n):document.querySelector(".posted-on")&&(t.details="Reading a post",t.state=n,t.buttons=[{label:"Read Post",url:a}])}}const presence=new Presence({clientId:"1221562084253499452"}),browsingTimestamp=Math.floor(Date.now()/1e3),staticPages={"/":{details:"Viewing the homepage"},"/purchase.htm":{details:"Viewing the purchase page"}};presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/F/Four%20Winds%20Mah%20Jong/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:t}=document.location,a=t.split("/").filter(Boolean),s=document.querySelector("h3");if(staticPages[t])Object.assign(e,staticPages[t]);else if(t.startsWith("/intro"))e.details="Reading the introduction",e.state=s;else if(t.startsWith("/features"))e.details="Viewing the features",e.state=s;else if(t.startsWith("/gallery"))e.details="Viewing the gallery",e.state=s;else if(t.startsWith("/downloads"))e.details="Viewing the downloads",e.state=s;else if(t.startsWith("/support"))e.details="Viewing support resources",e.state=s;else switch(a[0]){case"ppc":handler(a.slice(1),e);break;case"pocketpc":pocketpc_handler(a.slice(1),e);break;case"kb":knowledge_handler(e);break;case"store":store_handler(a.slice(1),e);break;default:e.details="Viewing a page",e.state=s}e.details?presence.setActivity(e):presence.clearActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;