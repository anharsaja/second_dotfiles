var __webpack_exports__={};const presence=new Presence({clientId:"1248697988331864084"}),browsingTimestamp=Math.floor(Date.now()/1e3),processPostSite=()=>({details:"Reading a post",state:document.querySelector("h1")?.textContent,buttons:[{label:"Read Post",url:document.location.href}]}),processSourceSite=()=>({details:"Reading a source",state:`Source: ${document.querySelector("h1")?.textContent}`}),processSearchSite=()=>({details:"Searching",state:`Searching for ${new URLSearchParams(document.location.search).get("search")}`}),siteDataMap=[{path:/^\/$/,process:()=>({details:"Homepage",state:"Discovering new posts"})},{path:/^\/posts\/[a-z0-9-]+$/,process:processPostSite},{path:/^\/squads$/,process:()=>({details:"Squads page",state:"Discovering new squads"})},{path:/^\/discussed$/,process:()=>({details:"Discussion homepage",state:"Discovering new discussions"})},{path:/^\/bookmarks$/,process:()=>({details:"Bookmarks",state:"Discovering saved posts"})},{path:/^\/popular$/,process:()=>({details:"Popular posts",state:"Discovering popular posts"})},{path:/^\/sources\/.*$/,process:processSourceSite},{path:/^\/upvoted\/.*$/,process:()=>({details:"Upvoted posts",state:"Discovering upvoted posts"})},{path:/^\/search$/,process:()=>({details:"Searching",process:processSearchSite})},{path:/^\/history\/.*$/,process:()=>({details:"History",state:"Browsing personal history"})}];presence.on("UpdateData",(async()=>{let e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/D/daily.dev/assets/logo.png",startTimestamp:browsingTimestamp};const s=siteDataMap.find((e=>e.path.test(document.location.pathname)));s&&(e={...e,...s.process()}),presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;