var __webpack_exports__={};const presence=new Presence({clientId:"798272335035498557"}),time=Math.floor(Date.now()/1e3);presence.on("UpdateData",(()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/M/Monkeytype/assets/logo.png"};switch(e.startTimestamp=time,document.location.pathname.toLowerCase()){case"/":if(e.details="Idling",document.querySelector(".pageTest #result").classList.contains("hidden"))document.querySelector("#words letter.correct")||document.querySelector("#words letter.incorrect")?(e.details=`Typing ${document.querySelector(".pageTest #premidTestMode").textContent}`,e.state=`${document.querySelector(".pageTest #largeLiveWpmAndAcc #liveWpm").textContent} wpm ${document.querySelector(".pageTest #largeLiveWpmAndAcc #liveAcc").textContent} acc`,"time"===document.querySelector("#top .config .mode .text-button.active").textContent.replace(/[\t\r\n]/g,"")&&(e.endTimestamp=Math.floor(Date.now()/1e3)+(parseInt(document.querySelector(".pageTest #premidSecondsLeft").textContent)+1))):document.querySelector("#leaderboardsWrapper").classList.contains("hidden")||(e.details="Checking leaderboards");else{const t=document.querySelector(".pageTest #result .stats"),o=document.querySelector(".pageTest #result .morestats"),c={wpm:t.querySelector(".wpm .bottom").textContent,acc:t.querySelector(".acc .bottom").textContent,raw:o.querySelector(".raw .bottom").textContent,char:o.querySelector(".key .bottom").textContent,con:o.querySelector(".consistency .bottom").textContent,time:o.querySelector(".time .bottom").textContent};e.details=`Finished ${document.querySelector(".testType .bottom").textContent.replaceAll("<br>"," ")}`,e.state=`${c.wpm} wpm ${c.acc} acc ${c.raw} raw ${c.char} ${c.con} consistency ${c.time}`}break;case"/about":e.details="Reading about page";break;case"/settings":e.details="Changing settings";break;case"/login":e.details="Logging in";break;case"/account":e.details="Checking stats"}presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;