var __webpack_exports__={};const presence=new Presence({clientId:"547436289960574977"}),timestamp=Math.floor(Date.now()/1e3);let cached;function getDateString(e){const t=Math.abs(Date.now()-e.getTime())/1e3,a=Math.floor(t/60),s=Math.floor(a/60),r=Math.floor(s/24);switch(!0){case t<60:return`${Math.floor(t)} second${1===t?"":"s"} ago`;case t<3600:return`${a} minute${1===a?"":"s"} ago`;case t<86400:return`${s} hour${1===s?"":"s"} ago`;case t<604800:return`${r} day${1===r?"":"s"} ago`;case t<2419200:return`${r/7} week${7===r?"":"s"} ago`;case t<29030400:return`${r/30} month${30===r?"":"s"} ago`;default:return`${r/365} year${365===r?"":"s"} ago`}}presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/I/Instagram/assets/logo.png"},[t,a,s]=await Promise.all([presence.getSetting("privacy"),presence.getSetting("elapsedTime"),presence.getSetting("postImage")]),{href:r,pathname:i}=document.location,n=i.split("/"),[,c]=document.title.split("(");switch(a&&(e.startTimestamp=timestamp),!0){case!!document.querySelector("div.QY4Ed.P0xOK input.focus-visible"):e.details=t?"Searching":"Searching for:",e.state=document.querySelector("div.QY4Ed.P0xOK input.focus-visible")?.value;break;case!n[1]:e.details="Viewing the Homepage";break;case i.startsWith("/stories"):{const a=document.querySelector("time.BPyeS.Nzb55"),s=document.querySelector("video");e.details=t?"Viewing a Story":`Viewing ${n[2]}'s Story`,a&&a.getAttribute("datetime")&&(e.state=getDateString(new Date(a.getAttribute("datetime")))),!t&&s&&s.duration&&([e.startTimestamp,e.endTimestamp]=presence.getTimestampsfromMedia(s)),e.buttons=[{label:"View Story",url:`https://www.instagram.com/stories/${n[2]}/${n[3]}`}];break}case i.includes("/accounts"):e.details="Settings",e.state="Changing their Settings";break;case i.includes("/reel/"):{const t=document.querySelector('[class="_ap3a _aaco _aacw _aacx _aad7 _aade"]')?.textContent??document.querySelector("[class*='_acan _acao _acat _acaw _aj1- _ap30 _a6hd']")?.textContent;e.details="Watching a reel",e.state=t,e.buttons=[{label:"Watch Reel",url:r},{label:"View Creator's Profile",url:`https://www.instagram.com/${t}`}];break}case i.includes("/reels/"):{if(!cached?.href||!cached?.video||cached?.href!==r){const e=Array.from(document.querySelectorAll("video")).find((e=>!e.paused))??document.querySelector("video");if(!e?.paused)return void(cached={video:e,href:r,user:e?.closest('div[class*="x6ikm8r"]')?.querySelector('[class*="x1943h6x"]')?.textContent?.toLowerCase()})}const t=cached?.user;e.details="Watching a reel",e.state=t??"unknown creator",e.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/I/Instagram/assets/0.png",e.buttons=[{label:"Watch Reel",url:r},{label:"View Creator's Profile",url:t?`https://www.instagram.com/${t}`:""}];break}case i.startsWith("/p"):{const a=document.querySelector("time._1o9PC.Nzb55"),r=document.querySelector("a.sqdOP.yWX7d._8A5w5.ZIAjV")?.textContent,i=document.querySelector("div.eLAPa.RzuR0 div.KL4Bh img");e.details=t||!r?"Viewing a Post":`Viewing ${r}'s Post`,a&&a.getAttribute("datetime")&&(e.state=getDateString(new Date(a.getAttribute("datetime")))),!t&&s&&i&&i.src&&(e.largeImageKey=await getShortURL(i.src)),e.buttons=[{label:"View Post",url:`https://www.instagram.com/${n[1]}/${n[2]}`}];break}case i.startsWith("/explore"):e.details="Exploring...";break;case i.startsWith("/nametag"):e.details="Viewing nametag";break;case i.startsWith("/direct/inbox"):case i.startsWith("/direct/t"):e.details="Direct Messages";break;case c?.split(")")[0].replace("@","")===n[1]:{const a=document.querySelector("img._6q-tv");e.details="Viewing a Profile"+(t?"":":"),e.state=`${document.querySelector("head > title")?.textContent.split("(")[0].trim()??"Unknown"} (${c.split(")")[0]})`,a&&(e.smallImageKey=await getShortURL(a.src)),e.buttons=[{label:"View Profile",url:`https://www.instagram.com/${n[1]}`}];break}}t&&(e.state&&delete e.state,e.endTimestamp&&delete e.endTimestamp,e.buttons&&delete e.buttons,e.smallImageKey&&delete e.smallImageKey),presence.setActivity(e)}));const shortenedURLs={};async function getShortURL(e){if(!e||e.length<256)return e;if(shortenedURLs[e])return shortenedURLs[e];try{const t=await(await fetch(`https://pd.premid.app/create/${e}`)).text();return shortenedURLs[e]=t,t}catch(t){return presence.error(t),e}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;