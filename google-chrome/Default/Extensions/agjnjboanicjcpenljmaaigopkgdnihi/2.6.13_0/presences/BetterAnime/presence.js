var __webpack_exports__={};const presence=new Presence({clientId:"839409255979155516"}),getStrings=async()=>presence.getStrings({play:"general.playing",pause:"general.paused",browse:"general.browsing",searchFor:"general.searchFor",searchSomething:"general.searchSomething",viewEpisode:"general.buttonViewEpisode",viewAnime:"general.viewAnime",viewSeries:"general.buttonViewSeries",viewAccount:"general.viewAccount",viewMovie:"general.viewMovie",buttonViewMovie:"general.buttonViewMovie",watchMovie:"general.watchingMovie",watchSeries:"general.watchingSeries"},await presence.getSetting("lang").catch((()=>"en"))),data={presence:{},meta:{},oldLang:"",startedSince:~~(Date.now()/1e3),presenceData:{type:3,largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/B/BetterAnime/assets/logo.png",smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/search.png"}};let strings,video;presence.on("iFrameData",(e=>{e&&(video=e)})),presence.on("UpdateData",(async()=>{const[e,t,a,s,i,n,r,d]=await Promise.all([presence.getSetting("lang").catch((()=>"en")),presence.getSetting("privacy"),presence.getSetting("anime"),presence.getSetting("movie"),presence.getSetting("browse"),presence.getSetting("timestamp"),presence.getSetting("AnimeState"),presence.getSetting("MovieState")]),{pathname:c,search:p,href:l}=document.location;data.oldLang===e&&strings||(data.oldLang=e,strings=await getStrings()),i&&(data.presenceData.details=strings.browse),!n||data.presenceData.startTimestamp||data.presenceData.endTimestamp||(data.presenceData.startTimestamp=data.startedSince),data.presence={"/anime/(dublado|legendado)/([a-zA-Z0-9-]+)/([a-z-0-9]+)":{disabled:!a,async setPresenceData(){data.meta.episode=document.querySelector("div.anime-title > h3")?.textContent,data.meta.title=document.querySelector("div.anime-title")?.textContent?.replace(data.meta.episode,""),data.presenceData.smallImageKey=video.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",data.presenceData.smallImageText=video.paused?(await strings).pause:(await strings).play,[data.presenceData.startTimestamp,data.presenceData.endTimestamp]=presence.getTimestamps(video.currentTime,video.duration);const e=document.querySelector("div.anime-title > h2 > a")?.href;data.presenceData.buttons=e?[{label:(await strings).viewEpisode,url:l},{label:(await strings).viewSeries,url:e}]:[{label:(await strings).viewEpisode,url:l}],video.paused&&(delete data.presenceData.endTimestamp,delete data.presenceData.startTimestamp)}},"/anime/(dublado|legendado)/([a-zA-Z0-9-]+)":{disabled:t||!a,async setPresenceData(){data.presenceData.details=(await strings).viewAnime,data.presenceData.state=document.querySelector("div.infos_left > div > h2")?.textContent,data.presenceData.buttons=[{label:(await strings).viewSeries,url:l}]}},"/filme/(dublado|legendado)/([a-zA-Z0-9-]+)/([a-z-]+)":{disabled:!s,async setPresenceData(){data.meta.title=document.querySelector("div.anime-title")?.textContent?.replace(document.querySelector("div.anime-title > h3")?.textContent??"","")??"",data.presenceData.smallImageKey=video.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",data.presenceData.smallImageText=video.paused?(await strings).pause:(await strings).play,[data.presenceData.startTimestamp,data.presenceData.endTimestamp]=presence.getTimestamps(video.currentTime,video.duration),data.presenceData.buttons=[{label:(await strings).buttonViewMovie,url:l}],video.paused&&(delete data.presenceData.endTimestamp,delete data.presenceData.startTimestamp)}},"/filme/(dublado|legendado)/([a-zA-Z0-9-]+)":{disabled:t||!s,async setPresenceData(){data.presenceData.details=(await strings).viewMovie,data.presenceData.state=document.querySelector("div.infos_left > div > h2")?.textContent,data.presenceData.buttons=[{label:(await strings).buttonViewMovie,url:l}]}},"/minha-conta":{disabled:t,async setPresenceData(){data.presenceData.details=(await strings).viewAccount}},"/pesquisa":{async setPresenceData(){data.presenceData.details=(await strings).searchFor,data.presenceData.state=new URLSearchParams(p).get("titulo")}}},data.settings=[{id:"timestamp",delete:!0,uses:["startTimestamp","endTimestamp"]},{id:"buttons",delete:!0,uses:["buttons"]},{id:"privacy",delete:!0,value:!0,uses:["buttons"]},{presence:[{page:"/pesquisa",uses:"state",if:{k:t,delete:!0}},{page:"/pesquisa",uses:"details",if:{k:t,v:(await strings).searchSomething}},{page:"/anime/(dublado|legendado)/([a-zA-Z0-9-]+)/([a-z-0-9]+)",uses:"details",setTo:await presence.getSetting("AnimeDetails"),if:[{k:t&&a,v:(await strings).watchSeries},{k:!a,delete:!0}],replace:[{input:"%title%",output:data.meta.title},{input:"%episode%",output:data.meta.episode}]},{page:"/anime/(dublado|legendado)/([a-zA-Z0-9-]+)/([a-z-0-9]+)",uses:"state",setTo:r,if:{k:!a||t||r.includes("{0}"),delete:!0},replace:[{input:"%title%",output:data.meta.title},{input:"%episode%",output:data.meta.episode}]},{page:"/filme/(dublado|legendado)/([a-zA-Z0-9-]+)/([a-z-0-9]+)",uses:"details",setTo:await presence.getSetting("MovieDetails"),if:[{k:t&&s,v:(await strings).watchMovie},{k:!s,delete:!0}],replace:[{input:"%title%",output:data.meta.title}]},{page:"/filme/(dublado|legendado)/([a-zA-Z0-9-]+)/([a-z-0-9]+)",uses:"state",setTo:d,if:{k:!s||t||d.includes("{0}"),delete:!0},replace:[{input:"%title%",output:data.meta.title}]}]}];for(const[e,t]of Object.entries(data.presence))if(c.match(e)&&!t.disabled){t.setPresenceData();break}for(const e of data.settings){const t=await presence.getSetting(e.id).catch((()=>null));if((t||e.value)&&t!==e.value||!e.delete||e.presence){if(e.presence)for(const t of e.presence)if(c.match(t.page)){if(t.setTo&&!t.replace)data.presenceData[t.uses]=t.setTo;else if(t.setTo&&t.replace){let e=t.setTo;for(const a of t.replace)e=e.replace(a.input,a.output);e&&(data.presenceData[t.uses]=e)}if(t.if)if(Array.isArray(t.if))for(const e of t.if)e.k&&(e.delete&&!e.v?delete data.presenceData[t.uses]:e.v&&(data.presenceData[t.uses]=e.v));else t.if.k&&(t.if.delete&&!t.if.v?delete data.presenceData[t.uses]:t.if.v&&(data.presenceData[t.uses]=t.if.v))}}else for(const t of e.uses)delete data.presenceData[t]}for(const e of["state","details"])"undefined"===data.presenceData[e]&&delete data.presenceData[e];data.presenceData.details?presence.setActivity(data.presenceData):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNVyxLQUFXRSxFQUFnQmIsR0FDOUJXLEVBQVFWLElBQ0pVLEVBQVFmLFNBQVdlLEVBQVFULFNBQ3BCeEQsS0FBS00sYUFBYTZELEVBQWdCaEIsTUFDcENjLEVBQVFULElBQ2J4RCxLQUFLTSxhQUFhNkQsRUFBZ0JoQixNQUM5QmMsRUFBUVQsU0FLbkJXLEVBQWdCYixHQUFHQyxJQUNwQlksRUFBZ0JiLEdBQUdKLFNBQVdpQixFQUFnQmIsR0FBR0UsU0FDMUN4RCxLQUFLTSxhQUFhNkQsRUFBZ0JoQixNQUNwQ2dCLEVBQWdCYixHQUFHRSxJQUN4QnhELEtBQUtNLGFBQWE2RCxFQUFnQmhCLE1BQzlCZ0IsRUFBZ0JiLEdBQUdFLEdBSXZDLE9BdkNKLElBQUssTUFBTWdCLEtBQVNQLEVBQVFkLFlBQ2pCbkQsS0FBS00sYUFBYWtFLEVBeUNyQyxDQUNBLElBQUssTUFBTUMsSUFBSyxDQUFDLFFBQVMsV0FDTyxjQUF6QnpFLEtBQUtNLGFBQWFtRSxXQUNYekUsS0FBS00sYUFBYW1FLEdBRTVCekUsS0FBS00sYUFBYXFCLFFBR25CL0MsU0FBUzhGLFlBQVkxRSxLQUFLTSxjQUYxQjFCLFNBQVM4RixhQUU4QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3ByZXNlbmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHByZXNlbmNlID0gbmV3IFByZXNlbmNlKHtcbiAgICBjbGllbnRJZDogXCI4Mzk0MDkyNTU5NzkxNTU1MTZcIixcbn0pLCBnZXRTdHJpbmdzID0gYXN5bmMgKCkgPT4ge1xuICAgIHJldHVybiBwcmVzZW5jZS5nZXRTdHJpbmdzKHtcbiAgICAgICAgcGxheTogXCJnZW5lcmFsLnBsYXlpbmdcIixcbiAgICAgICAgcGF1c2U6IFwiZ2VuZXJhbC5wYXVzZWRcIixcbiAgICAgICAgYnJvd3NlOiBcImdlbmVyYWwuYnJvd3NpbmdcIixcbiAgICAgICAgc2VhcmNoRm9yOiBcImdlbmVyYWwuc2VhcmNoRm9yXCIsXG4gICAgICAgIHNlYXJjaFNvbWV0aGluZzogXCJnZW5lcmFsLnNlYXJjaFNvbWV0aGluZ1wiLFxuICAgICAgICB2aWV3RXBpc29kZTogXCJnZW5lcmFsLmJ1dHRvblZpZXdFcGlzb2RlXCIsXG4gICAgICAgIHZpZXdBbmltZTogXCJnZW5lcmFsLnZpZXdBbmltZVwiLFxuICAgICAgICB2aWV3U2VyaWVzOiBcImdlbmVyYWwuYnV0dG9uVmlld1Nlcmllc1wiLFxuICAgICAgICB2aWV3QWNjb3VudDogXCJnZW5lcmFsLnZpZXdBY2NvdW50XCIsXG4gICAgICAgIHZpZXdNb3ZpZTogXCJnZW5lcmFsLnZpZXdNb3ZpZVwiLFxuICAgICAgICBidXR0b25WaWV3TW92aWU6IFwiZ2VuZXJhbC5idXR0b25WaWV3TW92aWVcIixcbiAgICAgICAgd2F0Y2hNb3ZpZTogXCJnZW5lcmFsLndhdGNoaW5nTW92aWVcIixcbiAgICAgICAgd2F0Y2hTZXJpZXM6IFwiZ2VuZXJhbC53YXRjaGluZ1Nlcmllc1wiLFxuICAgIH0sIGF3YWl0IHByZXNlbmNlLmdldFNldHRpbmcoXCJsYW5nXCIpLmNhdGNoKCgpID0+IFwiZW5cIikpO1xufSwgZGF0YSA9IHtcbiAgICBwcmVzZW5jZToge30sXG4gICAgbWV0YToge30sXG4gICAgb2xkTGFuZzogXCJcIixcbiAgICBzdGFydGVkU2luY2U6IH5+KERhdGUubm93KCkgLyAxMDAwKSxcbiAgICBwcmVzZW5jZURhdGE6IHtcbiAgICAgICAgdHlwZTogMyxcbiAgICAgICAgbGFyZ2VJbWFnZUtleTogXCJodHRwczovL2Nkbi5yY2QuZ2cvUHJlTWlEL3dlYnNpdGVzL0IvQmV0dGVyQW5pbWUvYXNzZXRzL2xvZ28ucG5nXCIsXG4gICAgICAgIHNtYWxsSW1hZ2VLZXk6IFwiaHR0cHM6Ly9jZG4ucmNkLmdnL1ByZU1pRC9yZXNvdXJjZXMvc2VhcmNoLnBuZ1wiLFxuICAgIH0sXG59O1xubGV0IHN0cmluZ3MsIHZpZGVvO1xucHJlc2VuY2Uub24oXCJpRnJhbWVEYXRhXCIsIChkYXRhKSA9PiB7XG4gICAgaWYgKGRhdGEpXG4gICAgICAgIHZpZGVvID0gZGF0YTtcbn0pO1xucHJlc2VuY2Uub24oXCJVcGRhdGVEYXRhXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBbbmV3TGFuZywgcHJpdmFjeSwgYW5pbWUsIG1vdmllLCBicm93c2UsIHRpbWVzdGFtcCwgQW5pbWVTdGF0ZSwgTW92aWVTdGF0ZSxdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBwcmVzZW5jZS5nZXRTZXR0aW5nKFwibGFuZ1wiKS5jYXRjaCgoKSA9PiBcImVuXCIpLFxuICAgICAgICBwcmVzZW5jZS5nZXRTZXR0aW5nKFwicHJpdmFjeVwiKSxcbiAgICAgICAgcHJlc2VuY2UuZ2V0U2V0dGluZyhcImFuaW1lXCIpLFxuICAgICAgICBwcmVzZW5jZS5nZXRTZXR0aW5nKFwibW92aWVcIiksXG4gICAgICAgIHByZXNlbmNlLmdldFNldHRpbmcoXCJicm93c2VcIiksXG4gICAgICAgIHByZXNlbmNlLmdldFNldHRpbmcoXCJ0aW1lc3RhbXBcIiksXG4gICAgICAgIHByZXNlbmNlLmdldFNldHRpbmcoXCJBbmltZVN0YXRlXCIpLFxuICAgICAgICBwcmVzZW5jZS5nZXRTZXR0aW5nKFwiTW92aWVTdGF0ZVwiKSxcbiAgICBdKSwgeyBwYXRobmFtZSwgc2VhcmNoLCBocmVmIH0gPSBkb2N1bWVudC5sb2NhdGlvbjtcbiAgICBpZiAoZGF0YS5vbGRMYW5nICE9PSBuZXdMYW5nIHx8ICFzdHJpbmdzKSB7XG4gICAgICAgIGRhdGEub2xkTGFuZyA9IG5ld0xhbmc7XG4gICAgICAgIHN0cmluZ3MgPSBhd2FpdCBnZXRTdHJpbmdzKCk7XG4gICAgfVxuICAgIGlmIChicm93c2UpXG4gICAgICAgIGRhdGEucHJlc2VuY2VEYXRhLmRldGFpbHMgPSBzdHJpbmdzLmJyb3dzZTtcbiAgICBpZiAodGltZXN0YW1wICYmXG4gICAgICAgICFkYXRhLnByZXNlbmNlRGF0YS5zdGFydFRpbWVzdGFtcCAmJlxuICAgICAgICAhZGF0YS5wcmVzZW5jZURhdGEuZW5kVGltZXN0YW1wKVxuICAgICAgICBkYXRhLnByZXNlbmNlRGF0YS5zdGFydFRpbWVzdGFtcCA9IGRhdGEuc3RhcnRlZFNpbmNlO1xuICAgIGRhdGEucHJlc2VuY2UgPSB7XG4gICAgICAgIFwiL2FuaW1lLyhkdWJsYWRvfGxlZ2VuZGFkbykvKFthLXpBLVowLTktXSspLyhbYS16LTAtOV0rKVwiOiB7XG4gICAgICAgICAgICBkaXNhYmxlZDogIWFuaW1lLFxuICAgICAgICAgICAgYXN5bmMgc2V0UHJlc2VuY2VEYXRhKCkge1xuICAgICAgICAgICAgICAgIGRhdGEubWV0YS5lcGlzb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImRpdi5hbmltZS10aXRsZSA+IGgzXCIpPy50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICBkYXRhLm1ldGEudGl0bGUgPSBkb2N1bWVudFxuICAgICAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3RvcihcImRpdi5hbmltZS10aXRsZVwiKVxuICAgICAgICAgICAgICAgICAgICA/LnRleHRDb250ZW50Py5yZXBsYWNlKGRhdGEubWV0YS5lcGlzb2RlLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBkYXRhLnByZXNlbmNlRGF0YS5zbWFsbEltYWdlS2V5ID0gdmlkZW8ucGF1c2VkXG4gICAgICAgICAgICAgICAgICAgID8gXCJodHRwczovL2Nkbi5yY2QuZ2cvUHJlTWlEL3Jlc291cmNlcy9wYXVzZS5wbmdcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiaHR0cHM6Ly9jZG4ucmNkLmdnL1ByZU1pRC9yZXNvdXJjZXMvcGxheS5wbmdcIjtcbiAgICAgICAgICAgICAgICBkYXRhLnByZXNlbmNlRGF0YS5zbWFsbEltYWdlVGV4dCA9IHZpZGVvLnBhdXNlZFxuICAgICAgICAgICAgICAgICAgICA/IChhd2FpdCBzdHJpbmdzKS5wYXVzZVxuICAgICAgICAgICAgICAgICAgICA6IChhd2FpdCBzdHJpbmdzKS5wbGF5O1xuICAgICAgICAgICAgICAgIFtkYXRhLnByZXNlbmNlRGF0YS5zdGFydFRpbWVzdGFtcCwgZGF0YS5wcmVzZW5jZURhdGEuZW5kVGltZXN0YW1wXSA9XG4gICAgICAgICAgICAgICAgICAgIHByZXNlbmNlLmdldFRpbWVzdGFtcHModmlkZW8uY3VycmVudFRpbWUsIHZpZGVvLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXJpZXNVUkwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiZGl2LmFuaW1lLXRpdGxlID4gaDIgPiBhXCIpPy5ocmVmO1xuICAgICAgICAgICAgICAgIGlmICghc2VyaWVzVVJMKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHJlc2VuY2VEYXRhLmJ1dHRvbnMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IChhd2FpdCBzdHJpbmdzKS52aWV3RXBpc29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGhyZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmVzZW5jZURhdGEuYnV0dG9ucyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogKGF3YWl0IHN0cmluZ3MpLnZpZXdFcGlzb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaHJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IChhd2FpdCBzdHJpbmdzKS52aWV3U2VyaWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc2VyaWVzVVJMLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZpZGVvLnBhdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZGF0YS5wcmVzZW5jZURhdGEuZW5kVGltZXN0YW1wO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZGF0YS5wcmVzZW5jZURhdGEuc3RhcnRUaW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgXCIvYW5pbWUvKGR1YmxhZG98bGVnZW5kYWRvKS8oW2EtekEtWjAtOS1dKylcIjoge1xuICAgICAgICAgICAgZGlzYWJsZWQ6IHByaXZhY3kgfHwgIWFuaW1lLFxuICAgICAgICAgICAgYXN5bmMgc2V0UHJlc2VuY2VEYXRhKCkge1xuICAgICAgICAgICAgICAgIGRhdGEucHJlc2VuY2VEYXRhLmRldGFpbHMgPSAoYXdhaXQgc3RyaW5ncykudmlld0FuaW1lO1xuICAgICAgICAgICAgICAgIGRhdGEucHJlc2VuY2VEYXRhLnN0YXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImRpdi5pbmZvc19sZWZ0ID4gZGl2ID4gaDJcIik/LnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgIGRhdGEucHJlc2VuY2VEYXRhLmJ1dHRvbnMgPSBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAoYXdhaXQgc3RyaW5ncykudmlld1NlcmllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaHJlZixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgXCIvZmlsbWUvKGR1YmxhZG98bGVnZW5kYWRvKS8oW2EtekEtWjAtOS1dKykvKFthLXotXSspXCI6IHtcbiAgICAgICAgICAgIGRpc2FibGVkOiAhbW92aWUsXG4gICAgICAgICAgICBhc3luYyBzZXRQcmVzZW5jZURhdGEoKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5tZXRhLnRpdGxlID1cbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKFwiZGl2LmFuaW1lLXRpdGxlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICA/LnRleHRDb250ZW50Py5yZXBsYWNlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaXYuYW5pbWUtdGl0bGUgPiBoM1wiKT8udGV4dENvbnRlbnQgPz8gXCJcIiwgXCJcIikgPz8gXCJcIjtcbiAgICAgICAgICAgICAgICBkYXRhLnByZXNlbmNlRGF0YS5zbWFsbEltYWdlS2V5ID0gdmlkZW8ucGF1c2VkXG4gICAgICAgICAgICAgICAgICAgID8gXCJodHRwczovL2Nkbi5yY2QuZ2cvUHJlTWlEL3Jlc291cmNlcy9wYXVzZS5wbmdcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiaHR0cHM6Ly9jZG4ucmNkLmdnL1ByZU1pRC9yZXNvdXJjZXMvcGxheS5wbmdcIjtcbiAgICAgICAgICAgICAgICBkYXRhLnByZXNlbmNlRGF0YS5zbWFsbEltYWdlVGV4dCA9IHZpZGVvLnBhdXNlZFxuICAgICAgICAgICAgICAgICAgICA/IChhd2FpdCBzdHJpbmdzKS5wYXVzZVxuICAgICAgICAgICAgICAgICAgICA6IChhd2FpdCBzdHJpbmdzKS5wbGF5O1xuICAgICAgICAgICAgICAgIFtkYXRhLnByZXNlbmNlRGF0YS5zdGFydFRpbWVzdGFtcCwgZGF0YS5wcmVzZW5jZURhdGEuZW5kVGltZXN0YW1wXSA9XG4gICAgICAgICAgICAgICAgICAgIHByZXNlbmNlLmdldFRpbWVzdGFtcHModmlkZW8uY3VycmVudFRpbWUsIHZpZGVvLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICBkYXRhLnByZXNlbmNlRGF0YS5idXR0b25zID0gW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogKGF3YWl0IHN0cmluZ3MpLmJ1dHRvblZpZXdNb3ZpZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaHJlZixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGlmICh2aWRlby5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGRhdGEucHJlc2VuY2VEYXRhLmVuZFRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGRhdGEucHJlc2VuY2VEYXRhLnN0YXJ0VGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFwiL2ZpbG1lLyhkdWJsYWRvfGxlZ2VuZGFkbykvKFthLXpBLVowLTktXSspXCI6IHtcbiAgICAgICAgICAgIGRpc2FibGVkOiBwcml2YWN5IHx8ICFtb3ZpZSxcbiAgICAgICAgICAgIGFzeW5jIHNldFByZXNlbmNlRGF0YSgpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnByZXNlbmNlRGF0YS5kZXRhaWxzID0gKGF3YWl0IHN0cmluZ3MpLnZpZXdNb3ZpZTtcbiAgICAgICAgICAgICAgICBkYXRhLnByZXNlbmNlRGF0YS5zdGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJkaXYuaW5mb3NfbGVmdCA+IGRpdiA+IGgyXCIpPy50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICBkYXRhLnByZXNlbmNlRGF0YS5idXR0b25zID0gW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogKGF3YWl0IHN0cmluZ3MpLmJ1dHRvblZpZXdNb3ZpZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaHJlZixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgXCIvbWluaGEtY29udGFcIjoge1xuICAgICAgICAgICAgZGlzYWJsZWQ6IHByaXZhY3ksXG4gICAgICAgICAgICBhc3luYyBzZXRQcmVzZW5jZURhdGEoKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5wcmVzZW5jZURhdGEuZGV0YWlscyA9IChhd2FpdCBzdHJpbmdzKS52aWV3QWNjb3VudDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFwiL3Blc3F1aXNhXCI6IHtcbiAgICAgICAgICAgIGFzeW5jIHNldFByZXNlbmNlRGF0YSgpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnByZXNlbmNlRGF0YS5kZXRhaWxzID0gKGF3YWl0IHN0cmluZ3MpLnNlYXJjaEZvcjtcbiAgICAgICAgICAgICAgICBkYXRhLnByZXNlbmNlRGF0YS5zdGF0ZSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKS5nZXQoXCJ0aXR1bG9cIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH07XG4gICAgZGF0YS5zZXR0aW5ncyA9IFtcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6IFwidGltZXN0YW1wXCIsXG4gICAgICAgICAgICBkZWxldGU6IHRydWUsXG4gICAgICAgICAgICB1c2VzOiBbXCJzdGFydFRpbWVzdGFtcFwiLCBcImVuZFRpbWVzdGFtcFwiXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6IFwiYnV0dG9uc1wiLFxuICAgICAgICAgICAgZGVsZXRlOiB0cnVlLFxuICAgICAgICAgICAgdXNlczogW1wiYnV0dG9uc1wiXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgaWQ6IFwicHJpdmFjeVwiLFxuICAgICAgICAgICAgZGVsZXRlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgICAgICB1c2VzOiBbXCJidXR0b25zXCJdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcmVzZW5jZTogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZTogXCIvcGVzcXVpc2FcIixcbiAgICAgICAgICAgICAgICAgICAgdXNlczogXCJzdGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBpZjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgazogcHJpdmFjeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZTogXCIvcGVzcXVpc2FcIixcbiAgICAgICAgICAgICAgICAgICAgdXNlczogXCJkZXRhaWxzXCIsXG4gICAgICAgICAgICAgICAgICAgIGlmOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrOiBwcml2YWN5LFxuICAgICAgICAgICAgICAgICAgICAgICAgdjogKGF3YWl0IHN0cmluZ3MpLnNlYXJjaFNvbWV0aGluZyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZTogXCIvYW5pbWUvKGR1YmxhZG98bGVnZW5kYWRvKS8oW2EtekEtWjAtOS1dKykvKFthLXotMC05XSspXCIsXG4gICAgICAgICAgICAgICAgICAgIHVzZXM6IFwiZGV0YWlsc1wiLFxuICAgICAgICAgICAgICAgICAgICBzZXRUbzogYXdhaXQgcHJlc2VuY2UuZ2V0U2V0dGluZyhcIkFuaW1lRGV0YWlsc1wiKSxcbiAgICAgICAgICAgICAgICAgICAgaWY6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrOiBwcml2YWN5ICYmIGFuaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHY6IChhd2FpdCBzdHJpbmdzKS53YXRjaFNlcmllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgazogIWFuaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2U6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogXCIldGl0bGUlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiBkYXRhLm1ldGEudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBcIiVlcGlzb2RlJVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dDogZGF0YS5tZXRhLmVwaXNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwYWdlOiBcIi9hbmltZS8oZHVibGFkb3xsZWdlbmRhZG8pLyhbYS16QS1aMC05LV0rKS8oW2Etei0wLTldKylcIixcbiAgICAgICAgICAgICAgICAgICAgdXNlczogXCJzdGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBzZXRUbzogQW5pbWVTdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgaWY6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGs6ICFhbmltZSB8fCBwcml2YWN5IHx8IEFuaW1lU3RhdGUuaW5jbHVkZXMoXCJ7MH1cIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlcGxhY2U6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogXCIldGl0bGUlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiBkYXRhLm1ldGEudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBcIiVlcGlzb2RlJVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dDogZGF0YS5tZXRhLmVwaXNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwYWdlOiBcIi9maWxtZS8oZHVibGFkb3xsZWdlbmRhZG8pLyhbYS16QS1aMC05LV0rKS8oW2Etei0wLTldKylcIixcbiAgICAgICAgICAgICAgICAgICAgdXNlczogXCJkZXRhaWxzXCIsXG4gICAgICAgICAgICAgICAgICAgIHNldFRvOiBhd2FpdCBwcmVzZW5jZS5nZXRTZXR0aW5nKFwiTW92aWVEZXRhaWxzXCIpLFxuICAgICAgICAgICAgICAgICAgICBpZjogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGs6IHByaXZhY3kgJiYgbW92aWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdjogKGF3YWl0IHN0cmluZ3MpLndhdGNoTW92aWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGs6ICFtb3ZpZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IFwiJXRpdGxlJVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dDogZGF0YS5tZXRhLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZTogXCIvZmlsbWUvKGR1YmxhZG98bGVnZW5kYWRvKS8oW2EtekEtWjAtOS1dKykvKFthLXotMC05XSspXCIsXG4gICAgICAgICAgICAgICAgICAgIHVzZXM6IFwic3RhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgc2V0VG86IE1vdmllU3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIGlmOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrOiAhbW92aWUgfHwgcHJpdmFjeSB8fCBNb3ZpZVN0YXRlLmluY2x1ZGVzKFwiezB9XCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IFwiJXRpdGxlJVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dDogZGF0YS5tZXRhLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICBdO1xuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEucHJlc2VuY2UpKSB7XG4gICAgICAgIGlmIChwYXRobmFtZS5tYXRjaChrKSAmJiAhdi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgdi5zZXRQcmVzZW5jZURhdGEoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qgc2V0dGluZyBvZiBkYXRhLnNldHRpbmdzKSB7XG4gICAgICAgIGNvbnN0IHNldHRpbmdWYWx1ZSA9IGF3YWl0IHByZXNlbmNlXG4gICAgICAgICAgICAuZ2V0U2V0dGluZyhzZXR0aW5nLmlkKVxuICAgICAgICAgICAgLmNhdGNoKCgpID0+IG51bGwpO1xuICAgICAgICBpZiAoKCghc2V0dGluZ1ZhbHVlICYmICFzZXR0aW5nLnZhbHVlKSB8fCBzZXR0aW5nVmFsdWUgPT09IHNldHRpbmcudmFsdWUpICYmXG4gICAgICAgICAgICBzZXR0aW5nLmRlbGV0ZSAmJlxuICAgICAgICAgICAgIXNldHRpbmcucHJlc2VuY2UpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgUERhdGEgb2Ygc2V0dGluZy51c2VzKVxuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhLnByZXNlbmNlRGF0YVtQRGF0YV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2V0dGluZy5wcmVzZW5jZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwcmVzZW5jZVNldHRpbmcgb2Ygc2V0dGluZy5wcmVzZW5jZSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXRobmFtZS5tYXRjaChwcmVzZW5jZVNldHRpbmcucGFnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXNlbmNlU2V0dGluZy5zZXRUbyAmJiAhcHJlc2VuY2VTZXR0aW5nLnJlcGxhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJlc2VuY2VEYXRhW3ByZXNlbmNlU2V0dGluZy51c2VzXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VTZXR0aW5nLnNldFRvO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZXNlbmNlU2V0dGluZy5zZXRUbyAmJiBwcmVzZW5jZVNldHRpbmcucmVwbGFjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlcGxhY2VkID0gcHJlc2VuY2VTZXR0aW5nLnNldFRvO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0b1JlcGxhY2Ugb2YgcHJlc2VuY2VTZXR0aW5nLnJlcGxhY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZWQgPSByZXBsYWNlZC5yZXBsYWNlKHRvUmVwbGFjZS5pbnB1dCwgdG9SZXBsYWNlLm91dHB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVwbGFjZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmVzZW5jZURhdGFbcHJlc2VuY2VTZXR0aW5nLnVzZXNdID0gcmVwbGFjZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXNlbmNlU2V0dGluZy5pZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJlc2VuY2VTZXR0aW5nLmlmKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc2V0dGluZyBvZiBwcmVzZW5jZVNldHRpbmcuaWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmcuaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmcuZGVsZXRlICYmICFzZXR0aW5nLnYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGRhdGEucHJlc2VuY2VEYXRhW3ByZXNlbmNlU2V0dGluZy51c2VzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNldHRpbmcudikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJlc2VuY2VEYXRhW3ByZXNlbmNlU2V0dGluZy51c2VzXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmcudjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZXNlbmNlU2V0dGluZy5pZi5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXNlbmNlU2V0dGluZy5pZi5kZWxldGUgJiYgIXByZXNlbmNlU2V0dGluZy5pZi52KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZGF0YS5wcmVzZW5jZURhdGFbcHJlc2VuY2VTZXR0aW5nLnVzZXNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZXNlbmNlU2V0dGluZy5pZi52KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJlc2VuY2VEYXRhW3ByZXNlbmNlU2V0dGluZy51c2VzXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZVNldHRpbmcuaWYudjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCB4IG9mIFtcInN0YXRlXCIsIFwiZGV0YWlsc1wiXSkge1xuICAgICAgICBpZiAoZGF0YS5wcmVzZW5jZURhdGFbeF0gPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICBkZWxldGUgZGF0YS5wcmVzZW5jZURhdGFbeF07XG4gICAgfVxuICAgIGlmICghZGF0YS5wcmVzZW5jZURhdGEuZGV0YWlscylcbiAgICAgICAgcHJlc2VuY2Uuc2V0QWN0aXZpdHkoKTtcbiAgICBlbHNlXG4gICAgICAgIHByZXNlbmNlLnNldEFjdGl2aXR5KGRhdGEucHJlc2VuY2VEYXRhKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY0hKbGMyVnVZMlV1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SndjbVZ6Wlc1alpTNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGSkxGRkJRVkVzUTBGQlF6dEpRVU0xUWl4UlFVRlJMRVZCUVVVc2IwSkJRVzlDTzBOQlF6bENMRU5CUVVNc1JVRkRSaXhWUVVGVkxFZEJRVWNzUzBGQlN5eEpRVUZKTEVWQlFVVTdTVUZEZGtJc1QwRkJUeXhSUVVGUkxFTkJRVU1zVlVGQlZTeERRVU42UWp0UlFVTkRMRWxCUVVrc1JVRkJSU3hwUWtGQmFVSTdVVUZEZGtJc1MwRkJTeXhGUVVGRkxHZENRVUZuUWp0UlFVTjJRaXhOUVVGTkxFVkJRVVVzYTBKQlFXdENPMUZCUXpGQ0xGTkJRVk1zUlVGQlJTeHRRa0ZCYlVJN1VVRkRPVUlzWlVGQlpTeEZRVUZGTEhsQ1FVRjVRanRSUVVNeFF5eFhRVUZYTEVWQlFVVXNNa0pCUVRKQ08xRkJRM2hETEZOQlFWTXNSVUZCUlN4dFFrRkJiVUk3VVVGRE9VSXNWVUZCVlN4RlFVRkZMREJDUVVFd1FqdFJRVU4wUXl4WFFVRlhMRVZCUVVVc2NVSkJRWEZDTzFGQlEyeERMRk5CUVZNc1JVRkJSU3h0UWtGQmJVSTdVVUZET1VJc1pVRkJaU3hGUVVGRkxIbENRVUY1UWp0UlFVTXhReXhWUVVGVkxFVkJRVVVzZFVKQlFYVkNPMUZCUTI1RExGZEJRVmNzUlVGQlJTeDNRa0ZCZDBJN1MwRkRja01zUlVGRFJDeE5RVUZOTEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVZNc1RVRkJUU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVNelJDeERRVUZETzBGQlEwZ3NRMEZCUXl4RlFVTkVMRWxCUVVrc1IwRjFRMEU3U1VGRFNDeFJRVUZSTEVWQlFVVXNSVUZCUlR0SlFVTmFMRWxCUVVrc1JVRkJSU3hGUVVGRk8wbEJRMUlzVDBGQlR5eEZRVUZGTEVWQlFVVTdTVUZEV0N4WlFVRlpMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJRenRKUVVOdVF5eFpRVUZaTEVWQlFVVTdVVUZEWWl4SlFVRkpMRWRCUVhWQ08xRkJRek5DTEdGQlFXRXNSVUZEV2l4clJVRkJhMFU3VVVGRGJrVXNZVUZCWVN4clJFRkJaVHRMUVVNMVFqdERRVU5FTEVOQlFVTTdRVUZGU0N4SlFVRkpMRTlCUVN0RExFVkJRMnhFTEV0QlNVTXNRMEZCUXp0QlFVVklMRkZCUVZFc1EwRkJReXhGUVVGRkxFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTXNTVUZCYTBJc1JVRkJSU3hGUVVGRk8wbEJRMmhFTEVsQlFVa3NTVUZCU1R0UlFVRkZMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGVFSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkZTQ3hSUVVGUkxFTkJRVU1zUlVGQlJTeERRVUZETEZsQlFWa3NSVUZCUlN4TFFVRkxMRWxCUVVrc1JVRkJSVHRKUVVOd1F5eE5RVUZOTEVOQlEwb3NUMEZCVHl4RlFVTlFMRTlCUVU4c1JVRkRVQ3hMUVVGTExFVkJRMHdzUzBGQlN5eEZRVU5NTEUxQlFVMHNSVUZEVGl4VFFVRlRMRVZCUTFRc1ZVRkJWU3hGUVVOV0xGVkJRVlVzUlVGRFZpeEhRVUZITEUxQlFVMHNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJRenRSUVVOeVFpeFJRVUZSTEVOQlFVTXNWVUZCVlN4RFFVRlRMRTFCUVUwc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRja1FzVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCVlN4VFFVRlRMRU5CUVVNN1VVRkRka01zVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCVlN4UFFVRlBMRU5CUVVNN1VVRkRja01zVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCVlN4UFFVRlBMRU5CUVVNN1VVRkRja01zVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCVlN4UlFVRlJMRU5CUVVNN1VVRkRkRU1zVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCVlN4WFFVRlhMRU5CUVVNN1VVRkRla01zVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCVXl4WlFVRlpMRU5CUVVNN1VVRkRla01zVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCVXl4WlFVRlpMRU5CUVVNN1MwRkRla01zUTBGQlF5eEZRVU5HTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTFCUVUwc1JVRkJSU3hKUVVGSkxFVkJRVVVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkRPMGxCUldoRUxFbEJRVWtzU1VGQlNTeERRVUZETEU5QlFVOHNTMEZCU3l4UFFVRlBMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVU3VVVGRGVrTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU03VVVGRGRrSXNUMEZCVHl4SFFVRkhMRTFCUVUwc1ZVRkJWU3hGUVVGRkxFTkJRVU03UzBGRE4wSTdTVUZGUkN4SlFVRkpMRTFCUVUwN1VVRkJSU3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRE8wbEJRM1pFTEVsQlEwTXNVMEZCVXp0UlFVTlVMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eGpRVUZqTzFGQlEycERMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eFpRVUZaTzFGQlJTOUNMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zWTBGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNN1NVRkZkRVFzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnp0UlFVTm1MSGxFUVVGNVJDeEZRVUZGTzFsQlF6RkVMRkZCUVZFc1JVRkJSU3hEUVVGRExFdEJRVXM3V1VGRGFFSXNTMEZCU3l4RFFVRkRMR1ZCUVdVN1owSkJRM0JDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlEzcERMSE5DUVVGelFpeERRVU4wUWl4RlFVRkZMRmRCUVZjc1EwRkJRenRuUWtGRFppeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhSUVVGUk8zRkNRVU40UWl4aFFVRmhMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTTdiMEpCUTJwRExFVkJRVVVzVjBGQlZ5eEZRVUZGTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0blFrRkZMME1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTA3YjBKQlF6ZERMRU5CUVVNN2IwSkJRMFFzUTBGQlF5d3JRMEZCV1N4RFFVRkRPMmRDUVVObUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNZMEZCWXl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTk8yOUNRVU01UXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFOUJRVThzUTBGQlF5eERRVUZETEV0QlFVczdiMEpCUTNaQ0xFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNUMEZCVHl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRE8yZENRVVY0UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zWTBGQll5eEZRVUZGTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1dVRkJXU3hEUVVGRE8yOUNRVU5xUlN4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eFhRVUZYTEVWQlFVVXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8yZENRVU16UkN4TlFVRk5MRk5CUVZNc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVU4yUXl3d1FrRkJNRUlzUTBGRE1VSXNSVUZCUlN4SlFVRkpMRU5CUVVNN1owSkJRMUlzU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlR0dlFrRkRaaXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSMEZCUnp0M1FrRkRNMEk3TkVKQlEwTXNTMEZCU3l4RlFVRkZMRU5CUVVNc1RVRkJUU3hQUVVGUExFTkJRVU1zUTBGQlF5eFhRVUZYT3pSQ1FVTnNReXhIUVVGSExFVkJRVVVzU1VGQlNUdDVRa0ZEVkR0eFFrRkRSQ3hEUVVGRE8ybENRVU5HTzNGQ1FVRk5PMjlDUVVOT0xFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4SFFVRkhPM2RDUVVNelFqczBRa0ZEUXl4TFFVRkxMRVZCUVVVc1EwRkJReXhOUVVGTkxFOUJRVThzUTBGQlF5eERRVUZETEZkQlFWYzdORUpCUTJ4RExFZEJRVWNzUlVGQlJTeEpRVUZKTzNsQ1FVTlVPM2RDUVVORU96UkNRVU5ETEV0QlFVc3NSVUZCUlN4RFFVRkRMRTFCUVUwc1QwRkJUeXhEUVVGRExFTkJRVU1zVlVGQlZUczBRa0ZEYWtNc1IwRkJSeXhGUVVGRkxGTkJRVk03ZVVKQlEyUTdjVUpCUTBRc1EwRkJRenRwUWtGRFJqdG5Ra0ZGUkN4SlFVRkpMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVU3YjBKQlEycENMRTlCUVU4c1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eFpRVUZaTEVOQlFVTTdiMEpCUTNSRExFOUJRVThzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4alFVRmpMRU5CUVVNN2FVSkJRM2hETzFsQlEwWXNRMEZCUXp0VFFVTkVPMUZCUTBRc05FTkJRVFJETEVWQlFVVTdXVUZETjBNc1VVRkJVU3hGUVVGRkxFOUJRVThzU1VGQlNTeERRVUZETEV0QlFVczdXVUZETTBJc1MwRkJTeXhEUVVGRExHVkJRV1U3WjBKQlEzQkNMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITEVOQlFVTXNUVUZCVFN4UFFVRlBMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVU03WjBKQlEzUkVMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUzBGQlN5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUXk5RExESkNRVUV5UWl4RFFVTXpRaXhGUVVGRkxGZEJRVmNzUTBGQlF6dG5Ra0ZGWml4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUjBGQlJ6dHZRa0ZETTBJN2QwSkJRME1zUzBGQlN5eEZRVUZGTEVOQlFVTXNUVUZCVFN4UFFVRlBMRU5CUVVNc1EwRkJReXhWUVVGVk8zZENRVU5xUXl4SFFVRkhMRVZCUVVVc1NVRkJTVHR4UWtGRFZEdHBRa0ZEUkN4RFFVRkRPMWxCUTBnc1EwRkJRenRUUVVORU8xRkJRMFFzYzBSQlFYTkVMRVZCUVVVN1dVRkRka1FzVVVGQlVTeEZRVUZGTEVOQlFVTXNTMEZCU3p0WlFVTm9RaXhMUVVGTExFTkJRVU1zWlVGQlpUdG5Ra0ZEY0VJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTzI5Q1FVTmtMRkZCUVZFN2VVSkJRMDRzWVVGQllTeERRVUZETEdsQ1FVRnBRaXhEUVVGRE8zZENRVU5xUXl4RlFVRkZMRmRCUVZjc1JVRkJSU3hQUVVGUExFTkJRM0pDTEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNSVUZCUlN4WFFVRlhMRWxCUVVrc1JVRkJSU3hGUVVOcVJTeEZRVUZGTEVOQlEwWXNTVUZCU1N4RlFVRkZMRU5CUVVNN1owSkJSVllzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTA3YjBKQlF6ZERMRU5CUVVNN2IwSkJRMFFzUTBGQlF5d3JRMEZCV1N4RFFVRkRPMmRDUVVObUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNZMEZCWXl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTk8yOUNRVU01UXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFOUJRVThzUTBGQlF5eERRVUZETEV0QlFVczdiMEpCUTNaQ0xFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNUMEZCVHl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRE8yZENRVVY0UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zWTBGQll5eEZRVUZGTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1dVRkJXU3hEUVVGRE8yOUNRVU5xUlN4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eFhRVUZYTEVWQlFVVXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8yZENRVVV6UkN4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUjBGQlJ6dHZRa0ZETTBJN2QwSkJRME1zUzBGQlN5eEZRVUZGTEVOQlFVTXNUVUZCVFN4UFFVRlBMRU5CUVVNc1EwRkJReXhsUVVGbE8zZENRVU4wUXl4SFFVRkhMRVZCUVVVc1NVRkJTVHR4UWtGRFZEdHBRa0ZEUkN4RFFVRkRPMmRDUVVWR0xFbEJRVWtzUzBGQlN5eERRVUZETEUxQlFVMHNSVUZCUlR0dlFrRkRha0lzVDBGQlR5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRmxCUVZrc1EwRkJRenR2UWtGRGRFTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExHTkJRV01zUTBGQlF6dHBRa0ZEZUVNN1dVRkRSaXhEUVVGRE8xTkJRMFE3VVVGRFJDdzBRMEZCTkVNc1JVRkJSVHRaUVVNM1F5eFJRVUZSTEVWQlFVVXNUMEZCVHl4SlFVRkpMRU5CUVVNc1MwRkJTenRaUVVNelFpeExRVUZMTEVOQlFVTXNaVUZCWlR0blFrRkRjRUlzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFOUJRVThzUTBGQlF5eERRVUZETEZOQlFWTXNRMEZCUXp0blFrRkRkRVFzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGREwwTXNNa0pCUVRKQ0xFTkJRek5DTEVWQlFVVXNWMEZCVnl4RFFVRkRPMmRDUVVWbUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNUMEZCVHl4SFFVRkhPMjlDUVVNelFqdDNRa0ZEUXl4TFFVRkxMRVZCUVVVc1EwRkJReXhOUVVGTkxFOUJRVThzUTBGQlF5eERRVUZETEdWQlFXVTdkMEpCUTNSRExFZEJRVWNzUlVGQlJTeEpRVUZKTzNGQ1FVTlVPMmxDUVVORUxFTkJRVU03V1VGRFNDeERRVUZETzFOQlEwUTdVVUZEUkN4alFVRmpMRVZCUVVVN1dVRkRaaXhSUVVGUkxFVkJRVVVzVDBGQlR6dFpRVU5xUWl4TFFVRkxMRU5CUVVNc1pVRkJaVHRuUWtGRGNFSXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhQUVVGUExFZEJRVWNzUTBGQlF5eE5RVUZOTEU5QlFVOHNRMEZCUXl4RFFVRkRMRmRCUVZjc1EwRkJRenRaUVVONlJDeERRVUZETzFOQlEwUTdVVUZEUkN4WFFVRlhMRVZCUVVVN1dVRkRXaXhMUVVGTExFTkJRVU1zWlVGQlpUdG5Ra0ZEY0VJc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eFBRVUZQTEVkQlFVY3NRMEZCUXl4TlFVRk5MRTlCUVU4c1EwRkJReXhEUVVGRExGTkJRVk1zUTBGQlF6dG5Ra0ZEZEVRc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4bFFVRmxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMWxCUTNKRkxFTkJRVU03VTBGRFJEdExRVU5FTEVOQlFVTTdTVUZGUml4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSE8xRkJRMlk3V1VGRFF5eEZRVUZGTEVWQlFVVXNWMEZCVnp0WlFVTm1MRTFCUVUwc1JVRkJSU3hKUVVGSk8xbEJRMW9zU1VGQlNTeEZRVUZGTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzWTBGQll5eERRVUZETzFOQlEzaERPMUZCUTBRN1dVRkRReXhGUVVGRkxFVkJRVVVzVTBGQlV6dFpRVU5pTEUxQlFVMHNSVUZCUlN4SlFVRkpPMWxCUTFvc1NVRkJTU3hGUVVGRkxFTkJRVU1zVTBGQlV5eERRVUZETzFOQlEycENPMUZCUTBRN1dVRkRReXhGUVVGRkxFVkJRVVVzVTBGQlV6dFpRVU5pTEUxQlFVMHNSVUZCUlN4SlFVRkpPMWxCUTFvc1MwRkJTeXhGUVVGRkxFbEJRVWs3V1VGRFdDeEpRVUZKTEVWQlFVVXNRMEZCUXl4VFFVRlRMRU5CUVVNN1UwRkRha0k3VVVGRFJEdFpRVU5ETEZGQlFWRXNSVUZCUlR0blFrRkRWRHR2UWtGRFF5eEpRVUZKTEVWQlFVVXNWMEZCVnp0dlFrRkRha0lzU1VGQlNTeEZRVUZGTEU5QlFVODdiMEpCUTJJc1JVRkJSU3hGUVVGRk8zZENRVU5JTEVOQlFVTXNSVUZCUlN4UFFVRlBPM2RDUVVOV0xFMUJRVTBzUlVGQlJTeEpRVUZKTzNGQ1FVTmFPMmxDUVVORU8yZENRVU5FTzI5Q1FVTkRMRWxCUVVrc1JVRkJSU3hYUVVGWE8yOUNRVU5xUWl4SlFVRkpMRVZCUVVVc1UwRkJVenR2UWtGRFppeEZRVUZGTEVWQlFVVTdkMEpCUTBnc1EwRkJReXhGUVVGRkxFOUJRVTg3ZDBKQlExWXNRMEZCUXl4RlFVRkZMRU5CUVVNc1RVRkJUU3hQUVVGUExFTkJRVU1zUTBGQlF5eGxRVUZsTzNGQ1FVTnNRenRwUWtGRFJEdG5Ra0ZEUkR0dlFrRkRReXhKUVVGSkxFVkJRVVVzZVVSQlFYbEVPMjlDUVVNdlJDeEpRVUZKTEVWQlFVVXNVMEZCVXp0dlFrRkRaaXhMUVVGTExFVkJRVVVzVFVGQlRTeFJRVUZSTEVOQlFVTXNWVUZCVlN4RFFVRlRMR05CUVdNc1EwRkJRenR2UWtGRGVFUXNSVUZCUlN4RlFVRkZPM2RDUVVOSU96UkNRVU5ETEVOQlFVTXNSVUZCUlN4UFFVRlBMRWxCUVVrc1MwRkJTenMwUWtGRGJrSXNRMEZCUXl4RlFVRkZMRU5CUVVNc1RVRkJUU3hQUVVGUExFTkJRVU1zUTBGQlF5eFhRVUZYTzNsQ1FVTTVRanQzUWtGRFJEczBRa0ZEUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhMUVVGTE96UkNRVU5VTEUxQlFVMHNSVUZCUlN4SlFVRkpPM2xDUVVOYU8zRkNRVU5FTzI5Q1FVTkVMRTlCUVU4c1JVRkJSVHQzUWtGRFVqczBRa0ZEUXl4TFFVRkxMRVZCUVVVc1UwRkJVenMwUWtGRGFFSXNUVUZCVFN4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN6dDVRa0ZEZGtJN2QwSkJRMFE3TkVKQlEwTXNTMEZCU3l4RlFVRkZMRmRCUVZjN05FSkJRMnhDTEUxQlFVMHNSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVTg3ZVVKQlEzcENPM0ZDUVVORU8ybENRVU5FTzJkQ1FVTkVPMjlDUVVORExFbEJRVWtzUlVGQlJTeDVSRUZCZVVRN2IwSkJReTlFTEVsQlFVa3NSVUZCUlN4UFFVRlBPMjlDUVVOaUxFdEJRVXNzUlVGQlJTeFZRVUZWTzI5Q1FVTnFRaXhGUVVGRkxFVkJRVVU3ZDBKQlEwZ3NRMEZCUXl4RlFVRkZMRU5CUVVNc1MwRkJTeXhKUVVGSkxFOUJRVThzU1VGQlNTeFZRVUZWTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJRenQzUWtGRGJFUXNUVUZCVFN4RlFVRkZMRWxCUVVrN2NVSkJRMW83YjBKQlEwUXNUMEZCVHl4RlFVRkZPM2RDUVVOU096UkNRVU5ETEV0QlFVc3NSVUZCUlN4VFFVRlRPelJDUVVOb1FpeE5RVUZOTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTE8zbENRVU4yUWp0M1FrRkRSRHMwUWtGRFF5eExRVUZMTEVWQlFVVXNWMEZCVnpzMFFrRkRiRUlzVFVGQlRTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUenQ1UWtGRGVrSTdjVUpCUTBRN2FVSkJRMFE3WjBKQlEwUTdiMEpCUTBNc1NVRkJTU3hGUVVGRkxIbEVRVUY1UkR0dlFrRkRMMFFzU1VGQlNTeEZRVUZGTEZOQlFWTTdiMEpCUTJZc1MwRkJTeXhGUVVGRkxFMUJRVTBzVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCVXl4alFVRmpMRU5CUVVNN2IwSkJRM2hFTEVWQlFVVXNSVUZCUlR0M1FrRkRTRHMwUWtGRFF5eERRVUZETEVWQlFVVXNUMEZCVHl4SlFVRkpMRXRCUVVzN05FSkJRMjVDTEVOQlFVTXNSVUZCUlN4RFFVRkRMRTFCUVUwc1QwRkJUeXhEUVVGRExFTkJRVU1zVlVGQlZUdDVRa0ZETjBJN2QwSkJRMFE3TkVKQlEwTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1MwRkJTenMwUWtGRFZDeE5RVUZOTEVWQlFVVXNTVUZCU1R0NVFrRkRXanR4UWtGRFJEdHZRa0ZEUkN4UFFVRlBMRVZCUVVVN2QwSkJRMUk3TkVKQlEwTXNTMEZCU3l4RlFVRkZMRk5CUVZNN05FSkJRMmhDTEUxQlFVMHNSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXM3ZVVKQlEzWkNPM0ZDUVVORU8ybENRVU5FTzJkQ1FVTkVPMjlDUVVORExFbEJRVWtzUlVGQlJTeDVSRUZCZVVRN2IwSkJReTlFTEVsQlFVa3NSVUZCUlN4UFFVRlBPMjlDUVVOaUxFdEJRVXNzUlVGQlJTeFZRVUZWTzI5Q1FVTnFRaXhGUVVGRkxFVkJRVVU3ZDBKQlEwZ3NRMEZCUXl4RlFVRkZMRU5CUVVNc1MwRkJTeXhKUVVGSkxFOUJRVThzU1VGQlNTeFZRVUZWTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJRenQzUWtGRGJFUXNUVUZCVFN4RlFVRkZMRWxCUVVrN2NVSkJRMW83YjBKQlEwUXNUMEZCVHl4RlFVRkZPM2RDUVVOU096UkNRVU5ETEV0QlFVc3NSVUZCUlN4VFFVRlRPelJDUVVOb1FpeE5RVUZOTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTE8zbENRVU4yUWp0eFFrRkRSRHRwUWtGRFJEdGhRVU5FTzFOQlEwUTdTMEZEUkN4RFFVRkRPMGxCUlVZc1MwRkJTeXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4SlFVRkpMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZPMUZCUTI1RUxFbEJRVWtzVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eFJRVUZSTEVWQlFVVTdXVUZEY2tNc1EwRkJReXhEUVVGRExHVkJRV1VzUlVGQlJTeERRVUZETzFsQlEzQkNMRTFCUVUwN1UwRkRUanRMUVVORU8wbEJSVVFzUzBGQlN5eE5RVUZOTEU5QlFVOHNTVUZCU1N4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRk8xRkJRM0JETEUxQlFVMHNXVUZCV1N4SFFVRkhMRTFCUVUwc1VVRkJVVHRoUVVOcVF5eFZRVUZWTEVOQlFWVXNUMEZCVHl4RFFVRkRMRVZCUVVVc1EwRkJRenRoUVVNdlFpeExRVUZMTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRmNFSXNTVUZEUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhaUVVGWkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1dVRkJXU3hMUVVGTExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTTdXVUZEY2tVc1QwRkJUeXhEUVVGRExFMUJRVTA3V1VGRFpDeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUTJoQ08xbEJRMFFzUzBGQlN5eE5RVUZOTEV0QlFVc3NTVUZCU1N4UFFVRlBMRU5CUVVNc1NVRkJTVHRuUWtGREwwSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFdEJRVEpDTEVOQlFVTXNRMEZCUXp0VFFVTjJSRHRoUVVGTkxFbEJRVWtzVDBGQlR5eERRVUZETEZGQlFWRXNSVUZCUlR0WlFVTTFRaXhMUVVGTExFMUJRVTBzWlVGQlpTeEpRVUZKTEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUVVVN1owSkJReTlETEVsQlFVa3NVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVTdiMEpCUTNwRExFbEJRVWtzWlVGQlpTeERRVUZETEV0QlFVc3NTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhQUVVGUExFVkJRVVU3ZDBKQlEzUkVMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFXbENMRU5CUVVNN05FSkJRMjVFTEdWQlFXVXNRMEZCUXl4TFFVRkxMRU5CUVVNN2NVSkJRM1pDTzNsQ1FVRk5MRWxCUVVrc1pVRkJaU3hEUVVGRExFdEJRVXNzU1VGQlNTeGxRVUZsTEVOQlFVTXNUMEZCVHl4RlFVRkZPM2RDUVVNMVJDeEpRVUZKTEZGQlFWRXNSMEZCUnl4bFFVRmxMRU5CUVVNc1MwRkJTeXhEUVVGRE8zZENRVVZ5UXl4TFFVRkxMRTFCUVUwc1UwRkJVeXhKUVVGSkxHVkJRV1VzUTBGQlF5eFBRVUZQT3pSQ1FVTTVReXhSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0M1FrRkZhRVVzU1VGQlNTeFJRVUZST3pSQ1FVTllMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFXbENMRU5CUVVNc1IwRkJSeXhSUVVGUkxFTkJRVU03Y1VKQlEycEZPMjlDUVVWRUxFbEJRVWtzWlVGQlpTeERRVUZETEVWQlFVVXNSVUZCUlR0M1FrRkRka0lzU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMR1ZCUVdVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJUczBRa0ZEZEVNc1MwRkJTeXhOUVVGTkxFOUJRVThzU1VGQlNTeGxRVUZsTEVOQlFVTXNSVUZCUlN4RlFVRkZPMmREUVVONlF5eEpRVUZKTEU5QlFVOHNRMEZCUXl4RFFVRkRMRVZCUVVVN2IwTkJRMlFzU1VGQlNTeFBRVUZQTEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03ZDBOQlF5OUNMRTlCUVU4c1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN2VVTkJRek5ETEVsQlFVa3NUMEZCVHl4RFFVRkRMRU5CUVVNc1JVRkJSVHQzUTBGRGJrSXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQmFVSXNRMEZCUXpzMFEwRkRia1FzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0eFEwRkRXRHRwUTBGRFJEczJRa0ZEUkR0NVFrRkRSRHMyUWtGQlRTeEpRVUZKTEdWQlFXVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRk96UkNRVU5vUXl4SlFVRkpMR1ZCUVdVc1EwRkJReXhGUVVGRkxFTkJRVU1zVFVGQlRTeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8yZERRVU55UkN4UFFVRlBMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMmxEUVVNelF5eEpRVUZKTEdWQlFXVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRk8yZERRVU01UWl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZwUWl4RFFVRkRPMjlEUVVOdVJDeGxRVUZsTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenMyUWtGRGRFSTdlVUpCUTBRN2NVSkJRMFE3YVVKQlEwUTdZVUZEUkR0VFFVTkVPMHRCUTBRN1NVRkZSQ3hMUVVGTExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRk5CUVZNc1EwRkJReXhGUVVGRk8xRkJRM0pETEVsQlFVa3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGakxFTkJRVU1zUzBGQlN5eFhRVUZYTzFsQlEzQkVMRTlCUVU4c1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZqTEVOQlFVTXNRMEZCUXp0TFFVTXhRenRKUVVWRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4N1VVRkJSU3hSUVVGUkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTTdPMUZCUTJ4RUxGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8wRkJRemxETEVOQlFVTXNRMEZCUXl4RFFVRkRJbjA9Il0sIm5hbWVzIjpbInByZXNlbmNlIiwiUHJlc2VuY2UiLCJjbGllbnRJZCIsImdldFN0cmluZ3MiLCJhc3luYyIsInBsYXkiLCJwYXVzZSIsImJyb3dzZSIsInNlYXJjaEZvciIsInNlYXJjaFNvbWV0aGluZyIsInZpZXdFcGlzb2RlIiwidmlld0FuaW1lIiwidmlld1NlcmllcyIsInZpZXdBY2NvdW50Iiwidmlld01vdmllIiwiYnV0dG9uVmlld01vdmllIiwid2F0Y2hNb3ZpZSIsIndhdGNoU2VyaWVzIiwiZ2V0U2V0dGluZyIsImNhdGNoIiwiZGF0YSIsIm1ldGEiLCJvbGRMYW5nIiwic3RhcnRlZFNpbmNlIiwiRGF0ZSIsIm5vdyIsInByZXNlbmNlRGF0YSIsInR5cGUiLCJsYXJnZUltYWdlS2V5Iiwic21hbGxJbWFnZUtleSIsInN0cmluZ3MiLCJ2aWRlbyIsIm9uIiwibmV3TGFuZyIsInByaXZhY3kiLCJhbmltZSIsIm1vdmllIiwidGltZXN0YW1wIiwiQW5pbWVTdGF0ZSIsIk1vdmllU3RhdGUiLCJQcm9taXNlIiwiYWxsIiwicGF0aG5hbWUiLCJzZWFyY2giLCJocmVmIiwiZG9jdW1lbnQiLCJsb2NhdGlvbiIsImRldGFpbHMiLCJzdGFydFRpbWVzdGFtcCIsImVuZFRpbWVzdGFtcCIsImRpc2FibGVkIiwiZXBpc29kZSIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZXh0Q29udGVudCIsInRpdGxlIiwicmVwbGFjZSIsInBhdXNlZCIsInNtYWxsSW1hZ2VUZXh0IiwiZ2V0VGltZXN0YW1wcyIsImN1cnJlbnRUaW1lIiwiZHVyYXRpb24iLCJzZXJpZXNVUkwiLCJidXR0b25zIiwibGFiZWwiLCJ1cmwiLCJzdGF0ZSIsIlVSTFNlYXJjaFBhcmFtcyIsImdldCIsInNldHRpbmdzIiwiaWQiLCJkZWxldGUiLCJ1c2VzIiwidmFsdWUiLCJwYWdlIiwiaWYiLCJrIiwidiIsInNldFRvIiwiaW5wdXQiLCJvdXRwdXQiLCJpbmNsdWRlcyIsIk9iamVjdCIsImVudHJpZXMiLCJtYXRjaCIsInNldFByZXNlbmNlRGF0YSIsInNldHRpbmciLCJzZXR0aW5nVmFsdWUiLCJwcmVzZW5jZVNldHRpbmciLCJyZXBsYWNlZCIsInRvUmVwbGFjZSIsIkFycmF5IiwiaXNBcnJheSIsIlBEYXRhIiwieCIsInNldEFjdGl2aXR5Il0sInNvdXJjZVJvb3QiOiIifQ==
undefined;