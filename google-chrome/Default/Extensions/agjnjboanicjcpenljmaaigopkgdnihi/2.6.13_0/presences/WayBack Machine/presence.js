var __webpack_exports__={};const presence=new Presence({clientId:"941298758598164481"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/W/WayBack%20Machine/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:t,href:s}=window.location,a=t.split("/")[2],r=document.querySelector("#react-wayback-search > div.search-toolbar > div.search-text-container > form > div > div > input.rbt-input-main.form-control.rbt-input"),n=await presence.getSetting("buttons");switch(t.split("/")[1]){case"":r?.value?(e.details="Searching for",e.state=r.value,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png"):e.details="Viewing the home page";break;case"web":document.querySelector('[class="search-size"]')||document.querySelector('[class="captures-range-info"]')?(e.details="Viewing results for",e.state=document.querySelector('[class="snippet"]')?.textContent??document.querySelector('[title*="Calendar of "]').getAttribute("title").replace("Calendar of ","").split("/")[2]):(e.largeImageKey=document.querySelector('[property="og:image"]')?.content??"https://cdn.rcd.gg/PreMiD/websites/W/WayBack%20Machine/assets/logo.png",e.details=document.location.pathname.split("/")[5].replace("www.",""),e.state=`${a.substring(6,8)}/${a.substring(4,6)}/${a.substring(0,4)} ${a.substring(8,10)}:${a.substring(10,12)}:${a.substring(12,14)}`),e.buttons=[{label:"View Page",url:s}];break;case"details":e.details="Viewing results for",e.state=document.querySelector('[class="result-headline text-center"]')?.textContent.slice(4),e.buttons=[{label:"View Page",url:s}]}n||delete e.buttons,e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;