var __webpack_exports__={};const presence=new Presence({clientId:"920135248006754394"}),browsingTimestamp=Math.floor(Date.now()/1e3),pathData={user:[{name:"supports",state:"My subscriptions history"},{name:"edit",state:"Editing my details"}],dashboard:[{name:"overview",state:"My overview"},{name:"onboarding",state:"Starting up"},{name:"goal",state:"My goal"},{name:"tiers",state:"My support tiers",paths:[{name:"setup",state:"Setting up supporter tiers..."},{name:"add",state:"Adding new supporter tier..."},{name:"*",state:"Editing supporter tier..."}]},{name:"posts",state:"My posts",paths:[{name:"add",state:"Making new post..."},{name:"*",state:"Editing my post..."}]},{name:"vouchers",state:"My vouchers",paths:[{name:"add",state:"Making new voucher..."},{name:"*",state:"Editing my voucher..."}]},{name:"overlay",state:"Stream overlay"},{name:"supports",state:"Supports history"},{name:"bank",state:"Payment"},{name:"profile",state:"Editing profile"},{name:"settings",state:"Settings"}]},getUserHeader=".q-page-container.q-pb-xl.main",getUserHeaderHome=".title.q-toolbar__title.ellipsis a.no-underline.text-primary.router-link-active",stateSetter=(e,t)=>{const a=t.find((t=>t.name===e[1]));return a.paths?.find((t=>{const a=t.name===(e[2]??"");return!a&&e[2]?"*"===t.name:a}))?.state??a.state};presence.on("UpdateData",(()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/K/KaryaKarsa/assets/logo.png",startTimestamp:browsingTimestamp},t=window.location.pathname.split("/").splice(1);switch(t[0].toLowerCase()){case"":e.details="Looking at the home page";break;case"feed":e.details="Looking at the feeds";break;case"profile":e.details="Looking at their profile";break;case"about":case"terms":e.details="Reading Terms of Service";break;case"dashboard":e.details="Looking at the dashboard",e.state=stateSetter(t,pathData.dashboard);break;case"discover":{e.details="Looking at the discover / search";const t=document.querySelector(".q-field.q-input.q-field--filled.q-field--square.q-field--float.q-validation-component input.q-field__native.q-placeholder");t?.value&&(e.state=`Searching for "${t.value}"`);break}case"user":e.details="Looking at My detail",e.state=stateSetter(t,pathData.user);break;default:e.details="Browsing pages",t[0]||(e.details="Looking at the home page");{const t=document.querySelector(`${getUserHeader} .q-px-md.q-py-md div`),a=document.querySelector(`${getUserHeader} .q-px-md.q-py-md .text-caption.text-grey-7`);t&&a&&(e.details=t.textContent,e.state=a.textContent,e.buttons=[{label:"Visit Creator",url:window.location.href}])}{const t=document.querySelector(getUserHeaderHome),a=document.querySelector("#q-app > div > div > div.q-page-container.main.q-pb-xl.bordered-desktop.post-page > div.post-date.text-body2.q-px-md.q-pt-md.q-pb-sm.post-content > a"),s=document.querySelector("#q-app > div > div > div.q-page-container.main.q-pb-xl.bordered-desktop.post-page > h1");t&&a&&s&&(e.details=`${t.textContent} (${a.textContent})`,e.state=s.textContent,e.buttons=[{label:"View post",url:window.location.href}])}}presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;