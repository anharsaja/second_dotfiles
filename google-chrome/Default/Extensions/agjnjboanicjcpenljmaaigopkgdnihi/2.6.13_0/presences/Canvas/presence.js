var __webpack_exports__={};const presence=new Presence({clientId:"1023383174027415572"}),browsingTimestamp=Math.floor(Date.now()/1e3),canvasDataFunctions={announcement:(e,a,t)=>e.details=applyPrivacy("Viewing announcements",a,t),discussion:(e,a,t,s)=>{switch(t[0]??""){case"":e.details=applyPrivacy("Viewing discussions",a,s);break;case"new":e.details=applyPrivacy("Creating a new "+("Announcements"===getNavigationPath()[1]?"announcement":"discussion"),a,s),s||(e.state=document.querySelector("#discussion-title").value);break;default:"edit"===t[1]?(e.details=applyPrivacy("Editing a "+("Announcements"===getNavigationPath()[1]?"announcement":"discussion"),a,s),s||(e.state=document.querySelector("#discussion-title").value)):(e.details=applyPrivacy("Viewing a "+("Announcements"===getNavigationPath()[1]?"announcement":"discussion"),a,s),s||(e.state=document.querySelector(".discussion-title").textContent))}},pages:(e,a,t,s)=>{if(t[0])"edit"===t[1]?(e.details=applyPrivacy("Editing a page",a,s),s||(e.state=document.querySelector("#title").value)):(e.details=applyPrivacy("Viewing a page",a,s),s||(e.state=document.querySelector(".page-title").textContent));else{const t=document.querySelector("#title");t?(e.details=applyPrivacy("Creating a page",a,s),s||(e.state=t.value)):e.details=applyPrivacy("Viewing pages",a,s)}},files:(e,a=null,t)=>{e.details=a?applyPrivacy("Browsing files",a,t):"Browsing files",t||(e.state=document.querySelector("#breadcrumbs>ul>li+li:last-of-type a").textContent)},collaborations:(e,a,t)=>{"none"!==document.querySelector("#new_collaboration").style.display?(e.details=applyPrivacy("Creating a collaboration",a,t),t||(e.state=document.querySelector("#collaboration_collaboration_type").value)):document.querySelector(".edit_collaboration")?(e.details=applyPrivacy("Editing a collaboration",a,t),t||(e.state=document.querySelector("[name='collaboration[title]']").value)):e.details=applyPrivacy("Browsing collaborations",a,t)},conferences:(e,a,t)=>{const s=document.querySelector("#web_conference_conference_type");s?(e.details=applyPrivacy((s.disabled?"Editing":"Creating")+" a conference",a,t),t||(e.state=document.querySelector("#web_conference_title").value)):e.details=applyPrivacy("Browsing conferences",a,t)},people:(e,a,t)=>{e.details=applyPrivacy("Browsing members",a,t)},profile:(e,a)=>{e.details="Viewing a user's profile",a||(e.state=document.querySelector("h2").textContent.trim(),e.smallImageKey=getComputedStyle(document.querySelector(".avatar")).backgroundImage.match(/url\("(.+)"\)/)[1])}};function applyPrivacy(e,a,t){return t?e:`${e} for ${a}`}function getNavigationPath(){return[...document.querySelector("#breadcrumbs > ul")?.children??[]].slice(1).map((e=>e.textContent))}presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/C/Canvas/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:a,hostname:t,search:s}=document.location,i=a.split("/").filter((e=>e)),n=await presence.getSetting("privacyMode");if("www.canvas.net"===t)switch(i[0]??""){case"":e.details="Browsing catalog";break;case"browse":e.details="Browsing course details",e.state=document.querySelector(".h1").textContent;break;case"courses":e.details="Enrolling in a course",e.state=document.querySelector("h2 > span").lastChild.textContent;break;case"dashboard":e.details="Viewing their dashboard";break;case"order_items":e.details="Viewing their purchase history"}else{const a=getNavigationPath(),t=a[a.length-1],c=a[0];switch(i[0]??""){case"":e.details="Viewing dashboard";break;case"about":canvasDataFunctions.profile(e,n);break;case"account_notifications":e.details="Viewing global notifications";break;case"calendar":e.details="Viewing calendar",e.state=document.querySelector(".navigation_title_text").textContent;break;case"conversations":{const a=document.querySelector("#compose-message-subject");a?(e.details="Composing a message",e.state=a.value):e.details="Viewing messages";break}case"courses":if(i[1])switch(i[2]??""){case"":n?e.details="Viewing a course":(e.details="Viewing course",e.state=c);break;case"announcements":canvasDataFunctions.announcement(e,`course: ${c}`,n);break;case"assignments":switch(i[3]??""){case"":e.details=applyPrivacy("Viewing assignments",`course: ${c}`,n);break;case"new":e.details=applyPrivacy("Creating an assignment",`course: ${c}`,n),n||(e.state=document.querySelector("#assignment_name").value);break;case"syllabus":document.querySelector("#course_syllabus_body_ifr")?e.details=applyPrivacy("Editing syllabus",`course: ${c}`,n):e.details=applyPrivacy("Viewing syllabus",`course: ${c}`,n);break;default:switch(i[4]){case"edit":e.details=applyPrivacy("Editing an assignment",`course: ${c}`,n),n||(e.state=document.querySelector("#assignment_name").value);break;case"submissions":e.details=applyPrivacy("Viewing submissions for an assignment",`course: ${c}`,n),n||(e.state=a[2]);break;case"peer_reviews":e.details=applyPrivacy("Viewing peer reviews for an assignment",`course: ${c}`,n),n||(e.state=t);break;default:e.details=applyPrivacy("Viewing assignment",`course: ${c}`,n),n||(e.state=t)}}break;case"collaborations":canvasDataFunctions.collaborations(e,`course: ${c}`,n);break;case"conferences":canvasDataFunctions.conferences(e,`course: ${c}`,n);break;case"discussion_topics":canvasDataFunctions.discussion(e,`course: ${c}`,i.slice(3),n);break;case"external_tools":n?e.details="Viewing external tools for a course":(e.details=`Viewing course: ${c}`,e.state=t);break;case"files":canvasDataFunctions.files(e,`course: ${c}`,n);break;case"gradebook":switch(i[3]){case"history":e.details=applyPrivacy("Viewing grade history",`course: ${c}`,n);break;case"speed_grader":e.details=applyPrivacy("Grading an assignment",`course: ${document.querySelector("#context_title").textContent}`,n),n||(e.state=document.querySelector(".assignmentDetails__Title").textContent);break;default:e.details=applyPrivacy("Viewing gradebook",`course: ${c}`,n)}break;case"grades":i[3]?(e.details=applyPrivacy("Viewing student grades",`course: ${c}`,n),n||(e.state=t)):e.details=applyPrivacy("Viewing grades",`course: ${c}`,n);break;case"groups":e.details=applyPrivacy("Viewing groups",`course: ${c}`,n);break;case"modules":"progressions"===i[3]?e.details=applyPrivacy("Viewing module progression",`course: ${c}`,n):e.details=applyPrivacy("Viewing modules",`course: ${c}`,n);break;case"outcomes":{const a=document.querySelector("[data-testid='createOutcomeModal']"),t=document.querySelector("[data-testid='name-input']");a?(e.details=applyPrivacy("Creating an outcome",`course: ${c}`,n),n||(e.state=a.querySelector("input").value)):t?(e.details=applyPrivacy("Editing an outcome",`course: ${c}`,n),n||(e.state=t.value)):e.details=applyPrivacy("Viewing outcomes",`course: ${c}`,n);break}case"pages":canvasDataFunctions.pages(e,`course: ${c}`,i.slice(3),n);break;case"quizzes":if(i[3])switch(i[4]??""){case"":e.details=applyPrivacy("Viewing a quiz",`course: ${c}`,n),n||(e.state=t);break;case"edit":e.details=applyPrivacy("Editing a quiz",`course: ${c}`,n),n||(e.state=t);break;case"history":e.details=applyPrivacy("Viewing an attempt for a quiz",`course: ${c}`,n),n||(e.state=`${a[2]} - Attempt ${document.querySelector(".quiz_version.selected").textContent.match(/(\d+):/)[1]}`);break;case"moderate":e.details=applyPrivacy("Moderating a quiz",`course: ${c}`,n),n||(e.state=a[2]);break;case"statistics":e.details=applyPrivacy("Viewing statistics for a quiz",`course: ${c}`,n),n||(e.state=a[2]);break;case"submissions":e.details=applyPrivacy("Viewing quiz log",`course: ${c}`,n),n||(e.state=`${a[2]} - ${a[3]}`);break;case"take":{e.details=applyPrivacy("Taking a quiz",`course: ${c}`,n);const a=document.querySelector(".current_question i"),s=document.querySelector(".time_header").textContent.match(/(Running|Elapsed)/i)[1],[,i,r,o,l,u,d]=document.querySelector(".time_running").textContent.match(/(?:([\d,]+) Years?, )?(?:(\d+) Months?, )?(?:(\d+) Days?, )?(?:(\d+) Hours?, )?(?:(\d+) Minutes?, )?(\d+) Seconds?/).map((e=>e?+e.replaceAll(",",""):0)),p=new Date,g=d+60*u+3600*l+86400*o;"Running"===s?(p.setFullYear(p.getFullYear()+i),p.setMonth((p.getMonth()+1+r)%12),p.getMonth()+1+r>12&&p.setFullYear(p.getFullYear()+1),p.setTime(p.getTime()+1e3*g),e.startTimestamp=Math.floor(Date.now()/1e3),e.endTimestamp=Math.floor(p.getTime()/1e3)):(p.setFullYear(p.getFullYear()-i),p.setMonth(12-(p.getMonth()+1-r)%12),p.getMonth()+1-r<0&&p.setFullYear(p.getFullYear()-1),p.setTime(p.getTime()-1e3*g),e.startTimestamp=Math.floor(p.getTime()/1e3)),n||(e.state=a?`${t} - ${a.nextSibling.textContent}`:t);break}}else e.details=applyPrivacy("Viewing quizzes",`course: ${c}`,n);break;case"rubrics":document.querySelector("#rubric_new")?(e.details=applyPrivacy((i[3]?"Editing":"Creating")+" a rubric",`course: ${c}`,n),n||(e.state=document.querySelector("#rubric-title").value)):i[3]?(e.details=applyPrivacy("Viewing rubric",`course: ${c}`,n),n||(e.state=t)):e.details=applyPrivacy("Viewing rubrics",`course: ${c}`,n);break;case"settings":e.details=applyPrivacy("Managing settings",`course: ${c}`,n),n||(e.state=document.querySelector(".ui-tabs-active").textContent);break;case"users":i[3]?canvasDataFunctions.profile(e,n):canvasDataFunctions.people(e,`course: ${c}`,n)}else e.details="Browsing all courses";break;case"files":canvasDataFunctions.files(e,null,n);break;case"groups":if(i[1])switch(e.details="Viewing a group",i[2]??""){case"":n||(e.state=t);break;case"announcements":canvasDataFunctions.announcement(e,`group: ${c}`,n);break;case"pages":canvasDataFunctions.pages(e,`group: ${c}`,i.slice(3),n);break;case"discussion_topics":canvasDataFunctions.discussion(e,`group: ${c}`,i.slice(3),n);break;case"files":canvasDataFunctions.files(e,`group: ${c}`,n);break;case"collaborations":canvasDataFunctions.collaborations(e,`group: ${c}`,n);break;case"conferences":canvasDataFunctions.conferences(e,`group: ${c}`,n);break;case"users":i[3]?canvasDataFunctions.profile(e,n):canvasDataFunctions.people(e,`group: ${c}`,n)}else e.details="Viewing groups";break;case"profile":switch(i[1]??""){case"":{const a=document.querySelector("#name_input");a?(e.details="Editing profile",n||(e.state=a.value)):canvasDataFunctions.profile(e,n);break}case"communication":e.details="Managing notification settings";break;case"content_shares":e.details="Viewing shared content";break;case"settings":e.details="Editing profile settings";break;case"qr_mobile_login":e.details="Viewing QR code"}break;case"search":switch(i[1]){case"all_courses":e.details="Searching all courses",e.state=new URLSearchParams(s).get("search");break;case"rubrics":e.details="Searching rubrics"}break;default:e.details="Browsing",n||(e.state=document.querySelector("h2")?.textContent??document.title)}}e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;