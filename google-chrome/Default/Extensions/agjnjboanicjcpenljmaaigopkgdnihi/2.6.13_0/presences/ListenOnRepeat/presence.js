var __webpack_exports__={};const presence=new Presence({clientId:"639534386538348565"}),strings=presence.getStrings({play:"general.playing",pause:"general.paused"});let timestamps,iFrameVideo,currentTime,duration,paused,playback,lastPlaybackState,browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("iFrameData",(e=>{playback=!!e.iframeVideo.dur,playback&&(({iFrameVideo,paused}=e.iframeVideo),currentTime=e.iframeVideo.currTime,duration=e.iframeVideo.dur)})),presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/L/ListenOnRepeat/assets/logo.png"},[t,a,i]=await Promise.all([presence.getSetting("sGlobalRepeat"),presence.getSetting("sFormatRepeat"),presence.getSetting("sFormatGlobalRepeat")]),s="Repeats",r=document.querySelector("#content > div.main-area-offset > div:nth-child(2) > div.player-card > div > div:nth-child(2) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > button:nth-child(2) > div > div > span").textContent.split(":")[1].split("(")[0].trim(),n=document.querySelector("#content > div.main-area-offset > div:nth-child(2) > div.player-card > div > div:nth-child(2) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > button:nth-child(1) > div > div > span").textContent.split(":")[1].split("(")[0].trim();lastPlaybackState!==playback&&(lastPlaybackState=playback,browsingTimestamp=Math.floor(Date.now()/1e3)),!0!==iFrameVideo||isNaN(duration)?null===iFrameVideo&&isNaN(duration)&&(e.startTimestamp=browsingTimestamp,e.details="Loading video...",[e.state]=document.title.split(" - Listen On Repeat"),e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png"):(timestamps=presence.getTimestamps(Math.floor(currentTime),Math.floor(duration)),e.smallImageKey=paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/repeat.png",e.smallImageText=paused?(await strings).pause:(await strings).play,[e.startTimestamp,e.endTimestamp]=timestamps,[e.details]=document.title.split(" - Listen On Repeat"),e.state=n&&t?i.replace("%repeatm%",s).replace("%repeats%",r).replace("%grepeatm%","Global Repeats").replace("%grepeats%",n):a.replace("%repeatm%",s).replace("%repeats%",r),paused&&(delete e.startTimestamp,delete e.endTimestamp)),e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;