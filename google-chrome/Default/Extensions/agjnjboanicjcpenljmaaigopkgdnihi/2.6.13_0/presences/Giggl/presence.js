var __webpack_exports__={};const presence=new Presence({clientId:"876239113307709493"}),browsingTimestamp=Math.floor(Date.now()/1e3);async function getStrings(){return presence.getStrings({home:"general.viewHome",user:"general.viewUser",call:"general.inCall",reading:"general.readingAbout",browsing:"general.browsing"},await presence.getSetting("lang").catch((()=>"en")))}let strings,oldLang=null;presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/G/Giggl/assets/logo.jpg"},t=await presence.getSetting("privacy"),a=await presence.getSetting("lang").catch((()=>"en")),s=await presence.getSetting("time");switch(oldLang===a&&strings||(oldLang=a,strings=await getStrings()),document.location.hostname){case"giggl.app":switch(document.location.pathname){case"/":e.details=(await strings).home;break;case"/jobs":e.details=`${(await strings).reading} Jobs`;break;case"/isp":e.details=`${(await strings).reading} Giggl Networking`}break;case"canary.giggl.app":e.details=(await strings).browsing,document.location.pathname.startsWith("/portal")?(e.details="In a Portal",[e.state]=document.querySelector("title").textContent.split(" â€¢ ")):document.querySelector("svg.feather.feather-phone-missed")?(e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/call.png",e.smallImageText=(await strings).call):document.querySelector(".feather.feather-map-pin")&&(e.details=(await strings).user,e.state=document.querySelector("p").textContent);break;case"status.giggl.app":e.details="Viewing the status page"}t&&delete e.state,s&&(e.startTimestamp=browsingTimestamp),presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VuY2UuanMiLCJtYXBwaW5ncyI6IjJCQUFBLE1BQU1BLFNBQVcsSUFBSUMsU0FBUyxDQUMxQkMsU0FBVSx1QkFDVkMsa0JBQW9CQyxLQUFLQyxNQUFNQyxLQUFLQyxNQUFRLEtBQ2hEQyxlQUFlQyxhQUNYLE9BQU9ULFNBQVNTLFdBQVcsQ0FDdkJDLEtBQU0sbUJBQ05DLEtBQU0sbUJBQ05DLEtBQU0saUJBQ05DLFFBQVMsdUJBQ1RDLFNBQVUsMEJBQ0xkLFNBQVNlLFdBQVcsUUFBUUMsT0FBTSxJQUFNLE9BQ3JELENBQ0EsSUFBSUMsUUFBU0MsUUFBVSxLQUN2QmxCLFNBQVNtQixHQUFHLGNBQWNYLFVBQ3RCLE1BQU1ZLEVBQWUsQ0FDakJDLGNBQWUsOERBQ2hCQyxRQUFnQnRCLFNBQVNlLFdBQVcsV0FBWVEsUUFBZ0J2QixTQUFTZSxXQUFXLFFBQVFDLE9BQU0sSUFBTSxPQUFPUSxRQUFtQnhCLFNBQVNlLFdBQVcsUUFLekosT0FKSUcsVUFBWUssR0FBWU4sVUFDeEJDLFFBQVVLLEVBQ1ZOLGNBQWdCUixjQUVaZ0IsU0FBU0MsU0FBU0MsVUFDdEIsSUFBSyxZQUNELE9BQVFGLFNBQVNDLFNBQVNFLFVBQ3RCLElBQUssSUFDRFIsRUFBYVMsZUFBaUJaLFNBQVNQLEtBQ3ZDLE1BQ0osSUFBSyxRQUNEVSxFQUFhUyxRQUFVLFVBQVVaLFNBQVNKLGVBQzFDLE1BQ0osSUFBSyxPQUNETyxFQUFhUyxRQUFVLFVBQVVaLFNBQVNKLDJCQUdsRCxNQUVKLElBQUssbUJBQ0RPLEVBQWFTLGVBQWlCWixTQUFTSCxTQUNuQ1csU0FBU0MsU0FBU0UsU0FBU0UsV0FBVyxZQUN0Q1YsRUFBYVMsUUFBVSxlQUN0QlQsRUFBYVcsT0FBU04sU0FDbEJPLGNBQWMsU0FDZEMsWUFBWUMsTUFBTSxRQUVsQlQsU0FBU08sY0FBYyxxQ0FDNUJaLEVBQWFlLGNBQWdCLCtDQUM3QmYsRUFBYWdCLHNCQUF3Qm5CLFNBQVNMLE1BRXpDYSxTQUFTTyxjQUFjLDhCQUM1QlosRUFBYVMsZUFBaUJaLFNBQVNOLEtBQ3ZDUyxFQUFhVyxNQUFRTixTQUFTTyxjQUFjLEtBQUtDLGFBRXJELE1BRUosSUFBSyxtQkFFR2IsRUFBYVMsUUFBVSwwQkFJL0JQLFVBQ09GLEVBQWFXLE1BQ3BCUCxJQUNBSixFQUFhaUIsZUFBaUJsQyxtQkFDbENILFNBQVNzQyxZQUFZbEIsRUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3ByZXNlbmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHByZXNlbmNlID0gbmV3IFByZXNlbmNlKHtcbiAgICBjbGllbnRJZDogXCI4NzYyMzkxMTMzMDc3MDk0OTNcIixcbn0pLCBicm93c2luZ1RpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuYXN5bmMgZnVuY3Rpb24gZ2V0U3RyaW5ncygpIHtcbiAgICByZXR1cm4gcHJlc2VuY2UuZ2V0U3RyaW5ncyh7XG4gICAgICAgIGhvbWU6IFwiZ2VuZXJhbC52aWV3SG9tZVwiLFxuICAgICAgICB1c2VyOiBcImdlbmVyYWwudmlld1VzZXJcIixcbiAgICAgICAgY2FsbDogXCJnZW5lcmFsLmluQ2FsbFwiLFxuICAgICAgICByZWFkaW5nOiBcImdlbmVyYWwucmVhZGluZ0Fib3V0XCIsXG4gICAgICAgIGJyb3dzaW5nOiBcImdlbmVyYWwuYnJvd3NpbmdcIixcbiAgICB9LCBhd2FpdCBwcmVzZW5jZS5nZXRTZXR0aW5nKFwibGFuZ1wiKS5jYXRjaCgoKSA9PiBcImVuXCIpKTtcbn1cbmxldCBzdHJpbmdzLCBvbGRMYW5nID0gbnVsbDtcbnByZXNlbmNlLm9uKFwiVXBkYXRlRGF0YVwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcHJlc2VuY2VEYXRhID0ge1xuICAgICAgICBsYXJnZUltYWdlS2V5OiBcImh0dHBzOi8vY2RuLnJjZC5nZy9QcmVNaUQvd2Vic2l0ZXMvRy9HaWdnbC9hc3NldHMvbG9nby5qcGdcIixcbiAgICB9LCBwcml2YWN5ID0gYXdhaXQgcHJlc2VuY2UuZ2V0U2V0dGluZyhcInByaXZhY3lcIiksIG5ld0xhbmcgPSBhd2FpdCBwcmVzZW5jZS5nZXRTZXR0aW5nKFwibGFuZ1wiKS5jYXRjaCgoKSA9PiBcImVuXCIpLCB0aW1lc3RhbXBzID0gYXdhaXQgcHJlc2VuY2UuZ2V0U2V0dGluZyhcInRpbWVcIik7XG4gICAgaWYgKG9sZExhbmcgIT09IG5ld0xhbmcgfHwgIXN0cmluZ3MpIHtcbiAgICAgICAgb2xkTGFuZyA9IG5ld0xhbmc7XG4gICAgICAgIHN0cmluZ3MgPSBhd2FpdCBnZXRTdHJpbmdzKCk7XG4gICAgfVxuICAgIHN3aXRjaCAoZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWUpIHtcbiAgICAgICAgY2FzZSBcImdpZ2dsLmFwcFwiOiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGRvY3VtZW50LmxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIi9cIjpcbiAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VEYXRhLmRldGFpbHMgPSAoYXdhaXQgc3RyaW5ncykuaG9tZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIi9qb2JzXCI6XG4gICAgICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gYCR7KGF3YWl0IHN0cmluZ3MpLnJlYWRpbmd9IEpvYnNgO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiL2lzcFwiOlxuICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IGAkeyhhd2FpdCBzdHJpbmdzKS5yZWFkaW5nfSBHaWdnbCBOZXR3b3JraW5nYDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiY2FuYXJ5LmdpZ2dsLmFwcFwiOiB7XG4gICAgICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IChhd2FpdCBzdHJpbmdzKS5icm93c2luZztcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5sb2NhdGlvbi5wYXRobmFtZS5zdGFydHNXaXRoKFwiL3BvcnRhbFwiKSkge1xuICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJJbiBhIFBvcnRhbFwiO1xuICAgICAgICAgICAgICAgIFtwcmVzZW5jZURhdGEuc3RhdGVdID0gZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCJ0aXRsZVwiKVxuICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQuc3BsaXQoXCIg4oCiIFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdmcuZmVhdGhlci5mZWF0aGVyLXBob25lLW1pc3NlZFwiKSkge1xuICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5zbWFsbEltYWdlS2V5ID0gXCJodHRwczovL2Nkbi5yY2QuZ2cvUHJlTWlEL3Jlc291cmNlcy9jYWxsLnBuZ1wiO1xuICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5zbWFsbEltYWdlVGV4dCA9IChhd2FpdCBzdHJpbmdzKS5jYWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mZWF0aGVyLmZlYXRoZXItbWFwLXBpblwiKSkge1xuICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gKGF3YWl0IHN0cmluZ3MpLnVzZXI7XG4gICAgICAgICAgICAgICAgcHJlc2VuY2VEYXRhLnN0YXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInBcIikudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwic3RhdHVzLmdpZ2dsLmFwcFwiOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJWaWV3aW5nIHRoZSBzdGF0dXMgcGFnZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChwcml2YWN5KVxuICAgICAgICBkZWxldGUgcHJlc2VuY2VEYXRhLnN0YXRlO1xuICAgIGlmICh0aW1lc3RhbXBzKVxuICAgICAgICBwcmVzZW5jZURhdGEuc3RhcnRUaW1lc3RhbXAgPSBicm93c2luZ1RpbWVzdGFtcDtcbiAgICBwcmVzZW5jZS5zZXRBY3Rpdml0eShwcmVzZW5jZURhdGEpO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljSEpsYzJWdVkyVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKd2NtVnpaVzVqWlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hOUVVGTkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEZGQlFWRXNRMEZCUXp0SlFVTTFRaXhSUVVGUkxFVkJRVVVzYjBKQlFXOUNPME5CUXpsQ0xFTkJRVU1zUlVGRFJpeHBRa0ZCYVVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVVZ1UkN4TFFVRkxMRlZCUVZVc1ZVRkJWVHRKUVVONFFpeFBRVUZQTEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUTNwQ08xRkJRME1zU1VGQlNTeEZRVUZGTEd0Q1FVRnJRanRSUVVONFFpeEpRVUZKTEVWQlFVVXNhMEpCUVd0Q08xRkJRM2hDTEVsQlFVa3NSVUZCUlN4blFrRkJaMEk3VVVGRGRFSXNUMEZCVHl4RlFVRkZMSE5DUVVGelFqdFJRVU12UWl4UlFVRlJMRVZCUVVVc2EwSkJRV3RDTzB0QlF6VkNMRVZCUTBRc1RVRkJUU3hSUVVGUkxFTkJRVU1zVlVGQlZTeERRVUZUTEUxQlFVMHNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZETTBRc1EwRkJRenRCUVVOSUxFTkJRVU03UVVGRlJDeEpRVUZKTEU5QlFTdERMRVZCUTJ4RUxFOUJRVThzUjBGQlZ5eEpRVUZKTEVOQlFVTTdRVUZGZUVJc1VVRkJVU3hEUVVGRExFVkJRVVVzUTBGQlF5eFpRVUZaTEVWQlFVVXNTMEZCU3l4SlFVRkpMRVZCUVVVN1NVRkRjRU1zVFVGQlRTeFpRVUZaTEVkQlFXbENPMUZCUTJwRExHRkJRV0VzUlVGRFdpdzBSRUZCTkVRN1MwRkROMFFzUlVGRFJDeFBRVUZQTEVkQlFVY3NUVUZCVFN4UlFVRlJMRU5CUVVNc1ZVRkJWU3hEUVVGVkxGTkJRVk1zUTBGQlF5eEZRVU4yUkN4UFFVRlBMRWRCUVVjc1RVRkJUU3hSUVVGUkxFTkJRVU1zVlVGQlZTeERRVUZUTEUxQlFVMHNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZEY2tVc1ZVRkJWU3hIUVVGSExFMUJRVTBzVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCVlN4TlFVRk5MRU5CUVVNc1EwRkJRenRKUVVWNlJDeEpRVUZKTEU5QlFVOHNTMEZCU3l4UFFVRlBMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVU3VVVGRGNFTXNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJRenRSUVVOc1FpeFBRVUZQTEVkQlFVY3NUVUZCVFN4VlFVRlZMRVZCUVVVc1EwRkJRenRMUVVNM1FqdEpRVVZFTEZGQlFWRXNVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXhSUVVGUkxFVkJRVVU3VVVGRGJrTXNTMEZCU3l4WFFVRlhMRU5CUVVNc1EwRkJRenRaUVVOcVFpeFJRVUZSTEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hGUVVGRk8yZENRVU51UXl4TFFVRkxMRWRCUVVjN2IwSkJRMUFzV1VGQldTeERRVUZETEU5QlFVOHNSMEZCUnl4RFFVRkRMRTFCUVUwc1QwRkJUeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETzI5Q1FVTTFReXhOUVVGTk8yZENRVU5RTEV0QlFVc3NUMEZCVHp0dlFrRkRXQ3haUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITEVkQlFVY3NRMEZCUXl4TlFVRk5MRTlCUVU4c1EwRkJReXhEUVVGRExFOUJRVThzVDBGQlR5eERRVUZETzI5Q1FVTjZSQ3hOUVVGTk8yZENRVU5RTEV0QlFVc3NUVUZCVFR0dlFrRkRWaXhaUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITEVkQlFVY3NRMEZCUXl4TlFVRk5MRTlCUVU4c1EwRkJReXhEUVVGRExFOUJRVThzYlVKQlFXMUNMRU5CUVVNN2IwSkJRM0pGTEUxQlFVMDdZVUZEVUR0WlFVVkVMRTFCUVUwN1UwRkRUanRSUVVORUxFdEJRVXNzYTBKQlFXdENMRU5CUVVNc1EwRkJRenRaUVVONFFpeFpRVUZaTEVOQlFVTXNUMEZCVHl4SFFVRkhMRU5CUVVNc1RVRkJUU3hQUVVGUExFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTTdXVUZGYUVRc1NVRkJTU3hSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExFVkJRVVU3WjBKQlEzSkVMRmxCUVZrc1EwRkJReXhQUVVGUExFZEJRVWNzWVVGQllTeERRVUZETzJkQ1FVTnlReXhEUVVGRExGbEJRVmtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4UlFVRlJPM0ZDUVVNM1FpeGhRVUZoTEVOQlFVTXNUMEZCVHl4RFFVRkRPM0ZDUVVOMFFpeFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8yRkJRek5DTzJsQ1FVRk5MRWxCUVVrc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eHJRMEZCYTBNc1EwRkJReXhGUVVGRk8yZENRVU4wUlN4WlFVRlpMRU5CUVVNc1lVRkJZU3hwUkVGQll5eERRVUZETzJkQ1FVTjZReXhaUVVGWkxFTkJRVU1zWTBGQll5eEhRVUZITEVOQlFVTXNUVUZCVFN4UFFVRlBMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU03WVVGRGJrUTdhVUpCUVUwc1NVRkJTU3hSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETERCQ1FVRXdRaXhEUVVGRExFVkJRVVU3WjBKQlF6bEVMRmxCUVZrc1EwRkJReXhQUVVGUExFZEJRVWNzUTBGQlF5eE5RVUZOTEU5QlFVOHNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJRenRuUWtGRE5VTXNXVUZCV1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRmRCUVZjc1EwRkJRenRoUVVNM1JEdFpRVVZFTEUxQlFVMDdVMEZEVGp0UlFVTkVMRXRCUVVzc2EwSkJRV3RDTzFsQlEzUkNPMmRDUVVORExGbEJRVmtzUTBGQlF5eFBRVUZQTEVkQlFVY3NlVUpCUVhsQ0xFTkJRVU03WVVGRmFrUTdXVUZEUkN4TlFVRk5PMHRCUTFBN1NVRkZSQ3hKUVVGSkxFOUJRVTg3VVVGQlJTeFBRVUZQTEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1NVRkRka01zU1VGQlNTeFZRVUZWTzFGQlFVVXNXVUZCV1N4RFFVRkRMR05CUVdNc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXp0SlFVVm9SU3hSUVVGUkxFTkJRVU1zVjBGQlZ5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMEZCUTNCRExFTkJRVU1zUTBGQlF5eERRVUZESW4wPSJdLCJuYW1lcyI6WyJwcmVzZW5jZSIsIlByZXNlbmNlIiwiY2xpZW50SWQiLCJicm93c2luZ1RpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJhc3luYyIsImdldFN0cmluZ3MiLCJob21lIiwidXNlciIsImNhbGwiLCJyZWFkaW5nIiwiYnJvd3NpbmciLCJnZXRTZXR0aW5nIiwiY2F0Y2giLCJzdHJpbmdzIiwib2xkTGFuZyIsIm9uIiwicHJlc2VuY2VEYXRhIiwibGFyZ2VJbWFnZUtleSIsInByaXZhY3kiLCJuZXdMYW5nIiwidGltZXN0YW1wcyIsImRvY3VtZW50IiwibG9jYXRpb24iLCJob3N0bmFtZSIsInBhdGhuYW1lIiwiZGV0YWlscyIsInN0YXJ0c1dpdGgiLCJzdGF0ZSIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZXh0Q29udGVudCIsInNwbGl0Iiwic21hbGxJbWFnZUtleSIsInNtYWxsSW1hZ2VUZXh0Iiwic3RhcnRUaW1lc3RhbXAiLCJzZXRBY3Rpdml0eSJdLCJzb3VyY2VSb290IjoiIn0=
undefined;