var __webpack_exports__={};const presence=new Presence({clientId:"893871116945350726"}),browsingTimestamp=Math.floor(Date.now()/1e3),threadExportRegex=/([a-f\d]{8}(-[a-f\d]{4}){3}-[a-f\d]{12})/i;let recentSearchQuery=null;presence.on("UpdateData",(async()=>{const{href:e,pathname:t}=document.location,[a,s,r]=await Promise.all([presence.getSetting("privacy"),presence.getSetting("hideButtons"),presence.getSetting("iconType")]),n=new URL(e).searchParams.get("q"),c=document.querySelector(".md\\:mb-md"),i=t.split("/")[1],g={largeImageKey:["https://cdn.rcd.gg/PreMiD/websites/P/Perplexity/assets/logo.png","https://cdn.rcd.gg/PreMiD/websites/P/Perplexity/assets/0.png"][r]||"https://cdn.rcd.gg/PreMiD/websites/P/Perplexity/assets/logo.png",startTimestamp:browsingTimestamp};if(n&&n!==recentSearchQuery&&(recentSearchQuery=n),g.details="Home",!i)return presence.setActivity(g);switch(i.toLowerCase()){case"search":g.details=a?"Searching":"Searching for",g.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",t.match(threadExportRegex)&&(g.buttons=[{label:"Open Thread",url:e}]),g.state=recentSearchQuery,c&&c.textContent&&c.textContent!==recentSearchQuery&&(g.state=c.textContent);break;case"threads":g.details="Searching threads",g.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/P/Perplexity/assets/1.png";break;case"about":g.details="Reading about";break;case"blog":g.details="Reading blog";break;case"privacy":g.details="Reading privacy policy";break;case"tos":g.details="Reading terms of service";break;default:g.details="Browsing",g.state=i}a&&g.state&&delete g.state,s&&g.buttons&&delete g.buttons,presence.setActivity(g)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;