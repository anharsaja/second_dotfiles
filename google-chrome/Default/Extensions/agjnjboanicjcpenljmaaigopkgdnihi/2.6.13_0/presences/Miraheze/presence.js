var __webpack_exports__={};const presence=new Presence({clientId:"900002010156400670"}),browsingTimestamp=Math.floor(Date.now()/1e3);let currentURL=new URL(document.location.href),currentPath=currentURL.pathname.replace(/^\/|\/$/g,"").split("/"),presenceData={details:"Viewing an unsupported page",largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/M/Miraheze/assets/logo.png",startTimestamp:browsingTimestamp};const updateCallback={_function:null,get function(){return this._function},set function(e){this._function=e},get present(){return null!==this._function}},resetData=(e={details:"Viewing an unsupported page",largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/M/Miraheze/assets/logo.png",startTimestamp:browsingTimestamp})=>{currentURL=new URL(document.location.href),currentPath=currentURL.pathname.replace(/^\/|\/$/g,"").split("/"),presenceData={...e}},getURLParam=e=>currentURL.searchParams.get(e),prepare=async()=>{if(presence.info("Running..."),"miraheze.org"===currentURL.host||"www.miraheze.org"===currentURL.host)""===currentPath[0]&&(presenceData.details="On the index page");else switch(currentURL.hostname){case"phabricator.miraheze.org":if(presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/M/Miraheze/assets/1.png",presenceData.smallImageText="Phabricator",""===currentPath[0])presenceData.details="On the home page";else if("Auth"===document.querySelector(".phui-crumbs-view.phui-crumbs-border .phui-crumb-name").textContent.trim())presenceData.details="Logging in";else if(/^T\d+$/.test(currentPath[0]))presenceData.details="Viewing a task",presenceData.state=document.title.replace(/^[^\w\s\d]{1} /,"");else switch(currentPath[0]){case"maniphest":"task"===currentPath[1]&&"edit"===currentPath[2]?presenceData.details="Creating a task":(presenceData.details="Viewing tasks (Maniphest)",presenceData.state=document.querySelector("h1 .phui-header-header").textContent);break;case"project":if(currentPath[1]&&"query"!==currentPath[1])if("view"===currentPath[1])presenceData.details="Viewing a project",presenceData.state=[...document.querySelectorAll(".phui-crumbs-view.phui-crumbs-border .phui-crumb-name")].slice(1).map((e=>e.textContent.trim())).join(" > ");else{presenceData.details="Viewing a project";const e=[...document.querySelectorAll(".phui-crumbs-view.phui-crumbs-border .phui-crumb-name")];presenceData.state=e.slice(1,e.length-1).map((e=>e.textContent.trim())).join(" > ")}else presenceData.details="Viewing projects",presenceData.state=document.querySelector("h1 .phui-header-header").textContent;break;case"diffusion":presenceData.details="Viewing repositories (Diffusion)",presenceData.state=document.querySelector("h1 .phui-header-header").textContent;break;case"source":presenceData.details="Viewing a repository",presenceData.state=document.querySelector(".phui-crumbs-view.phui-crumbs-border .phui-crumb-name:nth-of-type(1)").textContent;break;case"phame":currentPath[1]?"post"===currentPath[1]?"view"===currentPath[2]?(presenceData.details="Viewing a post",presenceData.state=document.querySelector(".phame-header-title").textContent):(presenceData.details="Viewing posts",presenceData.state=document.querySelector("h1 .phui-header-header").textContent):"blog"===currentPath[1]&&("view"===currentPath[2]?(presenceData.details="Viewing a blog",presenceData.state=document.querySelector(".phame-header-title").textContent):(presenceData.details="Viewing blogs",presenceData.state=document.querySelector("h1 .phui-header-header").textContent)):presenceData.details="Viewing recent posts (Phame)";break;default:/^P\d+$/.test(currentPath[0])?(presenceData.details="Viewing a paste",presenceData.state=document.title.replace(/^[^\w\s\d]{1} /,"")):"paste"===currentPath[0]?"task"===currentPath[1]&&"edit"===currentPath[2]?presenceData.details="Creating a paste":(presenceData.details="Viewing pastes",presenceData.state=document.querySelector("h1 .phui-header-header").textContent):/^M\d+$/.test(currentPath[0])?(presenceData.details="Viewing a mock",presenceData.state=document.title.replace(/^[^\w\s\d]{1} /,"")):"pholio"===currentPath[0]?"task"===currentPath[1]&&"edit"===currentPath[2]?presenceData.details="Creating a mock":(presenceData.details="Viewing mocks (Pholio)",presenceData.state=document.querySelector("h1 .phui-header-header").textContent):/^U\d+$/.test(currentPath[0])?(presenceData.details="Viewing a short URL",presenceData.state=document.title.replace(/^[^\w\s\d]{1} /,"")):"phurl"===currentPath[0]?"task"===currentPath[1]&&"edit"===currentPath[2]?presenceData.details="Creating a short URL":(presenceData.details="Viewing short URLs (Phurl)",presenceData.state=document.querySelector("h1 .phui-header-header").textContent):(presenceData.details=`Viewing ${document.querySelector(".phui-crumbs-view.phui-crumbs-border .phui-crumb-name").textContent.trim()}`,presenceData.state=[...document.querySelectorAll(".phui-crumbs-view.phui-crumbs-border .phui-crumb-name")].slice(1).map((e=>e.textContent.trim())).join(" > "))}break;case"blog.miraheze.org":presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/M/Miraheze/assets/1.png",presenceData.smallImageText="Phabricator (blog)",currentPath[1]?"post"===currentPath[0]&&(presenceData.details="Viewing a post",presenceData.state=document.querySelector(".phame-header-title").textContent):(presenceData.details="Viewing a blog",presenceData.state=document.querySelector(".phame-header-title").textContent);break;case"donate.miraheze.org":presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/M/Miraheze/assets/0.png",presenceData.smallImageText="Donation Gateway",presenceData.details="Donating to Miraheze";break;case"status.miraheze.wiki":presenceData.details="Viewing the status page","Status Page - Miraheze"!==document.title&&(presenceData.state=document.title.replace(" - Status Page - Miraheze",""));break;default:{const e=await presence.getPageletiable('mw"]["config"]["values'),t=e.wgSiteName,a=()=>getURLParam("action")||getURLParam("veaction")||e.wgAction,r=()=>decodeURIComponent(e.wgPageName.replaceAll("_"," ")),n=document.querySelector("h1")?document.querySelector("h1").textContent:r(),i=()=>{const t={"-2":"Viewing a media","-1":"Viewing a special page",0:"Reading an article",1:"Viewing a talk page",2:"Viewing a user page",3:"Viewing a user talk page",4:"Viewing a project page",5:"Viewing a project talk page",6:"Viewing a file",7:"Viewing a file talk page",8:"Viewing an interface page",9:"Viewing an interface talk page",10:"Viewing a template",11:"Viewing a template talk page",12:"Viewing a help page",13:"Viewing a help talk page",14:"Viewing a category",15:"Viewing a category talk page",828:"Viewing a module",829:"Viewing a module talk page",2300:"Viewing a gadget",2301:"Viewing a gadget talk page",2302:"Viewing a gadget definition page",2303:"Viewing a gadget definition talk page",GeoJson:"Viewing a GeoJson page","GeoJson talk":"Viewing a GeoJson talk page",TimedText:"Viewing a media's subtitles","TimedText talk":"Viewing a media's subtitles talk page",CNBanners:"Viewing a CNBanners page","CNBanners talk":"Viewing a CNBanners talk page",Schema:"Viewing a schema page","Schema talk":"Viewing a schema talk page",Translations:"Viewing a translations page","Translations talk":"Viewing a translations talk page"},a=e.wgCanonicalNamespace.replaceAll("_"," ");return t[e.wgNamespaceNumber]||t[a]||`Viewing a/an ${a} page`};e.wgIsMainPage&&"view"===a()?presenceData.details="On the main page":document.querySelector("#wpLoginAttempt")?presenceData.details="Logging in":document.querySelector("#wpCreateaccount")?presenceData.details="Creating an account":document.querySelector(".searchresults")?(presenceData.details="Searching for a page",presenceData.state=document.querySelector("input[type=search]").value):"history"===a()?(presenceData.details="Viewing revision history",presenceData.state=r()):getURLParam("diff")?(presenceData.details="Viewing difference between revisions",presenceData.state=r()):getURLParam("oldid")?(presenceData.details="Viewing an old revision of a page",presenceData.state=r()):document.querySelector("#ca-ve-edit")||getURLParam("veaction")?(presenceData.state=n.toLowerCase()===r().toLowerCase()?`${n}`:`${n} (${r()})`,updateCallback.function=()=>{"edit"===a()||"editsource"===a()?presenceData.details="Editing a page":presenceData.details=i()}):"edit"===a()?(presenceData.details=document.querySelector("#ca-edit")?"Editing a page":"Viewing source",presenceData.state=r()):(presenceData.details=i(),presenceData.state=n.toLowerCase()===r().toLowerCase()?`${n}`:`${n} (${r()})`),presenceData.state?presenceData.state+=` | ${t}`:presenceData.state=t}}};(async()=>{if(await prepare(),updateCallback.present){const e={...presenceData};presence.on("UpdateData",(async()=>{resetData(e),updateCallback.function(),presence.setActivity(presenceData)}))}else presence.on("UpdateData",(async()=>{presence.setActivity(presenceData)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;