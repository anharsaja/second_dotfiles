var __webpack_exports__={};const presence=new Presence({clientId:"796446671617130567"}),timeS=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={smallImageKey:"https://cdn.rcd.gg/PreMiD/websites/O/OpenClassrooms/assets/0.png",smallImageText:"OpenClassrooms"},s=window.location.pathname.toLowerCase();if("/fr/"===s||"/en/"===s)e.details="Home page";else if(s.includes("/fr/dashboard")||s.includes("/en/dashboard"))s.includes("/fr/dashboard/courses")||s.includes("/en/dashboard/courses")?(e.details="Dashboard",e.state=`Browsing: ${document.querySelectorAll(".Mui-selected")[0].querySelectorAll("span")[0].textContent}`,e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/O/OpenClassrooms/assets/logo.png"):"/fr/dashboard/paths"!==s&&"/en/dashboard/paths"!==s||(e.details="Dashboard",e.state=`Browsing: ${document.querySelectorAll(".jss326")[1].textContent}`,e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/O/OpenClassrooms/assets/logo.png");else if("/fr/courses"===s||"fr/courses/"===s||s.includes("/fr/search")||s.includes("/en/search"))e.details="Courses main page",e.state="Looking for a course",e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/O/OpenClassrooms/assets/logo.png";else if("/en/paths"===s||"/fr/paths"===s)e.details="Paths main page",e.state="Looking for a path",e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/O/OpenClassrooms/assets/logo.png";else if(s.includes("/fr/paths")||s.includes("/en/paths"))e.details="Looking for a path",e.state=`Looking at ${document.title.replace(" - OpenClassrooms","")}`,e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/O/OpenClassrooms/assets/logo.png";else if(s.includes("/fr/courses")||s.includes("/en/courses")){if(document.body.contains(document.querySelectorAll(".breadcrumb__item")[3])){const s=document.querySelectorAll(".breadcrumb__item");e.details=`Reading: ${s[2].querySelectorAll("span")[0].textContent}`,e.state=`Chapter: ${s[3].textContent}`,e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/O/OpenClassrooms/assets/logo.png"}else document.body.contains(document.querySelectorAll(".breadcrumb__item")[3])||(e.details=`Reading: ${document.querySelectorAll(".breadcrumb__item")[2].textContent}`,e.state="Chapter: First chapter",e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/O/OpenClassrooms/assets/logo.png");e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/O/OpenClassrooms/assets/logo.png"}else e.details="Browsing:",e.state=document.title.replace(" - OpenClassrooms",""),e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/O/OpenClassrooms/assets/logo.png";e.startTimestamp=timeS,e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;