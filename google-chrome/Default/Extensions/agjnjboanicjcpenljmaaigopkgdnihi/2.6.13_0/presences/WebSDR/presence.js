var __webpack_exports__={};const presence=new Presence({clientId:"715344422039977994"}),strings={listen:"Listening",mute:"Muted",record:"Recording",view:"Viewing",read:"Reading"},browsingTimestamp=Math.floor(Date.now()/1e3),modes=["CW","LSB","USB","AM","FM","AMsync"];let frequency,intHandle,mode=2;function updateMode(){let e=0;for(const t of Array.from(document.querySelector("div.ctl > form > div.buttonrow").children))""===t.style.background?e++:mode=e}presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/W/WebSDR/assets/logo.png",smallImageText:"University of Twente SDR",startTimestamp:browsingTimestamp};switch(document.location.pathname){case"/":intHandle||(intHandle=setInterval(updateMode,1e3)),frequency=document.querySelector("div.ctl > form > span > input").value,e.details=`${frequency} ${modes[mode]}`,"stop"===document.querySelector("#recbutton").textContent?e.state=strings.record:!0===document.querySelector("#mutecheckbox").checked?e.state=strings.mute:e.state=strings.listen;break;case"/wspr/":e.details="WSPR Map",e.state=strings.view;break;case"/chirps/":e.details="Chirp Signals",e.state=strings.view;break;case"/chirps/article/":e.details="Chirp Signal Article",e.state=strings.read;break;case"/fullday/":e.details="Full Day Waterfall",e.state=strings.view;break;case"/oldnews.html":e.details="Old News",e.state=strings.read;break;case"/qrt.html":e.details="History",e.state=strings.read}e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;