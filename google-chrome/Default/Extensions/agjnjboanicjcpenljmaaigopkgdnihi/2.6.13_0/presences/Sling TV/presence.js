var __webpack_exports__={};const presence=new Presence({clientId:"764916517895798796"}),strings=presence.getStrings({play:"general.playing",pause:"general.paused",live:"general.live",search:"general.searching"});function getStateText(e,t){return t?"Live":e?"Paused":"Watching"}let elapsed,oldUrl,title;presence.on("UpdateData",(async()=>{let e=null;const{href:t,pathname:a}=window.location,s={details:void 0,state:void 0,largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/S/Sling%20TV/assets/logo.png",smallImageKey:void 0,smallImageText:void 0,startTimestamp:void 0,endTimestamp:void 0};if(t!==oldUrl&&(oldUrl=t,elapsed=Math.floor(Date.now()/1e3)),s.startTimestamp=elapsed,a.includes("/watch")&&(e=document.querySelector(".bitmovinplayer-container video"),e)){title=document.querySelector("title");const t=e.duration===1/0;title&&(s.state=getStateText(e.paused,t)),s.smallImageKey=t?"https://cdn.rcd.gg/PreMiD/resources/live.png":e.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",s.smallImageText=t?(await strings).live:e.paused?(await strings).pause:(await strings).play,t||([s.startTimestamp,s.endTimestamp]=presence.getTimestampsfromMedia(e)),e.paused&&(delete s.startTimestamp,delete s.endTimestamp)}presence.setActivity(s,!e||!e.paused)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;