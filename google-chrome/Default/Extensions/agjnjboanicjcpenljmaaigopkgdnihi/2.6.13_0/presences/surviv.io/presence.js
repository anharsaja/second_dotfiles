var __webpack_exports__={};const presence=new Presence({clientId:"640711877609127976"});let gametypequery,gamemodequery,gametype,gamemode,killcount,alivecount,place;const browsingTimestamp=Math.floor(Date.now()/1e3),assets={squad:"https://cdn.rcd.gg/PreMiD/websites/S/surviv.io/assets/0.png",duo:"https://cdn.rcd.gg/PreMiD/websites/S/surviv.io/assets/1.png",solo:"https://cdn.rcd.gg/PreMiD/websites/S/surviv.io/assets/2.png"};presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/S/surviv.io/assets/logo.png"},t=await presence.getSetting("broadcasttc"),a="none"===window.getComputedStyle(document.querySelector("#start-menu-wrapper")).display;e.startTimestamp=browsingTimestamp,document.querySelector(".ui-stats-current")?(place=document.querySelector(".ui-stats-current .ui-stats-player-rank").textContent,e.details=`Placed ${place}`):a?a&&(e.smallImageText=`Playing ${gametype}s`,alivecount=document.querySelector(".ui-players-alive").textContent,killcount=document.querySelector(".ui-player-kills").textContent,e.details=`${killcount} kill${1!==parseInt(killcount)?"s":""} with ${alivecount} alive`,e.state=`${"50v50"!==gamemode?`${gametype} - `:""}${gamemode}`):(gametypequery='div[id="index-play-type-selected"]',gamemodequery='div[id="index-play-mode-selected"]',"block"===window.getComputedStyle(document.querySelector("#team-menu")).display&&(!t||"Duo"!==gametype&&"Squad"!==gametype||(e.buttons=[{label:"Join Game",url:document.baseURI}],e.smallImageKey=assets[gametype.toLowerCase()],e.smallImageText=document.querySelector("#team-code").textContent),gametypequery=gametypequery.replace('"]','-team"]'),gamemodequery=gamemodequery.replace('"]','-team"]')),gametype=document.querySelector(gametypequery).textContent,gamemode=document.querySelector(gamemodequery).textContent,e.details="In the menus..."),e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;