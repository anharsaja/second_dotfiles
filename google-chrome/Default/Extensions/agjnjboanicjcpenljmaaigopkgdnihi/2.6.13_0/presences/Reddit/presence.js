var PresenceClients,__webpack_exports__={};!function(e){e.Reddit="609183409440555018",e.RedditNetflix="869992823854870588"}(PresenceClients||(PresenceClients={}));let subReddit,postTitle,username,nickname,rpanTitle,strings,containsNetflix,presence=new Presence({clientId:PresenceClients.Reddit}),oldLang=null;async function getStrings(){return presence.getStrings({browsing:"general.browsing",live:"general.live",profile:"general.viewProfile",searchSomething:"general.searchSomething",searching:"general.search",reading:"general.readingPost",watching:"general.watching",readButton:"general.buttonReadArticle",viewProfileButton:"general.buttonViewProfile",streamButton:"general.buttonWatchStream",insubreddit:"In a subreddit"},await presence.getSetting("lang").catch((()=>"en")))}const presences={[PresenceClients.Reddit]:presence},startTimestamp=Math.floor(Date.now()/1e3),oldReddit=!!(document.querySelector(".default-header")??document.querySelector("#header"));function setClient(e){presence.clearActivity(),presences[e]?(presence=presences[e],presence.setActivity()):(presence=new Presence({clientId:e}),presences[e]=presence),presence.info("Switched presence client!")}function getSubreddit(){return document.querySelector("shreddit-subreddit-header")?.getAttribute("prefixed-name")}presence.on("UpdateData",(async()=>{const[e,t,s]=await Promise.all([presence.getSetting("lang").catch((()=>"en")),presence.getSetting("buttons"),presence.getSetting("privacy")]),{href:n,pathname:i}=document.location,r={largeImageKey:i.includes("/r/netflix")?"https://i.imgur.com/Aw5rIOI.gif":"https://cdn.rcd.gg/PreMiD/websites/R/Reddit/assets/logo.png",smallImageKey:i.includes("/r/netflix")?"https://cdn.rcd.gg/PreMiD/websites/R/Reddit/assets/logo.png":"",startTimestamp};i.includes("/r/netflix")&&!containsNetflix?(setClient(PresenceClients.RedditNetflix),containsNetflix=!0,r.largeImageKey="https://i.imgur.com/Aw5rIOI.gif",r.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/R/Reddit/assets/logo.png"):!i.includes("/r/netflix")&&containsNetflix&&(setClient(PresenceClients.Reddit),containsNetflix=!1,r.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/R/Reddit/assets/logo.png"),oldLang===e&&strings||(oldLang=e,strings=await getStrings()),oldReddit?(subReddit=document.querySelector(".redditname")?`${s?strings.insubreddit:`r/${document.querySelector(".redditname").textContent}`}`:"Home",i.includes("/comments/")?s?(r.details=strings.reading.slice(0,-1),r.state=subReddit):(postTitle=document.querySelector("p.title > a").textContent,r.details=`${strings.reading} '${postTitle}'`,r.state=subReddit,r.buttons=[{url:n,label:strings.readButton}]):i.startsWith("/user/")?s?r.details=strings.profile.slice(0,-4):(r.state=document.querySelector(".titlebox > h1").textContent,r.details=strings.profile,r.buttons=[{url:n,label:strings.viewProfileButton}]):i.startsWith("/search")?(r.details=strings.searchSomething,r.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",r.smallImageText=strings.searching):(r.details=strings.browsing,r.state=subReddit)):i.includes("/comments/")?s?r.details=strings.reading.slice(0,-1):(postTitle=document.querySelector("shreddit-title")?.getAttribute("title")??"",subReddit=getSubreddit(),r.details=`${strings.reading} '${postTitle}'`,r.state=subReddit,r.buttons=[{url:n,label:strings.readButton}]):i.startsWith("/user/")?s?r.details=strings.profile.slice(0,-4):(username=document.querySelector("p")?.textContent,nickname=document.querySelector("h1")?.textContent,r.details=strings.profile,r.state=nickname??username,r.buttons=[{url:n,label:strings.viewProfileButton}]):i.startsWith("/search")?(r.details=strings.searchSomething,r.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",r.smallImageText=strings.searching):i.startsWith("/rpan")?(r.details=`${strings.watching} (RPAN)`,s||(rpanTitle=document.querySelector("h1")?document.querySelector("h1").textContent:"Loading title...",r.state=rpanTitle,r.buttons=[{url:n,label:strings.streamButton}]),r.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/live.png",r.smallImageText=strings.live):s?getSubreddit()?r.details=strings.insubreddit:(r.details=strings.browsing,r.state="Home"):(r.details=strings.browsing,r.state=getSubreddit()??"Home"),t&&!s||delete r.buttons,presence.setActivity(r)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;