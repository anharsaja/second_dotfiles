var __webpack_exports__={};function getQuery(){const e=location.search.split("?",2);return e&&e.length>0&&e[1]?e[1].split("&").reduce((function(e,t){const n=t?t.split("=",2):null;return null===n?e:Object.assign(e,{[n[0]]:n[1]})}),{}):{}}function capitalizeFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}const pages=[{middleware:e=>/^\/(hot|tags|rising|fresh|feed|rising|stories|random|bookmarks|likes|weekly|best|stories|royal\.coubs|\/)/gi.test(e.location.pathname)||"/"===location.pathname,exec:(e,t,{showWatch:n,strings:r,images:a})=>{if(!e)return null;const i=document.querySelector(".coub[coub-block].active");if(!i)return null;const o=i.querySelector(".description__title")?.textContent?.trim(),c=document.querySelector(".page__content .page-menu > .page-menu__inner > .page-menu__item.-active")||document.querySelector(".best2020__container .page-menu > .page-menu__inner > .page-menu__item.-active")||document.querySelector(".page__content .story__header"),s=location.pathname.startsWith("/royal.coubs"),l=c?.textContent?.trim()||c?.dataset?.title||"Feed";if(!o)return null;const u=document.querySelector(".page__content")?.getAttributeNames()?.map((e=>e.match(/^pages-(\w+)-page/i))).filter((e=>!!e&&e.length>1&&e[1])).map((e=>capitalizeFirstLetter(e[1])));return t.state=`Browsing ${s&&l.match(/^(\w+)/gi)?l.match(/^(\w+)/gi)[0]:l}${u?.length>0&&l.toLowerCase()!==u[0].toLowerCase()?` in ${u[0]}`:document.querySelector(".page__content .page-menu.weekly__menu")?" in Weekly":location.pathname.startsWith("/best")?" in Best of the Year":s?" in Coub Picks":""}`,t.details=`${o}${i.querySelector(".coub__like-button[widget-like-button].-on")?" (❤)":""}`,t.smallImageKey=!1===i.querySelector("video")?.paused?a.PLAY:a.PAUSE,n&&(t.buttons=[{label:r.watchVideo,url:`${document.location.origin}/view/${i.dataset.permalink}`}]),t}},{middleware:e=>!!e.document.querySelector(".hero-cover[channel-id]"),exec:(e,t,{showWatch:n,showExternalImages:r,strings:a,images:i})=>{if(!e)return null;const o=document.querySelector(".coub[coub-block].active");if(!o)return null;const c=o.querySelector(".description__title").textContent?.trim(),s=document.querySelector(".channel"),l=s.querySelector(".channel__description > h1[title]").title,u=s.querySelector('.avatar-upload img[src*="coub_storage/channel"]')?.src,g=document.querySelector(".page__content .page-menu > .page-menu__inner > .page-menu__item.-active")||document.querySelector(".best2020__container .page-menu > .page-menu__inner > .page-menu__item.-active")||document.querySelector(".page__content .story__header");return c&&l?(t.state=`Browsing ${g?.textContent.trimStart().split("\n")[0]?.trim()||g?.dataset?.title||"Feed"} from ${l}`,t.details=`${c}${o.querySelector(".coub__like-button[widget-like-button].-on")?" (❤)":""}`,r&&u?.startsWith("https://")&&(t.largeImageKey=u),t.smallImageKey=!1===o.querySelector("video")?.paused?i.PLAY:i.PAUSE,n&&(t.buttons=[{label:a.watchVideo,url:`${document.location.origin}/view/${o.dataset.permalink}`},{label:a.viewProfile,url:`${document.location.origin}/${document.location.pathname.split("/")[1]}`}]),t):null}},{middleware:e=>/^\/view\/(.*)/gi.test(e.location.pathname),exec:(e,t,{strings:n,showWatch:r,images:a})=>{if(!e)return null;const i=document.querySelector(".coub[coub-block]");if(!i)return null;const o=i.querySelector(".coub__description h5.description__title")?.textContent?.trim();return o?(t.state=n.watching,t.details=`${o}${i.querySelector(".coub__like-button[widget-like-button].-on")?" (❤)":""}`,t.smallImageKey=!1===i.querySelector("video")?.paused?a.PLAY:a.PAUSE,r&&(t.buttons=[{label:n.watchVideo,url:document.location.href}]),t):null}},{middleware:e=>/^\/(community)/gi.test(e.location.pathname),exec:(e,t,{showWatch:n,showExternalImages:r,strings:a,images:i})=>{if(!e)return null;const o=document.querySelector(".hot__community[data-community-id]");if(!o)return null;const c=document.querySelector(".coub.active");if(!c)return null;const s=o.querySelector(".description > .title > h2")?.textContent?.trim(),l=o.querySelector('img[src*="coub_storage/category"]')?.src,u=c.querySelector(".description__title")?.textContent?.trim();return s&&u?(t.state=`Browsing ${s} in ${o.parentElement.querySelector(".page-menu.hot__menu > .page-menu__inner > .page-menu__item.-active")?.dataset?.title||"Hot"}`,r&&l?.startsWith("https://")&&(t.largeImageKey=l),t.smallImageKey=!1===c.querySelector("video")?.paused?i.PLAY:i.PAUSE,t.details=`${u}`,n&&(t.buttons=[{label:a.watchVideo,url:`${document.location.origin}/view/${c.dataset.permalink}`}]),t):null}},{middleware:e=>!!e.window,exec:(e,t,{strings:n})=>e?(t.state=n.browsing,t.details="",t.smallImageKey&&delete t.smallImageKey,t):null}],presence=new Presence({clientId:"818598086984728576"}),presenceImageKeys={PLAY:"https://cdn.rcd.gg/PreMiD/resources/play.png",PAUSE:"https://cdn.rcd.gg/PreMiD/resources/pause.png"};function getStrings(e){return presence.getStrings({browsing:"general.browsing",watching:"general.playing",watchVideo:"general.buttonWatchVideo",viewProfile:"general.buttonViewProfile"},e)}let currentLang,localizedStrings;const startedBrowsingAt=new Date;presence.on("UpdateData",(async()=>{const e=await presence.getSetting("lang").catch((()=>"en"));localizedStrings&&e===currentLang||(currentLang=e,localizedStrings=await getStrings(e));const t=getQuery(),n=pages.find((e=>e.middleware(window,[t])));if(!n)return;const r={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/C/Coub/assets/logo.png"},a=await presence.getSetting("show_startedBrowsing").catch((()=>!0));a&&!r.startTimestamp&&(r.startTimestamp=startedBrowsingAt.getTime());const i=await Promise.resolve(n.exec(presence,r,{strings:localizedStrings,query:t,images:presenceImageKeys,showWatch:await presence.getSetting("show_button_watching").catch((()=>!0)),showExternalImages:await presence.getSetting("show_externalLargeImage").catch((()=>!0)),showStartedBrowsing:a}));i?i.details&&presence.setActivity(i):presence.setActivity({...r,state:localizedStrings.browsing})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;