var __webpack_exports__={};const presence=new Presence({clientId:"843058683100266526"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/D/Deno/assets/logo.png",startTimestamp:browsingTimestamp},{href:t,hash:a,hostname:s,pathname:n}=document.location,[l,i]=await Promise.all([presence.getSetting("privacy"),presence.getSetting("buttons")]),r=document.querySelector('[id="search-input"]'),o=n.split("/");if(l)return e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/D/Deno/assets/logo.png",e.details="Browsing",void presence.setActivity(e);switch(s){case"deno.land":if(r?.value)e.details="Searching for",e.state=r.value,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png";else if(n.includes("/manual"))e.buttons=[{label:"Read Manual",url:t}],e.state="Manual",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.smallImageText="Reading",e.details=document.querySelector('[class="anchor"]').parentElement.textContent;else switch(o[1]){case"":e.details="Viewing homepage";break;case"blog":e.buttons=[{label:"Read Blog",url:t}],e.details="Reading the blog",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.smallImageText="Reading";break;case"x":e.buttons=[{label:"Explore Modules",url:t}],document.querySelector('[class="text-default"]')?(e.details="Viewing third party module",e.state=document.querySelector("title")?.textContent.split("|")[0]):(e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.smallImageText="Reading",e.details="Reading about third party modules")}break;case"doc.deno.land":e.buttons=[{label:"View Docs",url:t}],e.details=`Viewing ${a?`${a.replace("#","")}'s`:"deno"} (${document.querySelector('[class="truncate"]').textContent} version)`;break;case"deno.com":switch(o[1]){case"":e.details="Viewing homepage";break;case"blog":e.buttons=[{label:"View Blog",url:t}],e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.smallImageText="Reading",document.querySelector("article")?(e.details="Reading an article about",e.state=document.querySelector("article").firstElementChild.textContent):e.details="Reading the blog";break;case"deploy":switch(o[2]){case"subhosting":e.buttons=[{label:"View Subhosting",url:t}],e.details="Viewing the subhosting page";break;case"docs":e.buttons=[{label:"View Docs",url:t}],e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.smallImageText="Reading",e.details="Reading an article about",e.state=document.querySelector("article").firstElementChild.textContent;break;case"pricing":e.buttons=[{label:"View Pricing",url:t}],e.details="Viewing deno's pricing";break;default:e.buttons=[{label:"View The Deploy Page",url:t}],e.details="Viewing the deploy page"}}break;case"deno.news":e.buttons=[{label:"View The News",url:t}],e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/D/Deno/assets/0.png",e.details="Viewing the news page";break;case"denostatus.com":e.buttons=[{label:"View Deno's Status",url:t}],e.details="Viewing deno's status";break;case"merch.deno.com":e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/D/Deno/assets/1.png",e.buttons=[{label:"View Merge Store",url:t}],e.details="Viewing deno's merch store"}i||delete e.buttons,e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;