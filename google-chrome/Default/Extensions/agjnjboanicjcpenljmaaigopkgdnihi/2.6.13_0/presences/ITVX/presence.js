var __webpack_exports__={};const presence=new Presence({clientId:"1043125926793318420"});function fetchNextData(){const e=document.querySelector("#__NEXT_DATA__");return e?JSON.parse(e.textContent):null}presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/I/ITVX/assets/logo.png",startTimestamp:Date.now()},{pathname:t}=document.location;if(await presence.getSetting("privacy"))e.details="Watching ITVX";else switch(t){case"/":e.details="Browsing ITVX",e.state="Home Page";break;case"/watch":{const t=fetchNextData(),s=t.props.pageProps.channels.find((e=>e.slug===(t.props.pageProps.channelSlug||"itv")));let a;const r=[new Date(s.slots.now.start).getTime(),new Date(s.slots.now.end).getTime()],i=Date.now();a=i>r[0]&&i<r[1]?s.slots.now:s.slots.next;const o=a.seriesNumber,n=a.episodeNumber;e.details=`Watching ${s.name} Live`,e.state=a.displayTitle,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/live.png",e.smallImageText="Live",o&&n&&(e.state+=` (S${o} E${n})`);break}case"/watch/tv-guide":e.details="Browsing ITV",e.state="Viewing the TV Guide";break;default:if(t.startsWith("/watch/collections/films"))e.details="Browsing ITVX",e.state="Viewing Films";else if(t.startsWith("/watch/categories"))e.details="Browsing ITVX",e.state=`Viewing ${fetchNextData().props.pageProps.category.title} Category`;else if(/^[-+]?[0-9A-Fa-f]+\.?[0-9A-Fa-f]*?$/.test(t.split("/")[t.split("/").length-1])){delete e.startTimestamp;const t=fetchNextData();e.details=`Watching ${t.props.pageProps.programme.title}`,t.props.pageProps.programme.heroCtaLabel&&"FILM"!==t.props.pageProps.episode.productionType&&(e.state=t.props.pageProps.programme.heroCtaLabel);const[s]=document.querySelectorAll("video");s.paused?(e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png",e.smallImageText="Paused"):([e.startTimestamp,e.endTimestamp]=presence.getTimestamps(Math.floor(s.currentTime),Math.floor(s.duration)),e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText="Playing")}}e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;