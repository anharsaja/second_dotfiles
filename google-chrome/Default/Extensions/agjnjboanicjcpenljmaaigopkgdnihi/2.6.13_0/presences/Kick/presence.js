var __webpack_exports__={};const presence=new Presence({clientId:"1125405319594512404"}),browsingTimestamp=Math.floor(Date.now()/1e3);function getPageData(e,t,r,a,s){switch(a){case"kick.com":switch(e){case"":return{details:"Viewing home...",smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/search.png"};case"categories":{const e=document.querySelector("a.category-tile-active")?.textContent;let a="",s="";if(e){a=e;const t=document.querySelector('a.category-tile-active [src$=".gif"]'),r=t.getAttribute("src").replace(".gif",".png");t.setAttribute("src",r),s=r}return t&&r&&(a+=` > ${formatText(t)} > ${formatText(r)}`,s=document.querySelector("div.h-full > img")?.src),{details:"Viewing categories...",state:a,largeImageKey:s,smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/search.png"}}case"following":return{details:"Viewing following...",state:`${document.querySelector(".\\!border-primary\\/100").textContent} section`,smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/search.png"};case"dashboard":{let t=document.querySelector(".router-link-active .item-title").textContent;const r=document.querySelector(".content-expanded .item-title");return r&&(t=`${r.textContent} >\n\t\t\t\t\t\t\t${document.querySelector(".content-expanded .router-link-active .item-title").textContent}`),{details:`Viewing ${formatText(e)}...`,state:t,smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/viewing.png"}}case"transactions":return{details:`Viewing ${formatText(e)}...`,state:formatText(t)};case"community-guidelines":case"dmca-policy":case"privacy-policy":case"terms-of-service":return{details:`Reading ${formatText(e)}...`,smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/reading.png"};default:{const e=document.querySelector(".stream-username,#channel-username")?.textContent,t=document.querySelector("title")?.textContent;if(e&&t.includes("Live")){let t,r="",a="";return document.querySelector(".odometer-value")?(a=`Watching: ${e}`,r="https://cdn.rcd.gg/PreMiD/resources/live.png",t=[{label:"Watch Stream",url:s}]):(a=`Viewing: ${e}`,r="https://cdn.rcd.gg/PreMiD/resources/viewing.png",t=[{label:"View Streamer",url:s}]),{details:JSON.parse(document.querySelectorAll('[type="application/ld+json"]')?.[1]?.textContent)?.broadcastOfEvent?.name??"Unknown title",state:a,largeImageKey:document.querySelector(".owner-avatar img")?.src,smallImageKey:r,buttons:t}}return e&&t?.includes("VOD")?{details:document.querySelector('meta[name="description"]')?.content,state:document.querySelector("#channel-username")?.textContent,largeImageKey:document.querySelector(".owner-avatar img")?.src,smallImageKey:"",buttons:[{label:"Watch Stream VOD",url:s}]}:{details:"Browsing Kick..."}}}case"help.kick.com":{const e=document.querySelector("header.text-2xl")?.textContent;switch(t){case"collections":return{details:e??"Unknown title",state:"Searching resource category...",smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/search.png"};case"articles":return{details:e??"Unknown title",state:"Reading article...",smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/reading.png"};default:return{details:"Browsing Kick Help..."}}}}}function formatText(e){return e.replace(/-/g," ").replace(/\b\w/g,(e=>e.toUpperCase())).replace(/%C2%A0$/,"")}presence.on("UpdateData",(async()=>{const{pathname:e,hostname:t,href:r}=document.location,a=document.querySelector("video"),s=e.split("/"),{details:n,smallImageKey:c,largeImageKey:i,state:o,buttons:l}=getPageData(s[1],s[2],s[3],t,r),g={largeImageKey:i||"https://cdn.rcd.gg/PreMiD/websites/K/Kick/assets/logo.png",startTimestamp:browsingTimestamp,details:n};l&&(g.buttons=l),c&&(g.smallImageKey=c),o&&(g.state=o),a?.duration&&"https://cdn.rcd.gg/PreMiD/resources/viewing.png"!==g.smallImageKey&&(g.smallImageKey=a?.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",g.smallImageText=a?.paused?"Paused":"Playing",a?.paused||([g.startTimestamp,g.endTimestamp]=presence.getTimestampsfromMedia(document.querySelector("video")))),await presence.getSetting("details")||(g.details="Browsing Kick...",delete g.state,g.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/K/Kick/assets/logo.png",delete g.smallImageKey,delete g.buttons),await presence.getSetting("logo")&&(g.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/K/Kick/assets/logo.png"),"https://cdn.rcd.gg/PreMiD/resources/play.png"!==g.smallImageKey&&"https://cdn.rcd.gg/PreMiD/resources/pause.png"!==g.smallImageKey&&"https://cdn.rcd.gg/PreMiD/resources/viewing.png"!==g.smallImageKey||(g.type=3),n&&presence.setActivity(g)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;