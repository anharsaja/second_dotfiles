var __webpack_exports__={};const presence=new Presence({clientId:"658230518520741915"});var LogoAssets;!function(e){e.BbcFuture="https://cdn.rcd.gg/PreMiD/websites/B/BBC/assets/0.png",e.BbciPlayer="https://cdn.rcd.gg/PreMiD/websites/B/BBC/assets/1.png",e.Bbc="https://cdn.rcd.gg/PreMiD/websites/B/BBC/assets/2.png",e.BbcNews="https://cdn.rcd.gg/PreMiD/websites/B/BBC/assets/3.png",e.BbcSounds="https://cdn.rcd.gg/PreMiD/websites/B/BBC/assets/4.png",e.BbcSport="https://cdn.rcd.gg/PreMiD/websites/B/BBC/assets/5.png",e.BbcWeather="https://cdn.rcd.gg/PreMiD/websites/B/BBC/assets/6.png"}(LogoAssets||(LogoAssets={}));const browsingTimestamp=Math.floor(Date.now()/1e3),getStrings=e=>presence.getStrings({play:"general.playing",pause:"general.paused",Live:"general.Live",browse:"general.browsing",searchSomething:"general.searchSomething",viewTeam:"twitch.viewTeam",viewPage:"general.viewPage",viewMovie:"general.viewMovie",viewSeries:"general.viewSeries",watchVideo:"general.buttonWatchVideo",readingArticle:"general.readingArticle",buttonViewSeries:"general.buttonViewSeries",buttonViewMovie:"general.buttonViewMovie",buttonViewEpisode:"general.buttonViewEpisode",buttonListenAlong:"general.buttonListenAlong",buttonReadArticle:"general.buttonReadArticle"},e),serviceName=(()=>{switch(location.pathname.split("/")[1]){case"iplayer":return"iPlayer";case"sounds":return"Sounds";case"sport":return"Sport";case"news":return"News";case"weather":return"Weather";case"future":return"Future";default:return""}})();let strings,iPlayer,soundData,oldLang=null,VideoMedia={duration:0,currentTime:0,paused:!0},SoundMedia={duration:0,currentTime:0,paused:!0,title:null};presence.on("iFrameData",(e=>{e.audio&&(SoundMedia=e.audio),e.video&&(VideoMedia=e.video)})),presence.on("UpdateData",(async()=>{const e=document.location.pathname,[t,s,i,a]=await Promise.all([presence.getSetting("lang").catch((()=>"en")),presence.getSetting("buttons"),presence.getSetting("cover"),presence.getSetting("usePresenceName")]),{href:r}=document.location,n=(e,t)=>{e&&(d.largeImageKey=e.replace("{recipe}",t??"1280x720"))},l=()=>{d.type=3,[d.startTimestamp,d.endTimestamp]=presence.getTimestamps(VideoMedia.currentTime,VideoMedia.duration),d.smallImageKey=VideoMedia.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",d.smallImageText=VideoMedia.paused?strings.pause:strings.play,VideoMedia.paused&&(delete d.startTimestamp,delete d.endTimestamp)};var o;oldLang===t&&strings||(oldLang=t,strings=await(o=oldLang,presence.getStrings({play:"general.playing",pause:"general.paused",Live:"general.Live",browse:"general.browsing",searchSomething:"general.searchSomething",viewTeam:"twitch.viewTeam",viewPage:"general.viewPage",viewMovie:"general.viewMovie",viewSeries:"general.viewSeries",watchVideo:"general.buttonWatchVideo",readingArticle:"general.readingArticle",buttonViewSeries:"general.buttonViewSeries",buttonViewMovie:"general.buttonViewMovie",buttonViewEpisode:"general.buttonViewEpisode",buttonListenAlong:"general.buttonListenAlong",buttonReadArticle:"general.buttonReadArticle"},o)));let d={name:`BBC ${serviceName}`,largeImageKey:LogoAssets[`Bbc${serviceName}`],details:strings.browse,startTimestamp:browsingTimestamp};if(e.includes("/iplayer")){d.type=3,iPlayer??=await presence.getPageVariable("__IPLAYER_REDUX_STATE__").then((e=>e.__IPLAYER_REDUX_STATE__));let t=document.querySelector("smp-toucan-player")?.shadowRoot?.querySelector("smp-playback")?.shadowRoot?.querySelector("video");if(!t&&VideoMedia&&(t=VideoMedia),e.includes("/iplayer/episode"))if(!t.duration||iPlayer.episode?.Live)iPlayer.channel?.onAir||iPlayer.episode?.Live?(d.details=(iPlayer.channel??iPlayer.episode).title,d.state=strings.Live,n(iPlayer.episode?.images?.standard),d.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/live.png"):iPlayer.channel||(n(iPlayer.episode?.images?.promotional??iPlayer.header?.imageTemplate),d.details=iPlayer.relatedEpisodes?.count||iPlayer.header?.episodeCount?strings.viewSeries:strings.viewMovie,d.state=(iPlayer.episode||iPlayer.header).title,d.startTimestamp=browsingTimestamp);else{let e,s=document.querySelector(":is(.typo.typo--skylark.play-cta__subtitle, .typo.typo--bold.play-cta__title.typo--skylark)")?.textContent;if(s){const t=s.match(/[0-9]{1,2}/g);e=s.match(/: [0-9]{1,2}. (.*)/)?.[1]??s.match(/: (.*)/)?.[1],/Series [0-9]{1,2}: (Episode )?[0-9]{1,2}.?/i.test(s)&&(s=a?`Season ${t[0]}, Episode ${t[1]||1}`:`S${t[0]}${t[1]?`:E${t[1]}`:""}${e?` ${e}`:""}`)}const{title:i}=iPlayer.episode||iPlayer.header,l=s||iPlayer.episode?.labels?.category||"Animation";a&&(d.name=i),d.details=a?e:i,d.state=a?s:l,n(iPlayer.episode?.images?.promotional),[d.startTimestamp,d.endTimestamp]=presence.getTimestamps(t.currentTime,t.duration),d.smallImageKey=t.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",d.smallImageText=t.paused?strings.pause:strings.play,iPlayer.relatedEpisodes?.count?d.buttons=[{label:strings.buttonViewEpisode,url:r},{label:strings.buttonViewSeries,url:r}]:d.buttons=[{label:l.toLocaleLowerCase().includes("film")?strings.buttonViewMovie:strings.watchVideo,url:r}],t.paused&&(delete d.startTimestamp,delete d.endTimestamp)}}else if(e.includes("/sounds")){if(d.type=2,soundData??=await presence.getPageVariable("__PRELOADED_STATE__").then((e=>e.__PRELOADED_STATE__)),e.includes("/play/")){const t=e.includes("Live:");n(soundData.programmes.current.image_url),t?(d.details=SoundMedia.title??soundData.programmes.current.titles.primary,d.state=soundData.programmes.current.titles.secondary,d.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/live.png"):(d.details=SoundMedia.title??soundData.programmes.current.titles.primary,d.state=soundData.programmes.current.titles.secondary,d.smallImageKey=SoundMedia.paused||!SoundMedia.duration?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png"),d.smallImageText=SoundMedia.paused||!SoundMedia.duration?t?strings.Live:strings.pause:strings.play,[d.startTimestamp,d.endTimestamp]=presence.getTimestamps(SoundMedia.currentTime,SoundMedia.duration),d.buttons=[{label:strings.buttonListenAlong,url:r}],(SoundMedia.paused||t)&&(delete d.startTimestamp,delete d.endTimestamp)}}else if(e.includes("/sport")){d.details=strings.browse,d.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png";const t=document.querySelector("h1")?.textContent;e.includes("/sport/formula1")?(d.details=strings.viewPage,d.state="Formula 1",e.includes("/latest")||e.includes("/standings")?(d.details=strings.viewPage,d.state=t):(e.includes("/sport/formula1/")||e.includes("/formula1/"))&&(d.details=strings.readingArticle,d.state=t,d.buttons=[{label:strings.buttonReadArticle,url:r}])):e.includes("/sport/football")?(d.details=strings.viewPage,d.state="Football",e.includes("/averages")?(d.details=strings.viewPage,d.state=t):e.includes("/teams/")?(d.details=strings.viewTeam,d.state=t):e.includes("/gossip")||e.includes("/transfers")?(d.details=strings.readingArticle,d.state=t,d.buttons=[{label:strings.buttonReadArticle,url:r}]):e.includes("/top-scorers")?(d.details=strings.viewPage,d.state=t):e.includes("/womens")?(d.details=strings.viewPage,d.state="Women's Cricket"):e.includes("/leagues-cups")?(d.details=strings.viewPage,d.state=t):e.includes("/european")?(d.details=strings.viewPage,d.state="European's Cricket"):e.includes("/football/")&&(d.details=strings.readingArticle,d.state=t,d.buttons=[{label:strings.buttonReadArticle,url:r}])):e.includes("/sport/cricket")?(d.details=strings.viewPage,d.state="Cricket",d.smallImageText="Cricket",e.includes("/averages")?(d.details=strings.viewPage,d.state=t):e.includes("/teams/")?(d.details=strings.viewTeam,d.state=t,d.smallImageText="Cricket Team"):"Squad"===document.querySelector("li.sp-c-sport-navigation__item.sp-c-sport-navigation__item--secondary-selected")?.textContent||e.includes("/counties")?(d.details=strings.viewPage,d.state=t):e.includes("/womens")?(d.details=strings.viewPage,d.state="Women's Cricket"):e.includes("/scorecard/")?(d.details="Viewing scoredcard of:",d.state=`${document.querySelector("span.sp-c-fixture__team.sp-c-fixture__team--time.sp-c-fixture__team--time-home.gel-long-primer > span > span")?.textContent} & ${document.querySelector("div.sp-c-fixture__wrapper > span.sp-c-fixture__team.sp-c-fixture__team--time.sp-c-fixture__team--time-away.gel-long-primer > span > span")?.textContent}`):e.includes("/sport/cricket/")&&(d.details=strings.readingArticle,d.state=t,d.buttons=[{label:strings.buttonReadArticle,url:r}])):e.includes("/rugby-union")?(d.details=strings.viewPage,d.state="Rugby Union",d.smallImageText="Rugby Union",e.includes("/teams/")?(d.details=strings.viewTeam,d.state=t,d.smallImageText="Rugby Union Team"):e.includes("/rugby-union/")&&(d.details=strings.readingArticle,d.state=t,d.buttons=[{label:strings.buttonReadArticle,url:r}])):e.includes("/tennis")?(d.details=strings.viewPage,d.state="Tennis",d.smallImageText="Tennis",e.includes("/Live-scores")||e.includes("/order-of-play")?(d.details=strings.viewPage,d.state=t):e.includes("/tennis/")&&(d.details=strings.readingArticle,d.state=t,d.buttons=[{label:strings.buttonReadArticle,url:r}])):e.includes("/golf")?(d.details=strings.viewPage,d.state="Golf",d.smallImageText="Golf",e.includes("/athletics/")&&(d.details=strings.readingArticle,d.state=t,d.buttons=[{label:strings.buttonReadArticle,url:r}])):e.includes("/cycling")?(d.details=strings.viewPage,d.state="Cycling",d.smallImageText="Cycling",e.includes("/cycling/")&&(d.details=strings.readingArticle,d.state=t,d.buttons=[{label:strings.buttonReadArticle,url:r}])):e.includes("/sport/")&&(d.details=strings.readingArticle,d.state=t,d.buttons=[{label:strings.buttonReadArticle,url:r}],VideoMedia.duration&&(d.details=t,d.state=document.querySelector("time")?.textContent,l(),d.buttons=[{label:strings.watchVideo,url:r}])),e.includes("/scores-fixtures")||e.includes("/table")||e.includes("/results")||e.includes("/calendar")||e.includes("/leaderboard")?(d.details=strings.viewPage,d.state=t):e.includes("/av/")&&VideoMedia.duration&&(d.details=t,d.state=document.querySelector("span.qa-status-date-output")?.textContent,l(),d.buttons=[{label:strings.watchVideo,url:r}])}else if(e.includes("/weather")){d.details=strings.browse;const t=(document.querySelector("h2#wr-c-regional-forecast-slice__title")||document.querySelector("h1"))?.textContent,s={"/weather/search":{details:strings.searchSomething,smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/search.png"},"/weather/map":{details:strings.viewPage,state:"Map"},"/weather/([0-9])":{details:"Viewing weather of:",state:document.querySelector("h1#wr-location-name-id")?.textContent.split(" - ")[0]||null,smallImageText:document.querySelector("div.wr-day-summary > div > span")?.textContent,smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/reading.png",buttons:[{label:"View Weather",url:r}]},"/weather/articles/":{details:strings.readingArticle,state:t,smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/reading.png",buttons:[{label:strings.buttonReadArticle,url:r}]}};for(const[i,a]of Object.entries(s)){if(e.match(i)&&!VideoMedia.duration){d={...d,...a};break}VideoMedia.duration&&(d.details=t,d.state=(document.querySelector("time>span")||document.querySelector("b"))?.textContent,l())}}else if(e.includes("/news")||e.includes("/future")){d.details=strings.browse,d.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png";const t=document.querySelector("h1")?.textContent,s={"/have_your_say":{details:strings.viewPage,state:"Your Coronavirus Stories"},"/coronavirus":{details:strings.viewPage,state:"Coronavirus pandemic"},"(-|/)([0-9])":{details:strings.readingArticle,state:t,buttons:[{label:strings.buttonReadArticle,url:r}]},"/in_pictures":{details:strings.viewPage,state:"In Pictures"},"/reality_check":{details:strings.viewPage,state:"Reality Check"},"/the_reporters":{details:strings.viewPage,state:"Long Reads"},"/newsbeat":{details:strings.readingArticle,state:"Newsbeat"},"/blogs":{details:strings.viewPage,state:"Blogs"},"/technology":{details:strings.viewPage,state:"Technology news"},"/science-environment":{details:strings.viewPage,state:"Technology news"},"/stories":{details:strings.viewPage,state:"Stories"},"/entertainment_and_arts":{details:strings.viewPage,state:"Entertainment and arts"},"/health":{details:strings.viewPage,state:"Health news"},"/world":{details:strings.viewPage,state:"World news"},"/business":{details:strings.viewPage,state:"Business news"}};for(const[i,a]of Object.entries(s)){if(e.match(i)&&!e.includes("/world/")&&!VideoMedia.duration){d={...d,...a};break}e.includes("/world/")&&!VideoMedia.duration?(d.details=strings.viewPage,d.state="World News"):VideoMedia.duration?(d.details=t,d.state=document.querySelector("time")?.textContent,l(),d.buttons=[{label:strings.watchVideo,url:r}]):e.includes("/articles/")&&(d.details=strings.readingArticle,d.state=t,d.buttons=[{label:strings.buttonReadArticle,url:r}])}}else"/search"===e&&(d.details=strings.searchSomething,d.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png");s||delete d.buttons,i||(d.largeImageKey=LogoAssets[`Bbc${serviceName}`]),presence.setActivity(d)}));const unused_variable=(e,t)=>e+t;unused_variable(1,2);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;