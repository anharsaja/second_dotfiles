var __webpack_exports__={};const presence=new Presence({clientId:"1196469492310618142"}),browsingTimestamp=Math.floor(Date.now()/1e3);function getNumberSuffix(e){switch(e){case 1:return`${e}st`;case 2:return`${e}nd`;case 3:return`${e}rd`;default:return`${e}th`}}presence.on("UpdateData",(async()=>{const e=document.location.pathname.toLowerCase().split("/"),t={smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/viewing.png",smallImageText:"Viewing...",startTimestamp:browsingTimestamp};if(e[1]){if("desolation"===e[1])if(t.details="Portal 2: Desolation mod",t.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/E/Emberspark%20Games/assets/0.png",t.buttons=[{label:"View the mod page",url:"https://emberspark.games/desolation"}],e[2]&&"about"!==e[2])switch(e[2]){case"news":if(t.state="Viewing the changelog page",t.smallImageText="Viewing all the posts...",e[3]){t.smallImageText="Viewing a changelog post...";const e=document.querySelector(".newsHeadline").textContent.toLowerCase();e&&(t.state=`Viewing the changelog from ${e}`)}break;case"media":t.state="Viewing the media page";break;case"catalog":if(t.details="Portal 2: Desolation mod - Catalog",t.state="In the test subject waiting area",t.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/E/Emberspark%20Games/assets/1.png",t.smallImageText="Sitting in the waiting area...",t.buttons=[{label:"View the catalogue",url:"https://emberspark.games/desolation/catalog"}],document.querySelector("#catalogue-container").classList.contains("scroll-in")){if(!document.querySelector("#PreMiD-EmbersparkGames-presence-script")){const e=document.createElement("script");e.id="PreMiD-EmbersparkGames-presence-script",e.innerHTML='\n\t\t\t\t\tconst pageNumber = document.createElement("span");\n\t\t\t\t\tpageNumber.id = "pageNumber";\n\t\t\t\t\tpageNumber.style.display = "none";\n\t\t\t\t\tpageNumber.textContent = $("#catalogue").turn("page");\n\t\t\t\t\tdocument.body.appendChild(pageNumber);\n\n\t\t\t\t\tlet currentPageNumber = pageNumber.textContent;\n\n\t\t\t\t\tsetInterval(() => {\n\t\t\t\t\t\tconst newPageNumber = $("#catalogue").turn("page");\n\t\t\t\t\t\tif (newPageNumber !== currentPageNumber) {\n\t\t\t\t\t\t\tpageNumber.textContent = newPageNumber;\n\t\t\t\t\t\t\tcurrentPageNumber = newPageNumber;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1000);\n\t\t\t\t\t',document.head.appendChild(e)}t.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",t.smallImageText="Reading the catalogue...",t.state=`Reading the catalogue, currently on the ${getNumberSuffix(parseInt(document.querySelector("#pageNumber").textContent))} page`}break;case"gallery":{t.state="Viewing the gallery page",t.smallImageText="Viewing all the images...";const e=document.querySelector(".splide__slide.is-active.is-visible");"matrix(1, 0, 0, 1, 0, 0)"===getComputedStyle(document.querySelector("#fullScreenContainer")).transform&&e&&(t.details="Portal 2: Desolation mod - Gallery",t.smallImageText="Viewing an image...",t.state=`Viewing the ${getNumberSuffix(parseInt(e.id.split("-")[2].split("slide")[1].replace(/^0+/,"")))} image`);break}case"team":t.state="Viewing the list of our team members";break;case"faq":{t.state="Viewing the FAQ page",t.smallImageText="Viewing all the questions...";const e=document.querySelector(".collapsible.active");e&&(t.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/question.png",t.smallImageText="Reading a question...",t.state=`Reading: "${e.querySelector("h1").textContent}"`);break}}else t.state="Viewing the about page"}else t.details="Emberspark Games",t.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/E/Emberspark%20Games/assets/logo.png",t.state="Viewing the home page";presence.setActivity(t)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFZM0IsRUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3ByZXNlbmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHByZXNlbmNlID0gbmV3IFByZXNlbmNlKHsgY2xpZW50SWQ6IFwiMTE5NjQ2OTQ5MjMxMDYxODE0MlwiIH0pLCBicm93c2luZ1RpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xucHJlc2VuY2Uub24oXCJVcGRhdGVEYXRhXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBjdXJyZW50UGF0aCA9IGRvY3VtZW50LmxvY2F0aW9uLnBhdGhuYW1lLnRvTG93ZXJDYXNlKCkuc3BsaXQoXCIvXCIpLCBwcmVzZW5jZURhdGEgPSB7XG4gICAgICAgIHNtYWxsSW1hZ2VLZXk6IFwiaHR0cHM6Ly9jZG4ucmNkLmdnL1ByZU1pRC9yZXNvdXJjZXMvdmlld2luZy5wbmdcIixcbiAgICAgICAgc21hbGxJbWFnZVRleHQ6IFwiVmlld2luZy4uLlwiLFxuICAgICAgICBzdGFydFRpbWVzdGFtcDogYnJvd3NpbmdUaW1lc3RhbXAsXG4gICAgfTtcbiAgICBpZiAoIWN1cnJlbnRQYXRoWzFdKSB7XG4gICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJFbWJlcnNwYXJrIEdhbWVzXCI7XG4gICAgICAgIHByZXNlbmNlRGF0YS5sYXJnZUltYWdlS2V5ID0gXCJodHRwczovL2Nkbi5yY2QuZ2cvUHJlTWlEL3dlYnNpdGVzL0UvRW1iZXJzcGFyayUyMEdhbWVzL2Fzc2V0cy9sb2dvLnBuZ1wiO1xuICAgICAgICBwcmVzZW5jZURhdGEuc3RhdGUgPSBcIlZpZXdpbmcgdGhlIGhvbWUgcGFnZVwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChjdXJyZW50UGF0aFsxXSA9PT0gXCJkZXNvbGF0aW9uXCIpIHtcbiAgICAgICAgcHJlc2VuY2VEYXRhLmRldGFpbHMgPSBcIlBvcnRhbCAyOiBEZXNvbGF0aW9uIG1vZFwiO1xuICAgICAgICBwcmVzZW5jZURhdGEubGFyZ2VJbWFnZUtleSA9IFwiaHR0cHM6Ly9jZG4ucmNkLmdnL1ByZU1pRC93ZWJzaXRlcy9FL0VtYmVyc3BhcmslMjBHYW1lcy9hc3NldHMvMC5wbmdcIjtcbiAgICAgICAgcHJlc2VuY2VEYXRhLmJ1dHRvbnMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiVmlldyB0aGUgbW9kIHBhZ2VcIixcbiAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9lbWJlcnNwYXJrLmdhbWVzL2Rlc29sYXRpb25cIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgICAgIGlmICghY3VycmVudFBhdGhbMl0gfHwgY3VycmVudFBhdGhbMl0gPT09IFwiYWJvdXRcIilcbiAgICAgICAgICAgIHByZXNlbmNlRGF0YS5zdGF0ZSA9IFwiVmlld2luZyB0aGUgYWJvdXQgcGFnZVwiO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY3VycmVudFBhdGhbMl0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwibmV3c1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5zdGF0ZSA9IFwiVmlld2luZyB0aGUgY2hhbmdlbG9nIHBhZ2VcIjtcbiAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VEYXRhLnNtYWxsSW1hZ2VUZXh0ID0gXCJWaWV3aW5nIGFsbCB0aGUgcG9zdHMuLi5cIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQYXRoWzNdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuc21hbGxJbWFnZVRleHQgPSBcIlZpZXdpbmcgYSBjaGFuZ2Vsb2cgcG9zdC4uLlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3c0hlYWRsaW5lID0gZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3RvcihcIi5uZXdzSGVhZGxpbmVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdzSGVhZGxpbmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VEYXRhLnN0YXRlID0gYFZpZXdpbmcgdGhlIGNoYW5nZWxvZyBmcm9tICR7bmV3c0hlYWRsaW5lfWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgXCJtZWRpYVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5zdGF0ZSA9IFwiVmlld2luZyB0aGUgbWVkaWEgcGFnZVwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBcImNhdGFsb2dcIjoge1xuICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IFwiUG9ydGFsIDI6IERlc29sYXRpb24gbW9kIC0gQ2F0YWxvZ1wiO1xuICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuc3RhdGUgPSBcIkluIHRoZSB0ZXN0IHN1YmplY3Qgd2FpdGluZyBhcmVhXCI7XG4gICAgICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5zbWFsbEltYWdlS2V5ID0gXCJodHRwczovL2Nkbi5yY2QuZ2cvUHJlTWlEL3dlYnNpdGVzL0UvRW1iZXJzcGFyayUyMEdhbWVzL2Fzc2V0cy8xLnBuZ1wiO1xuICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuc21hbGxJbWFnZVRleHQgPSBcIlNpdHRpbmcgaW4gdGhlIHdhaXRpbmcgYXJlYS4uLlwiO1xuICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuYnV0dG9ucyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJWaWV3IHRoZSBjYXRhbG9ndWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9lbWJlcnNwYXJrLmdhbWVzL2Rlc29sYXRpb24vY2F0YWxvZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3RvcihcIiNjYXRhbG9ndWUtY29udGFpbmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2Nyb2xsLWluXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjUHJlTWlELUVtYmVyc3BhcmtHYW1lcy1wcmVzZW5jZS1zY3JpcHRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmlwdC5pZCA9IFwiUHJlTWlELUVtYmVyc3BhcmtHYW1lcy1wcmVzZW5jZS1zY3JpcHRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHQuaW5uZXJIVE1MID0gYFxuXHRcdFx0XHRcdGNvbnN0IHBhZ2VOdW1iZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0XHRcdFx0XHRwYWdlTnVtYmVyLmlkID0gXCJwYWdlTnVtYmVyXCI7XG5cdFx0XHRcdFx0cGFnZU51bWJlci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cdFx0XHRcdFx0cGFnZU51bWJlci50ZXh0Q29udGVudCA9ICQoXCIjY2F0YWxvZ3VlXCIpLnR1cm4oXCJwYWdlXCIpO1xuXHRcdFx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocGFnZU51bWJlcik7XG5cblx0XHRcdFx0XHRsZXQgY3VycmVudFBhZ2VOdW1iZXIgPSBwYWdlTnVtYmVyLnRleHRDb250ZW50O1xuXG5cdFx0XHRcdFx0c2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3QgbmV3UGFnZU51bWJlciA9ICQoXCIjY2F0YWxvZ3VlXCIpLnR1cm4oXCJwYWdlXCIpO1xuXHRcdFx0XHRcdFx0aWYgKG5ld1BhZ2VOdW1iZXIgIT09IGN1cnJlbnRQYWdlTnVtYmVyKSB7XG5cdFx0XHRcdFx0XHRcdHBhZ2VOdW1iZXIudGV4dENvbnRlbnQgPSBuZXdQYWdlTnVtYmVyO1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50UGFnZU51bWJlciA9IG5ld1BhZ2VOdW1iZXI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgMTAwMCk7XG5cdFx0XHRcdFx0YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuc21hbGxJbWFnZUtleSA9IFwiaHR0cHM6Ly9jZG4ucmNkLmdnL1ByZU1pRC9yZXNvdXJjZXMvcmVhZGluZy5wbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5zbWFsbEltYWdlVGV4dCA9IFwiUmVhZGluZyB0aGUgY2F0YWxvZ3VlLi4uXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuc3RhdGUgPSBgUmVhZGluZyB0aGUgY2F0YWxvZ3VlLCBjdXJyZW50bHkgb24gdGhlICR7Z2V0TnVtYmVyU3VmZml4KHBhcnNlSW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGFnZU51bWJlclwiKS50ZXh0Q29udGVudCkpfSBwYWdlYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBcImdhbGxlcnlcIjoge1xuICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuc3RhdGUgPSBcIlZpZXdpbmcgdGhlIGdhbGxlcnkgcGFnZVwiO1xuICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuc21hbGxJbWFnZVRleHQgPSBcIlZpZXdpbmcgYWxsIHRoZSBpbWFnZXMuLi5cIjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlSW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNwbGlkZV9fc2xpZGUuaXMtYWN0aXZlLmlzLXZpc2libGVcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZnVsbFNjcmVlbkNvbnRhaW5lclwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50cmFuc2Zvcm0gPT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IFwiUG9ydGFsIDI6IERlc29sYXRpb24gbW9kIC0gR2FsbGVyeVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VEYXRhLnNtYWxsSW1hZ2VUZXh0ID0gXCJWaWV3aW5nIGFuIGltYWdlLi4uXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuc3RhdGUgPSBgVmlld2luZyB0aGUgJHtnZXROdW1iZXJTdWZmaXgocGFyc2VJbnQoYWN0aXZlSW1hZ2UuaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoXCItXCIpWzJdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KFwic2xpZGVcIilbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXjArLywgXCJcIikpKX0gaW1hZ2VgO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFwidGVhbVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5zdGF0ZSA9IFwiVmlld2luZyB0aGUgbGlzdCBvZiBvdXIgdGVhbSBtZW1iZXJzXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFwiZmFxXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VEYXRhLnN0YXRlID0gXCJWaWV3aW5nIHRoZSBGQVEgcGFnZVwiO1xuICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuc21hbGxJbWFnZVRleHQgPSBcIlZpZXdpbmcgYWxsIHRoZSBxdWVzdGlvbnMuLi5cIjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlUXVlc3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbGxhcHNpYmxlLmFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVF1ZXN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuc21hbGxJbWFnZUtleSA9IFwiaHR0cHM6Ly9jZG4ucmNkLmdnL1ByZU1pRC9yZXNvdXJjZXMvcXVlc3Rpb24ucG5nXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuc21hbGxJbWFnZVRleHQgPSBcIlJlYWRpbmcgYSBxdWVzdGlvbi4uLlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VEYXRhLnN0YXRlID0gYFJlYWRpbmc6IFwiJHthY3RpdmVRdWVzdGlvbi5xdWVyeVNlbGVjdG9yKFwiaDFcIikudGV4dENvbnRlbnR9XCJgO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwcmVzZW5jZS5zZXRBY3Rpdml0eShwcmVzZW5jZURhdGEpO1xufSk7XG5mdW5jdGlvbiBnZXROdW1iZXJTdWZmaXgobnVtYmVyKSB7XG4gICAgc3dpdGNoIChudW1iZXIpIHtcbiAgICAgICAgY2FzZSAxOiB7XG4gICAgICAgICAgICByZXR1cm4gYCR7bnVtYmVyfXN0YDtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI6IHtcbiAgICAgICAgICAgIHJldHVybiBgJHtudW1iZXJ9bmRgO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzoge1xuICAgICAgICAgICAgcmV0dXJuIGAke251bWJlcn1yZGA7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgcmV0dXJuIGAke251bWJlcn10aGA7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljSEpsYzJWdVkyVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKd2NtVnpaVzVqWlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hOUVVGTkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEZGQlFWRXNRMEZCUXl4RlFVRkZMRkZCUVZFc1JVRkJSU3h4UWtGQmNVSXNSVUZCUlN4RFFVRkRMRVZCUTJwRkxHbENRVUZwUWl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJVVzVFTEZGQlFWRXNRMEZCUXl4RlFVRkZMRU5CUVVNc1dVRkJXU3hGUVVGRkxFdEJRVXNzU1VGQlNTeEZRVUZGTzBsQlEzQkRMRTFCUVUwc1YwRkJWeXhIUVVGSExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZEZEVVc1dVRkJXU3hIUVVGcFFqdFJRVU0xUWl4aFFVRmhMRzFFUVVGblFqdFJRVU0zUWl4alFVRmpMRVZCUVVVc1dVRkJXVHRSUVVNMVFpeGpRVUZqTEVWQlFVVXNhVUpCUVdsQ08wdEJRMnBETEVOQlFVTTdTVUZGU0N4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTzFGQlEzQkNMRmxCUVZrc1EwRkJReXhQUVVGUExFZEJRVWNzYTBKQlFXdENMRU5CUVVNN1VVRkRNVU1zV1VGQldTeERRVUZETEdGQlFXRXNORVZCUVdNc1EwRkJRenRSUVVONlF5eFpRVUZaTEVOQlFVTXNTMEZCU3l4SFFVRkhMSFZDUVVGMVFpeERRVUZETzB0QlF6ZERPMU5CUVUwc1NVRkJTU3hYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NXVUZCV1N4RlFVRkZPMUZCUXpORExGbEJRVmtzUTBGQlF5eFBRVUZQTEVkQlFVY3NNRUpCUVRCQ0xFTkJRVU03VVVGRGJFUXNXVUZCV1N4RFFVRkRMR0ZCUVdFc2VVVkJRWGRDTEVOQlFVTTdVVUZEYmtRc1dVRkJXU3hEUVVGRExFOUJRVThzUjBGQlJ6dFpRVU4wUWp0blFrRkRReXhMUVVGTExFVkJRVVVzYlVKQlFXMUNPMmRDUVVNeFFpeEhRVUZITEVWQlFVVXNjVU5CUVhGRE8yRkJRekZETzFOQlEwUXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFOUJRVTg3V1VGRGFFUXNXVUZCV1N4RFFVRkRMRXRCUVVzc1IwRkJSeXgzUWtGQmQwSXNRMEZCUXp0aFFVTXhRenRaUVVOS0xGRkJRVkVzVjBGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZPMmRDUVVOMlFpeExRVUZMTEUxQlFVMHNRMEZCUXl4RFFVRkRPMjlDUVVOYUxGbEJRVmtzUTBGQlF5eExRVUZMTEVkQlFVY3NORUpCUVRSQ0xFTkJRVU03YjBKQlEyeEVMRmxCUVZrc1EwRkJReXhqUVVGakxFZEJRVWNzTUVKQlFUQkNMRU5CUVVNN2IwSkJRM3BFTEVsQlFVa3NWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRk8zZENRVU51UWl4WlFVRlpMRU5CUVVNc1kwRkJZeXhIUVVGSExEWkNRVUUyUWl4RFFVRkRPM2RDUVVNMVJDeE5RVUZOTEZsQlFWa3NSMEZCUnl4UlFVRlJPelpDUVVNelFpeGhRVUZoTEVOQlFVTXNaVUZCWlN4RFFVRkRPelpDUVVNNVFpeFhRVUZYTEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVNN2QwSkJRelZDTEVsQlFVa3NXVUZCV1RzMFFrRkRaaXhaUVVGWkxFTkJRVU1zUzBGQlN5eEhRVUZITERoQ1FVRTRRaXhaUVVGWkxFVkJRVVVzUTBGQlF6dHhRa0ZEYmtVN2IwSkJSVVFzVFVGQlRUdHBRa0ZEVGp0blFrRkRSQ3hMUVVGTExFOUJRVThzUTBGQlF5eERRVUZETzI5Q1FVTmlMRmxCUVZrc1EwRkJReXhMUVVGTExFZEJRVWNzZDBKQlFYZENMRU5CUVVNN2IwSkJSVGxETEUxQlFVMDdhVUpCUTA0N1owSkJRMFFzUzBGQlN5eFRRVUZUTEVOQlFVTXNRMEZCUXp0dlFrRkRaaXhaUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITEc5RFFVRnZReXhEUVVGRE8yOUNRVU0xUkN4WlFVRlpMRU5CUVVNc1MwRkJTeXhIUVVGSExHdERRVUZyUXl4RFFVRkRPMjlDUVVONFJDeFpRVUZaTEVOQlFVTXNZVUZCWVN4NVJVRkJlVUlzUTBGQlF6dHZRa0ZEY0VRc1dVRkJXU3hEUVVGRExHTkJRV01zUjBGQlJ5eG5RMEZCWjBNc1EwRkJRenR2UWtGREwwUXNXVUZCV1N4RFFVRkRMRTlCUVU4c1IwRkJSenQzUWtGRGRFSTdORUpCUTBNc1MwRkJTeXhGUVVGRkxHOUNRVUZ2UWpzMFFrRkRNMElzUjBGQlJ5eEZRVUZGTERaRFFVRTJRenQ1UWtGRGJFUTdjVUpCUTBRc1EwRkJRenR2UWtGRlJpeEpRVU5ETEZGQlFWRTdlVUpCUTA0c1lVRkJZU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRPM2xDUVVOeVF5eFRRVUZUTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVOb1F6dDNRa0ZEUkN4SlFVTkRMRU5CUVVNc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eDVRMEZCZVVNc1EwRkJReXhGUVVOcVJUczBRa0ZEUkN4TlFVRk5MRTFCUVUwc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPelJDUVVOb1JDeE5RVUZOTEVOQlFVTXNSVUZCUlN4SFFVRkhMSGREUVVGM1F5eERRVUZET3pSQ1FVTnlSQ3hOUVVGTkxFTkJRVU1zVTBGQlV5eEhRVUZIT3pzN096czdPenM3T3pzN096czdPMDFCWjBKd1FpeERRVUZET3pSQ1FVTkJMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPM2xDUVVOc1F6dDNRa0ZGUkN4WlFVRlpMRU5CUVVNc1lVRkJZU3h2UkVGQmFVSXNRMEZCUXp0M1FrRkROVU1zV1VGQldTeERRVUZETEdOQlFXTXNSMEZCUnl3d1FrRkJNRUlzUTBGQlF6dDNRa0ZEZWtRc1dVRkJXU3hEUVVGRExFdEJRVXNzUjBGQlJ5d3lRMEZCTWtNc1pVRkJaU3hEUVVNNVJTeFJRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZETTBRc1QwRkJUeXhEUVVGRE8zRkNRVU5VTzI5Q1FVVkVMRTFCUVUwN2FVSkJRMDQ3WjBKQlEwUXNTMEZCU3l4VFFVRlRMRU5CUVVNc1EwRkJRenR2UWtGRFppeFpRVUZaTEVOQlFVTXNTMEZCU3l4SFFVRkhMREJDUVVFd1FpeERRVUZETzI5Q1FVTm9SQ3haUVVGWkxFTkJRVU1zWTBGQll5eEhRVUZITERKQ1FVRXlRaXhEUVVGRE8yOUNRVVV4UkN4TlFVRk5MRmRCUVZjc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVU42UXl4eFEwRkJjVU1zUTBGRGNrTXNRMEZCUXp0dlFrRkRSaXhKUVVORExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1EwRkJRenQ1UWtGRE9VUXNVMEZCVXl4TFFVRkxMREJDUVVFd1FqdDNRa0ZETVVNc1YwRkJWeXhGUVVOV08zZENRVU5FTEZsQlFWa3NRMEZCUXl4UFFVRlBMRWRCUVVjc2IwTkJRVzlETEVOQlFVTTdkMEpCUXpWRUxGbEJRVmtzUTBGQlF5eGpRVUZqTEVkQlFVY3NjVUpCUVhGQ0xFTkJRVU03ZDBKQlEzQkVMRmxCUVZrc1EwRkJReXhMUVVGTExFZEJRVWNzWlVGQlpTeGxRVUZsTEVOQlEyeEVMRkZCUVZFc1EwRkRVQ3hYUVVGWExFTkJRVU1zUlVGQlJUczJRa0ZEV2l4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZET3paQ1FVTmlMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdOa0pCUTJwQ0xFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUTNCQ0xFTkJRMFFzVVVGQlVTeERRVUZETzNGQ1FVTldPMjlDUVVWRUxFMUJRVTA3YVVKQlEwNDdaMEpCUTBRc1MwRkJTeXhOUVVGTkxFTkJRVU1zUTBGQlF6dHZRa0ZEV2l4WlFVRlpMRU5CUVVNc1MwRkJTeXhIUVVGSExITkRRVUZ6UXl4RFFVRkRPMjlDUVVVMVJDeE5RVUZOTzJsQ1FVTk9PMmRDUVVORUxFdEJRVXNzUzBGQlN5eERRVUZETEVOQlFVTTdiMEpCUTFnc1dVRkJXU3hEUVVGRExFdEJRVXNzUjBGQlJ5eHpRa0ZCYzBJc1EwRkJRenR2UWtGRE5VTXNXVUZCV1N4RFFVRkRMR05CUVdNc1IwRkJSeXc0UWtGQk9FSXNRMEZCUXp0dlFrRkROMFFzVFVGQlRTeGpRVUZqTEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkRPMjlDUVVOeVJTeEpRVUZKTEdOQlFXTXNSVUZCUlR0M1FrRkRia0lzV1VGQldTeERRVUZETEdGQlFXRXNjVVJCUVd0Q0xFTkJRVU03ZDBKQlF6ZERMRmxCUVZrc1EwRkJReXhqUVVGakxFZEJRVWNzZFVKQlFYVkNMRU5CUVVNN2QwSkJRM1JFTEZsQlFWa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1lVRkRjRUlzWTBGQll5eERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhYUVVOd1F5eEhRVUZITEVOQlFVTTdjVUpCUTBvN2IwSkJSVVFzVFVGQlRUdHBRa0ZEVGp0aFFVTkVPMU5CUTBRN1MwRkRSRHRKUVVWRUxGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1FVRkRjRU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZGU0N4VFFVRlRMR1ZCUVdVc1EwRkJReXhOUVVGak8wbEJRM1JETEZGQlFWRXNUVUZCVFN4RlFVRkZPMUZCUTJZc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5RTEU5QlFVOHNSMEZCUnl4TlFVRk5MRWxCUVVrc1EwRkJRenRUUVVOeVFqdFJRVU5FTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRVQ3hQUVVGUExFZEJRVWNzVFVGQlRTeEpRVUZKTEVOQlFVTTdVMEZEY2tJN1VVRkRSQ3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlExQXNUMEZCVHl4SFFVRkhMRTFCUVUwc1NVRkJTU3hEUVVGRE8xTkJRM0pDTzFGQlEwUXNUMEZCVHl4RFFVRkRMRU5CUVVNN1dVRkRVaXhQUVVGUExFZEJRVWNzVFVGQlRTeEpRVUZKTEVOQlFVTTdVMEZEY2tJN1MwRkRSRHRCUVVOR0xFTkJRVU1pZlE9PSJdLCJuYW1lcyI6WyJwcmVzZW5jZSIsIlByZXNlbmNlIiwiY2xpZW50SWQiLCJicm93c2luZ1RpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJnZXROdW1iZXJTdWZmaXgiLCJudW1iZXIiLCJvbiIsImFzeW5jIiwiY3VycmVudFBhdGgiLCJkb2N1bWVudCIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJ0b0xvd2VyQ2FzZSIsInNwbGl0IiwicHJlc2VuY2VEYXRhIiwic21hbGxJbWFnZUtleSIsInNtYWxsSW1hZ2VUZXh0Iiwic3RhcnRUaW1lc3RhbXAiLCJkZXRhaWxzIiwibGFyZ2VJbWFnZUtleSIsImJ1dHRvbnMiLCJsYWJlbCIsInVybCIsInN0YXRlIiwibmV3c0hlYWRsaW5lIiwicXVlcnlTZWxlY3RvciIsInRleHRDb250ZW50IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJpbm5lckhUTUwiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJzZUludCIsImFjdGl2ZUltYWdlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRyYW5zZm9ybSIsInJlcGxhY2UiLCJhY3RpdmVRdWVzdGlvbiIsInNldEFjdGl2aXR5Il0sInNvdXJjZVJvb3QiOiIifQ==
undefined;