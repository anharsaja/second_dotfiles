var __webpack_exports__={};const presence=new Presence({clientId:"1017821399705985097"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/C/CritiqueBrainz/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:t,href:a}=window.location,i=t.split("/").slice(1);switch(i[0]){case"":e.details="Browsing home page";break;case"profile":if("applications"===i[1])switch(i[2]){case"":e.details="Managing applications";break;case"create":e.details="Creating a new application";break;default:/\/edit\/?$/.test(t)&&(e.details="Editing an application",e.state=document.querySelector("form fieldset input").value)}else"edit"===i[1]&&(e.details="Editing profile");break;case"user":if("edit"===i[1])e.details="Editing profile",e.state=document.querySelector(".nav a").textContent.replace(/^\s+|\s+$/g,"");else{e.details="Viewing a profile";const t=document.querySelector("h2").textContent;switch(i[2]||""){case"":e.state=t;break;case"info":e.state=`Statistics for '${t}'`}}break;case"statistics":e.details="Viewing the top 10 contributors";break;case"review":switch(e.details="Browsing reviews",i[1]){case"":e.state="Home page";break;case"write":e.details="Writing a review",e.state=document.querySelector("dd a").textContent;break;default:if(/^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$/.test(i[1]))switch(e.largeImageKey=document.querySelector(".cover-art")?.src??e.largeImageKey,i[2]||""){case"":e.details="Reading a review",e.state=`${document.querySelector("h3 > a").textContent}'s review of ${document.querySelector("h2 > a").textContent}`,document.querySelector(".alert-warning")||(e.buttons=[{label:"Read Review",url:a}]);break;case"edit":e.details="Editing review",e.state=document.querySelector("dd a").textContent;break;case"revisions":i[3]?(e.details="Viewing review revision",e.state=document.querySelector("h2 a").textContent):e.details="Viewing review revision history";break;case"delete":e.details="Deleting review",e.state=document.querySelector(".lead").textContent.match(/"(.*?)"/)[1]}}break;case"search":e.details="Searching",e.state=document.querySelector("#input-query").value;break;default:e.details="Browsing...",e.state=document.title.match(/(.*?)( - CritiqueBrainz$|$)/)[1]}e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;