var __webpack_exports__={};const presence=new Presence({clientId:"840759396103749633"}),browsingTimestamp=Math.floor(Date.now()/1e3);async function getTranslation(e){const t=0===await presence.getSetting("lang")?"en":"de";switch(e){case"home":return"de"===t?"Durchsucht die Startseite":"Browsing home page";case"search":return"de"===t?"Sucht nach etwas":"Searching for something";case"faq":return"de"===t?"Durchsucht das FAQ":"Browsing FAQ page";case"activity":return"de"===t?"Schaut sich Aktivität an":"Viewing activity";case"user":return"de"===t?"Schaut sich Benutzer an":"Viewing user";case"settings":return"de"===t?"Durchsucht die Einstellungen":"Browsing settings page";case"viewUser":return"de"===t?"Benutzer anzeigen":"View user";case"viewActivity":return"de"===t?"Aktivität anzeigen":"View activity"}}presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/P/PresenceDB/assets/logo.png",startTimestamp:browsingTimestamp};switch(window.location.pathname){case"/":e.details=await getTranslation("home");break;case"/search":e.details=await getTranslation("search");break;case"/faq":e.details=await getTranslation("faq");break;default:if(window.location.pathname.includes("/activity/")){if(!document.querySelector("#activityName"))return;e.details=await getTranslation("activity"),e.state=document.querySelector("#activityName").textContent,e.buttons=[{label:await getTranslation("viewActivity"),url:window.location.href}]}else if(window.location.pathname.includes("/user/")){if(!document.querySelector("#userName"))return;e.details=await getTranslation("user"),e.state=document.querySelector("#userName").textContent,e.buttons=[{label:await getTranslation("viewUser"),url:window.location.href}]}else"/settings"===window.location.pathname&&(e.details=await getTranslation("settings"))}e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;