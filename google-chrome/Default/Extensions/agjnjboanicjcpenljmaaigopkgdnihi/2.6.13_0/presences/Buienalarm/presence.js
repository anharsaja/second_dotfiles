var __webpack_exports__={};const presence=new Presence({clientId:"800702121866559508"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/B/Buienalarm/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:t}=document.location,n=await presence.getSetting("privacy");let a,c;a=document.querySelector("head").childNodes[9]?.textContent.includes('country":')?JSON.parse(document.querySelector("head").childNodes[9].textContent.replace(/(<!-- {2})|( -->)|( HOST: )/gm,"")):document.querySelector("head").childNodes[10]?.textContent.includes('country":')?JSON.parse(document.querySelector("head").childNodes[10].textContent.replace(/(<!-- {2})|( -->)|( HOST: )/gm,"")):null;const s=document.querySelector('[class="input white-text focus"]');s?.value?(2===n?(e.details="Zoekt naar",e.state=s.value):e.details="Aan het zoeken",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png"):null===a?e.details="/"===t?"Bekijkt de home pagina":"Aan het browsen..":(c=0===n?`Een locatie in ${a.country}`:1===n?`Een locatie in ${a.region}`:2===n?a.name:"Een Privé locatie",e.state=c,e.smallImageKey=document.querySelector('[class="icon left"]').getAttribute("src").split("weather/")[1].replace(".svg","").toLowerCase(),document.querySelector('[class="ip-btn ip-active"]')?.textContent??"❚❚"!==document.querySelector('[class="ip-btn"]')?.textContent?e.details="Bekijkt de weersverwachting voor":e.details="Bekijkt de weersgrafiek voor"),e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VuY2UuanMiLCJtYXBwaW5ncyI6IjJCQUFBLE1BQU1BLFNBQVcsSUFBSUMsU0FBUyxDQUMxQkMsU0FBVSx1QkFDVkMsa0JBQW9CQyxLQUFLQyxNQUFNQyxLQUFLQyxNQUFRLEtBQ2hEUCxTQUFTUSxHQUFHLGNBQWNDLFVBQ3RCLE1BQU1DLEVBQWUsQ0FDakJDLGNBQWUsa0VBQ2ZDLGVBQWdCVCxvQkFDakIsU0FBRVUsR0FBYUMsU0FBU0MsU0FBVUMsUUFBZ0JoQixTQUFTaUIsV0FBVyxXQUN6RSxJQUFJQyxFQUFnQkMsRUFJaEJELEVBSEFKLFNBQ0NNLGNBQWMsUUFDZEMsV0FBVyxJQUFJQyxZQUFZQyxTQUFTLGFBQ3BCQyxLQUFLQyxNQUFNWCxTQUN2Qk0sY0FBYyxRQUNkQyxXQUFXLEdBQUdDLFlBQVlJLFFBQVEsZ0NBQWlDLEtBRW5FWixTQUNKTSxjQUFjLFFBQ2RDLFdBQVcsS0FBS0MsWUFBWUMsU0FBUyxhQUNyQkMsS0FBS0MsTUFBTVgsU0FDdkJNLGNBQWMsUUFDZEMsV0FBVyxJQUFJQyxZQUFZSSxRQUFRLGdDQUFpQyxLQUd4RCxLQUNyQixNQUFNQyxFQUFTYixTQUFTTSxjQUFjLG9DQUNsQ08sR0FBUUMsT0FDUSxJQUFaWixHQUNBTixFQUFhbUIsUUFBVSxhQUN2Qm5CLEVBQWFvQixNQUFRSCxFQUFPQyxPQUc1QmxCLEVBQWFtQixRQUFVLGlCQUMzQm5CLEVBQWFxQixjQUFnQixrREFFTCxPQUFuQmIsRUFFRFIsRUFBYW1CLFFBREEsTUFBYmhCLEVBQ3VCLHlCQUVBLHFCQUczQk0sRUFDZ0IsSUFBWkgsRUFDTSxrQkFBa0JFLEVBQWVjLFVBQ3JCLElBQVpoQixFQUNJLGtCQUFrQkUsRUFBZWUsU0FDckIsSUFBWmpCLEVBQ0lFLEVBQWVnQixLQUNmLG9CQUNsQnhCLEVBQWFvQixNQUFRWCxFQUNyQlQsRUFBYXFCLGNBQWdCakIsU0FDeEJNLGNBQWMsdUJBQ2RlLGFBQWEsT0FDYkMsTUFBTSxZQUFZLEdBQ2xCVixRQUFRLE9BQVEsSUFDaEJXLGNBQ0R2QixTQUFTTSxjQUFjLCtCQUErQkUsYUFDTSxPQUE1RFIsU0FBU00sY0FBYyxxQkFBcUJFLFlBQzVDWixFQUFhbUIsUUFBVSxtQ0FFdkJuQixFQUFhbUIsUUFBVSxnQ0FFM0JuQixFQUFhbUIsUUFDYjdCLFNBQVNzQyxZQUFZNUIsR0FFckJWLFNBQVNzQyxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcHJlc2VuY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcHJlc2VuY2UgPSBuZXcgUHJlc2VuY2Uoe1xuICAgIGNsaWVudElkOiBcIjgwMDcwMjEyMTg2NjU1OTUwOFwiLFxufSksIGJyb3dzaW5nVGltZXN0YW1wID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5wcmVzZW5jZS5vbihcIlVwZGF0ZURhdGFcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHByZXNlbmNlRGF0YSA9IHtcbiAgICAgICAgbGFyZ2VJbWFnZUtleTogXCJodHRwczovL2Nkbi5yY2QuZ2cvUHJlTWlEL3dlYnNpdGVzL0IvQnVpZW5hbGFybS9hc3NldHMvbG9nby5wbmdcIixcbiAgICAgICAgc3RhcnRUaW1lc3RhbXA6IGJyb3dzaW5nVGltZXN0YW1wLFxuICAgIH0sIHsgcGF0aG5hbWUgfSA9IGRvY3VtZW50LmxvY2F0aW9uLCBwcml2YWN5ID0gYXdhaXQgcHJlc2VuY2UuZ2V0U2V0dGluZyhcInByaXZhY3lcIik7XG4gICAgbGV0IGxvY2F0aW9uU2NyaXB0LCBsb2NhdGlvblRpdGxlO1xuICAgIGlmIChkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvcihcImhlYWRcIilcbiAgICAgICAgLmNoaWxkTm9kZXNbOV0/LnRleHRDb250ZW50LmluY2x1ZGVzKCdjb3VudHJ5XCI6JykpIHtcbiAgICAgICAgbG9jYXRpb25TY3JpcHQgPSBKU09OLnBhcnNlKGRvY3VtZW50XG4gICAgICAgICAgICAucXVlcnlTZWxlY3RvcihcImhlYWRcIilcbiAgICAgICAgICAgIC5jaGlsZE5vZGVzWzldLnRleHRDb250ZW50LnJlcGxhY2UoLyg8IS0tIHsyfSl8KCAtLT4pfCggSE9TVDogKS9nbSwgXCJcIikpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvcihcImhlYWRcIilcbiAgICAgICAgLmNoaWxkTm9kZXNbMTBdPy50ZXh0Q29udGVudC5pbmNsdWRlcygnY291bnRyeVwiOicpKSB7XG4gICAgICAgIGxvY2F0aW9uU2NyaXB0ID0gSlNPTi5wYXJzZShkb2N1bWVudFxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCJoZWFkXCIpXG4gICAgICAgICAgICAuY2hpbGROb2Rlc1sxMF0udGV4dENvbnRlbnQucmVwbGFjZSgvKDwhLS0gezJ9KXwoIC0tPil8KCBIT1NUOiApL2dtLCBcIlwiKSk7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgbG9jYXRpb25TY3JpcHQgPSBudWxsO1xuICAgIGNvbnN0IHNlYXJjaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tjbGFzcz1cImlucHV0IHdoaXRlLXRleHQgZm9jdXNcIl0nKTtcbiAgICBpZiAoc2VhcmNoPy52YWx1ZSkge1xuICAgICAgICBpZiAocHJpdmFjeSA9PT0gMikge1xuICAgICAgICAgICAgcHJlc2VuY2VEYXRhLmRldGFpbHMgPSBcIlpvZWt0IG5hYXJcIjtcbiAgICAgICAgICAgIHByZXNlbmNlRGF0YS5zdGF0ZSA9IHNlYXJjaC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IFwiQWFuIGhldCB6b2VrZW5cIjtcbiAgICAgICAgcHJlc2VuY2VEYXRhLnNtYWxsSW1hZ2VLZXkgPSBcImh0dHBzOi8vY2RuLnJjZC5nZy9QcmVNaUQvcmVzb3VyY2VzL3NlYXJjaC5wbmdcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAobG9jYXRpb25TY3JpcHQgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKHBhdGhuYW1lID09PSBcIi9cIilcbiAgICAgICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJCZWtpamt0IGRlIGhvbWUgcGFnaW5hXCI7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJBYW4gaGV0IGJyb3dzZW4uLlwiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbG9jYXRpb25UaXRsZSA9XG4gICAgICAgICAgICBwcml2YWN5ID09PSAwXG4gICAgICAgICAgICAgICAgPyBgRWVuIGxvY2F0aWUgaW4gJHtsb2NhdGlvblNjcmlwdC5jb3VudHJ5fWBcbiAgICAgICAgICAgICAgICA6IHByaXZhY3kgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgPyBgRWVuIGxvY2F0aWUgaW4gJHtsb2NhdGlvblNjcmlwdC5yZWdpb259YFxuICAgICAgICAgICAgICAgICAgICA6IHByaXZhY3kgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbG9jYXRpb25TY3JpcHQubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcIkVlbiBQcml2w6kgbG9jYXRpZVwiO1xuICAgICAgICBwcmVzZW5jZURhdGEuc3RhdGUgPSBsb2NhdGlvblRpdGxlO1xuICAgICAgICBwcmVzZW5jZURhdGEuc21hbGxJbWFnZUtleSA9IGRvY3VtZW50XG4gICAgICAgICAgICAucXVlcnlTZWxlY3RvcignW2NsYXNzPVwiaWNvbiBsZWZ0XCJdJylcbiAgICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoXCJzcmNcIilcbiAgICAgICAgICAgIC5zcGxpdChcIndlYXRoZXIvXCIpWzFdXG4gICAgICAgICAgICAucmVwbGFjZShcIi5zdmdcIiwgXCJcIilcbiAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2NsYXNzPVwiaXAtYnRuIGlwLWFjdGl2ZVwiXScpPy50ZXh0Q29udGVudCA/P1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2NsYXNzPVwiaXAtYnRuXCJdJyk/LnRleHRDb250ZW50ICE9PSBcIuKdmuKdmlwiKVxuICAgICAgICAgICAgcHJlc2VuY2VEYXRhLmRldGFpbHMgPSBcIkJla2lqa3QgZGUgd2VlcnN2ZXJ3YWNodGluZyB2b29yXCI7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJCZWtpamt0IGRlIHdlZXJzZ3JhZmllayB2b29yXCI7XG4gICAgfVxuICAgIGlmIChwcmVzZW5jZURhdGEuZGV0YWlscylcbiAgICAgICAgcHJlc2VuY2Uuc2V0QWN0aXZpdHkocHJlc2VuY2VEYXRhKTtcbiAgICBlbHNlXG4gICAgICAgIHByZXNlbmNlLnNldEFjdGl2aXR5KCk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNISmxjMlZ1WTJVdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUp3Y21WelpXNWpaUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeE5RVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMRkZCUVZFc1EwRkJRenRKUVVNMVFpeFJRVUZSTEVWQlFVVXNiMEpCUVc5Q08wTkJRemxDTEVOQlFVTXNSVUZEUml4cFFrRkJhVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVMXVSQ3hSUVVGUkxFTkJRVU1zUlVGQlJTeERRVUZETEZsQlFWa3NSVUZCUlN4TFFVRkxMRWxCUVVrc1JVRkJSVHRKUVVOd1F5eE5RVUZOTEZsQlFWa3NSMEZCYVVJN1VVRkRha01zWVVGQllTeHRSVUZCWVR0UlFVTXhRaXhqUVVGakxFVkJRVVVzYVVKQlFXbENPMHRCUTJwRExFVkJRMFFzUlVGQlJTeFJRVUZSTEVWQlFVVXNSMEZCUnl4UlFVRlJMRU5CUVVNc1VVRkJVU3hGUVVOb1F5eFBRVUZQTEVkQlFVY3NUVUZCVFN4UlFVRlJMRU5CUVVNc1ZVRkJWU3hEUVVGVExGTkJRVk1zUTBGQlF5eERRVUZETzBsQlEzaEVMRWxCUVVrc1kwRkpSaXhGUVVORUxHRkJRWEZDTEVOQlFVTTdTVUZEZGtJc1NVRkRReXhSUVVGUk8xTkJRMDRzWVVGQllTeERRVUZETEUxQlFVMHNRMEZCUXp0VFFVTnlRaXhWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhYUVVGWExFTkJRVU1zUlVGRGFrUTdVVUZEUkN4alFVRmpMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGRE1VSXNVVUZCVVR0aFFVTk9MR0ZCUVdFc1EwRkJReXhOUVVGTkxFTkJRVU03WVVGRGNrSXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGZEJRVmNzUTBGQlF5eFBRVUZQTEVOQlFVTXNLMEpCUVN0Q0xFVkJRVVVzUlVGQlJTeERRVUZETEVOQlEzaEZMRU5CUVVNN1MwRkRSanRUUVVGTkxFbEJRMDRzVVVGQlVUdFRRVU5PTEdGQlFXRXNRMEZCUXl4TlFVRk5MRU5CUVVNN1UwRkRja0lzVlVGQlZTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zVjBGQlZ5eERRVUZETEVWQlEyeEVPMUZCUTBRc1kwRkJZeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlF6RkNMRkZCUVZFN1lVRkRUaXhoUVVGaExFTkJRVU1zVFVGQlRTeERRVUZETzJGQlEzSkNMRlZCUVZVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNUMEZCVHl4RFFVRkRMQ3RDUVVFclFpeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVTjZSU3hEUVVGRE8wdEJRMFk3TzFGQlFVMHNZMEZCWXl4SFFVRkhMRWxCUVVrc1EwRkJRenRKUVVVM1FpeE5RVUZOTEUxQlFVMHNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVOd1F5eHJRMEZCYTBNc1EwRkRiRU1zUTBGQlF6dEpRVVZHTEVsQlFVa3NUVUZCVFN4RlFVRkZMRXRCUVVzc1JVRkJSVHRSUVVOc1FpeEpRVUZKTEU5QlFVOHNTMEZCU3l4RFFVRkRMRVZCUVVVN1dVRkRiRUlzV1VGQldTeERRVUZETEU5QlFVOHNSMEZCUnl4WlFVRlpMRU5CUVVNN1dVRkRjRU1zV1VGQldTeERRVUZETEV0QlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRE8xTkJRMnhET3p0WlFVRk5MRmxCUVZrc1EwRkJReXhQUVVGUExFZEJRVWNzWjBKQlFXZENMRU5CUVVNN1VVRkRMME1zV1VGQldTeERRVUZETEdGQlFXRXNiVVJCUVdkQ0xFTkJRVU03UzBGRE0wTTdVMEZCVFN4SlFVRkpMR05CUVdNc1MwRkJTeXhKUVVGSkxFVkJRVVU3VVVGRGJrTXNTVUZCU1N4UlFVRlJMRXRCUVVzc1IwRkJSenRaUVVGRkxGbEJRVmtzUTBGQlF5eFBRVUZQTEVkQlFVY3NkMEpCUVhkQ0xFTkJRVU03TzFsQlEycEZMRmxCUVZrc1EwRkJReXhQUVVGUExFZEJRVWNzYlVKQlFXMUNMRU5CUVVNN1MwRkRhRVE3VTBGQlRUdFJRVU5PTEdGQlFXRTdXVUZEV2l4UFFVRlBMRXRCUVVzc1EwRkJRenRuUWtGRFdpeERRVUZETEVOQlFVTXNhMEpCUVd0Q0xHTkJRV01zUTBGQlF5eFBRVUZQTEVWQlFVVTdaMEpCUXpWRExFTkJRVU1zUTBGQlF5eFBRVUZQTEV0QlFVc3NRMEZCUXp0dlFrRkRaaXhEUVVGRExFTkJRVU1zYTBKQlFXdENMR05CUVdNc1EwRkJReXhOUVVGTkxFVkJRVVU3YjBKQlF6TkRMRU5CUVVNc1EwRkJReXhQUVVGUExFdEJRVXNzUTBGQlF6dDNRa0ZEWml4RFFVRkRMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWs3ZDBKQlEzSkNMRU5CUVVNc1EwRkJReXh0UWtGQmJVSXNRMEZCUXp0UlFVVjRRaXhaUVVGWkxFTkJRVU1zUzBGQlN5eEhRVUZITEdGQlFXRXNRMEZCUXp0UlFVTnVReXhaUVVGWkxFTkJRVU1zWVVGQllTeEhRVUZITEZGQlFWRTdZVUZEYmtNc1lVRkJZU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRPMkZCUTNCRExGbEJRVmtzUTBGQlF5eExRVUZMTEVOQlFVTTdZVUZEYmtJc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0aFFVTndRaXhQUVVGUExFTkJRVU1zVFVGQlRTeEZRVUZGTEVWQlFVVXNRMEZCUXp0aFFVTnVRaXhYUVVGWExFVkJRVVVzUTBGQlF6dFJRVU5vUWl4SlFVTkRMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zTkVKQlFUUkNMRU5CUVVNc1JVRkJSU3hYUVVGWE8xbEJRMnBGTEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSVUZCUlN4WFFVRlhMRXRCUVVzc1NVRkJTVHRaUVVWb1JTeFpRVUZaTEVOQlFVTXNUMEZCVHl4SFFVRkhMR3REUVVGclF5eERRVUZET3p0WlFVTjBSQ3haUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITERoQ1FVRTRRaXhEUVVGRE8wdEJRek5FTzBsQlJVUXNTVUZCU1N4WlFVRlpMRU5CUVVNc1QwRkJUenRSUVVGRkxGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN08xRkJRM2hFTEZGQlFWRXNRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRenRCUVVNM1FpeERRVUZETEVOQlFVTXNRMEZCUXlKOSJdLCJuYW1lcyI6WyJwcmVzZW5jZSIsIlByZXNlbmNlIiwiY2xpZW50SWQiLCJicm93c2luZ1RpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJvbiIsImFzeW5jIiwicHJlc2VuY2VEYXRhIiwibGFyZ2VJbWFnZUtleSIsInN0YXJ0VGltZXN0YW1wIiwicGF0aG5hbWUiLCJkb2N1bWVudCIsImxvY2F0aW9uIiwicHJpdmFjeSIsImdldFNldHRpbmciLCJsb2NhdGlvblNjcmlwdCIsImxvY2F0aW9uVGl0bGUiLCJxdWVyeVNlbGVjdG9yIiwiY2hpbGROb2RlcyIsInRleHRDb250ZW50IiwiaW5jbHVkZXMiLCJKU09OIiwicGFyc2UiLCJyZXBsYWNlIiwic2VhcmNoIiwidmFsdWUiLCJkZXRhaWxzIiwic3RhdGUiLCJzbWFsbEltYWdlS2V5IiwiY291bnRyeSIsInJlZ2lvbiIsIm5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJzcGxpdCIsInRvTG93ZXJDYXNlIiwic2V0QWN0aXZpdHkiXSwic291cmNlUm9vdCI6IiJ9
undefined;