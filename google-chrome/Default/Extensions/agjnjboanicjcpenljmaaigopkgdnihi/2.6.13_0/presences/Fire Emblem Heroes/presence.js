"use strict";var __webpack_exports__={};const presence=new Presence({clientId:"1133602327476047873"}),slideshow=presence.createSlideshow();function truncateText(e){return e.length>127?`${e.slice(0,124)}...`:e}function loadImage(e,t){return new Promise((a=>{e.addEventListener("load",(()=>a())),e.src=t}))}function getCanvasBlob(){return new Promise(((e,t)=>{canvas.toBlob((a=>{a||t(),e(a)}),"image/png")}))}const canvas=document.createElement("canvas"),ctx=canvas.getContext("2d");canvas.height=512,canvas.width=512;const squareImageCache={};let isUploading=!1;async function squareImage(e){if(squareImageCache[e])return squareImageCache[e];if(isUploading)return"https://cdn.rcd.gg/PreMiD/websites/F/Fire%20Emblem%20Heroes/assets/logo.png";isUploading=!0;const t=document.createElement("img");t.crossOrigin="anonymous",await loadImage(t,e);const a=canvas.width,s=canvas.height,r=t.naturalWidth,n=t.naturalHeight,o=Math.min(a/r,s/n),i=r*o,c=n*o;ctx.clearRect(0,0,512,512),ctx.drawImage(t,(a-i)/2,(s-c)/2,i,c);const l=await getCanvasBlob(),u=new FormData;u.append("file",l,"file");const d=await fetch("https://pd.premid.app/create/image",{method:"POST",body:u}).then((e=>e.text()));return isUploading=!1,squareImageCache[e]=d,d}let section="",intersectionObserversActivated=!1;const observer=new IntersectionObserver((e=>{let t=section;for(const a of e){const{id:e}=a.target,s=a.intersectionRatio;if(s>.05){t=e;break}t===e&&s<.05&&(t="")}t!==section&&(section=t)}),{threshold:[0,.05]});function activateIntersectionObservers(e){if(!intersectionObserversActivated){switch(e[0]??""){case"":observer.observe(document.querySelector("#cont2")),observer.observe(document.querySelector("#cont4"));break;case"topics":{const e=[...document.querySelectorAll(".article")];for(const t of e)observer.observe(t);break}}intersectionObserversActivated=!0}}function areObserversActivated(){return intersectionObserversActivated}function resetObservers(){intersectionObserversActivated=!1,section="",observer.disconnect()}function getSection(){return section}function applyMainHostDetails(e,t){switch(t[0]??""){case"":switch(activateIntersectionObservers(t),getSection()){case"":e.details="Browsing the home page";break;case"cont2":e.details="Reading FEH Lore",e.state=document.querySelector("#storySlide .flex-active .on").alt;break;case"cont4":{const t=document.querySelector(".characterSlide-summery-item.active h3").textContent;e.details="Meeting the Heroes",e.state=t,e.largeImageKey=document.querySelector("#characterSlide .flex-active-slide img").src,e.smallImageKey=document.querySelector(".characterSlide-thumb-item.flex-active").src,e.smallImageText=t}}break;case"countries":e.details="Viewing game availability";break;case"illustrations":{const t=[...document.querySelectorAll("#topics-detail-content img")];for(const a of t){const t=Object.assign({},e);t.details="Browsing illustrations",t.largeImageKey=a.src,slideshow.addSlide(a.getAttribute("src"),t,5e3)}break}case"manga":t[1]?(e.details="Reading A Day in the Life",e.buttons=[{label:"Read Manga",url:document.location.href}]):e.details="Browsing manga";break;case"system":e.details="Reading about the gameplay";break;case"topics":if(activateIntersectionObservers(t),e.details="Browsing articles",getSection()){const t=document.querySelector(`#${getSection()}`);e.state=`${t.querySelector(".heading").textContent} - ${t.querySelector(".date").textContent}`,e.largeImageKey=t.querySelector(".img > img").src,e.buttons=[{label:"Read Article",url:`${document.location.href}#${getSection()}`}]}}}async function applyCYLDetails(e,t){const a=document.querySelector(".campaigns-title")?.textContent??document.title.match(/(?<=-\s).+?(?=$|\s-)/)?.[0]??document.title;switch(e.buttons=[{label:"View Campaign",url:document.location.href}],t[0]??""){case"":e.details=`Viewing ${a}`;break;case"about":e.details=`Reading about ${a}`;break;case"mypage":e.details=`Viewing ${a}`,e.state="Viewing their votes";break;case"random":e.details=`Voting for ${a}`,e.state="Choosing a random character";break;case"result":case"result-detail":case"result_detail":case"results":if(new URLSearchParams(document.location.search).get("overall")||t[0].includes("detail")||"result"===t[0]&&t[1])e.details=`Viewing ${a} results`;else{const t=await Promise.all([...document.querySelectorAll(".result-special-character [class*=result-special-character-wrap]"),...document.querySelectorAll(".HeroItem.-golden"),...document.querySelectorAll(".result-stand-heroes .hero")].map((async t=>{let s=(t.querySelector(".result-stand > img")??t.querySelector(".hero-image")??t.querySelector(".HeroItem__Image")??t.querySelector("p > img"))?.src;s||(s=getComputedStyle(t.querySelector("[class*=result-stand]"))?.backgroundImage.match(/url\(["']?(.+?)["']?\)/)[1]);let r=(t.querySelector(".star > img")??t.querySelector(".icon-rank")??t.querySelector(".HeroItem__Rank"))?.src;return r||(r=getComputedStyle(t,"::after").backgroundImage.match(/url\(['"]?(.+?)['"]?\)/)[1]),{...e,details:`Viewing winners of ${a}`,state:`${t.querySelector(".hero-result-hero-name, .hero-name, .HeroItem__Name").textContent} - ${t.querySelector(".hero-result-series-name, .series-name, .HeroItem__SeriesName").textContent}`,largeImageKey:await squareImage(s),smallImageKey:r,smallImageText:`${t.querySelector(".hero-result-vote-count, .HeroItem__VoteCount, .vote-count").textContent} votes`,buttons:[{label:"View Results",url:document.location.href}]}})));for(const[e,a]of t.entries())slideshow.addSlide(`${e}`,a,5e3)}break;case"series":if(e.details=`Voting for ${a}`,t[1])if("heroes"===t[t.length-1]){const t=document.title.split(":")[1]?.trim();e.state=t?`Selecting a character from ${t}`:"Selecting a character from a series",e.buttons=[{label:"View Series",url:document.location.href}]}else{const t=document.querySelector(".hero-vote-name")?.textContent;e.state=t?`Voting for ${t}`:"Voting for a character",e.buttons=[{label:"Vote Character",url:document.location.href}]}else e.state="Selecting a series"}}function applyFehPassDetails(e,t){switch(t[0]??""){case"":e.details="Browsing FEH Pass";break;case"faq":e.details="Reading FEH Pass FAQ";break;case"talk":if(t[1]){const t=document.querySelector(".text.active");e.details="Reading FEH Pass Talk",e.state=`${document.querySelector(".chara_name.anime").textContent}: ${[...t.classList].find((e=>/\d$/.test(e))).match(/\d+/)[0]} / ${[...document.querySelector(".text:last-of-type").classList].find((e=>/\d$/.test(e))).match(/\d+/)[0]}`,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/question.png",e.smallImageText=truncateText(t.textContent),e.buttons=[{label:"View Talk",url:document.location.href}]}else e.details="Browsing FEH Pass Talk";break;default:e.details="Viewing a Resplendent Hero",e.state=`${document.querySelector(".chara_name").textContent}: ${document.querySelector(".chara_catch").textContent}`,e.largeImageKey=document.querySelector(".chara_icon > img").src,e.smallImageKey=document.querySelector(".mini_img > img").src,e.smallImageText=truncateText(document.querySelector(".chara_wrap > p:last-child").textContent),e.buttons=[{label:"View Hero",url:document.location.href}]}}function applyGuideDetails(e,t){switch(t[0]??""){case"":e.details="Browsing the Guide";break;case"category":if("character"===t[1])e.details="Browsing the Guide: Character List",e.state=document.querySelector(".select_character").selectedOptions[0].textContent;else if("comeback"===t[1])switch(t[2]??""){case"":e.details="Browsing the Guide: Returner Tips";break;case"elementary":case"intermediate":case"advanced":e.details="Browsing the Guide: Advanced Training Tips",e.details=`Browsing the Guide: ${t[2][0].toUpperCase()}${t[2].slice(1)} Training Tips`;break;case"weapon":e.details="Browsing the Guide: List of Weapons",e.state=document.querySelector(".select_weapon").selectedOptions[0].textContent}break;default:{const t=document.querySelector(".sec_gif > img").src,a=[...document.querySelectorAll("dl dt")].map((e=>({text:e.textContent,image:e.nextElementSibling.querySelector("img").src})));e.details=`Reading about ${document.querySelector(".sec_charaname").textContent}: ${document.querySelector(".sec_charanick").textContent}`,e.largeImageKey=document.querySelector(".slick-slide.slick-current img").src,e.smallImageKey=t,e.buttons=[{label:"View Character",url:document.location.href}],slideshow.addSlide(t,e,5e3);for(const t of a){const a=Object.assign({},e);a.smallImageText=truncateText(t.text),a.smallImageKey=t.image,slideshow.addSlide(t.image,a,5e3)}}}}function applyNewGuideDetails(e){e.details="Browsing the Guide",e.state=document.querySelector("h1").textContent,e.buttons=[{label:"Read Guide",url:document.location.href}]}function applySupportDetails(e,t){switch(t[0]){case"mjolnir":switch(t[1]??""){case"":e.details="Reading about Mjölnir's Strike";break;case"archives":e.details="Viewing Mjölnir's Strike archives";break;case"terms":e.details=`Viewing Mjölnir's Strike: ${document.querySelector(".subtitle-section-white").textContent}`,e.state=`Askr: ${document.querySelector(".battle-left .battle-score").textContent} vs. Strike: ${document.querySelector(".battle-right .battle-score").textContent}`,e.buttons=[{label:"View Situation",url:document.location.href}]}break;case"voting_gauntlet":switch(t[1]){case"howtoplay":e.details="Reading about Voting Gauntlet";break;case"archives":e.details="Viewing Voting Gauntlet archives";break;case"tournaments":{e.details=`Viewing Gauntlet: ${document.querySelector("h4 > span").textContent}`,e.buttons=[{label:"View Gauntlet",url:document.location.href}];const t=[...document.querySelectorAll(".body-section-tournament")].filter((e=>!!e.querySelector("h2")));for(let a=t.length-1;a>=0;a--)for(const[s,r]of[...t[a].querySelectorAll(".tournaments-battle")].entries()){const n=[...r.querySelectorAll(".name")],o=n.map((e=>e.textContent)),i=n.map((e=>e.nextElementSibling.textContent)),c=getComputedStyle(r.querySelector(".tournaments-art-win").parentElement).backgroundImage.match(/url\(['"]?(.+?)["']?\)/)[1],l=Object.assign({},e);l.state=`Round ${t.length-a}: ${o[0]} vs. ${o[1]}`,l.smallImageKey=c,l.smallImageText=`${i[0]} vs. ${i[1]}`,slideshow.addSlide(`round${a}battle${s}`,l,5e3)}break}}}}const browsingTimestamp=Math.floor(Date.now()/1e3);let oldPath="";presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/F/Fire%20Emblem%20Heroes/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:t,hostname:a}=document.location,s=t.split("/").filter((e=>e));switch(oldPath!==t&&(oldPath=t,resetObservers(),slideshow.deleteAllSlides()),!0){case"fire-emblem-heroes.com"===a:applyMainHostDetails(e,s.slice(1));break;case"events.fire-emblem-heroes.com"===a:case/vote\d+[.]campaigns[.]fire-emblem-heroes[.]com/.test(a):case"support.fire-emblem-heroes.com"===a:a.startsWith("support")?"vote"===s[0]||"vote2"===s[0]?await applyCYLDetails(e,s.slice(1)):applySupportDetails(e,s):a.startsWith("vote3")?await applyCYLDetails(e,s):await applyCYLDetails(e,s.slice(1));break;case"fehpass.fire-emblem-heroes.com"===a:applyFehPassDetails(e,s.slice(1));break;case"guide.fire-emblem-heroes.com"===a:applyGuideDetails(e,s.slice(1));break;case"new-guide.fire-emblem-heroes.com"===a:applyNewGuideDetails(e)}slideshow.getSlides().length?presence.setActivity(slideshow):e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;