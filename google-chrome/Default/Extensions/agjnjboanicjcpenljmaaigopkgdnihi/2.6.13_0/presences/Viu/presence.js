var __webpack_exports__={};const presence=new Presence({clientId:"815947069117169684"}),getStrings=async()=>presence.getStrings({play:"general.playing",pause:"general.paused",browse:"general.browsing",episode:"general.episode",searchSomething:"general.searchSomething",watchVideo:"general.buttonWatchVideo",viewPage:"general.viewPage",viewingShow:"general.viewShow",viewingMovie:"general.viewMovie",watchMovie:"general.buttonWatchMovie",watchEpisode:"general.buttonViewEpisode",searching:"general.search"},await presence.getSetting("lang").catch((()=>"en"))),browsingTimestamp=Math.floor(Date.now()/1e3);let strings,oldPath=null,oldLang=null,seriesInfo=null,isWatingForResponse=!1;async function getSeriesInfo(e,t){isWatingForResponse=!0;const s=new URLSearchParams({platform_flag_label:"web",area_id:"2",language_flag_id:"3",platformFlagLabel:"web",areaId:"2",languageFlagId:"3",countryCode:location.pathname.split("/")[2].toUpperCase(),ut:"0",r:t,series_id:e,product_id:e,os_flag_id:"1"}).toString(),a=await generateToken();return(await fetch(`https://api-gateway-global.viu.com/api/mobile?${s}`,{headers:{accept:"application/json",authorization:`Bearer ${a}`},method:"GET"})).json().then((e=>(isWatingForResponse=!1,"/product/listall"===t?e.data.product:e.data.product_list)))}async function generateToken(){return(await fetch("https://api-gateway-global.viu.com/api/auth/token",{headers:{"content-type":"application/json"},body:JSON.stringify({appVersion:"3.0.10",countryCode:location.pathname.split("/")[2].toUpperCase(),language:4,platform:"browser",platformFlagLabel:"web",uuid:self.crypto.randomUUID()}),method:"POST"})).json().then((e=>e.token))}const no_op=e=>e+1;no_op(0),presence.on("UpdateData",(async()=>{const[e,t,s]=await Promise.all([presence.getSetting("lang").catch((()=>"en")),presence.getSetting("buttons"),presence.getSetting("logo")]);if(oldLang===e&&strings||(oldLang=e,strings=await getStrings()),(!seriesInfo||oldPath!==location.pathname)&&location.pathname.includes("/vod/")&&!isWatingForResponse){oldPath=location.pathname;const e=await getSeriesInfo(location.pathname.split("/")[5],"/product/listall");e&&(seriesInfo=await getSeriesInfo(e[0].series_id,"/vod/product-list"))}const a={details:strings.browse,smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/reading.png",largeImageKey:["https://cdn.rcd.gg/PreMiD/websites/V/Viu/assets/0.png","https://cdn.rcd.gg/PreMiD/websites/V/Viu/assets/1.png","https://cdn.rcd.gg/PreMiD/websites/V/Viu/assets/0.png","https://cdn.rcd.gg/PreMiD/websites/V/Viu/assets/0.png"][s],startTimestamp:browsingTimestamp};if(document.location.pathname.includes("/vod/")){const e=document.querySelector("video"),n=document.querySelector(".css-330rps #series_ep_title")?.textContent,i=!n;if(e){let o="",r="",g=!1,l=[];n&&(o=n.split(".")[0],r=n.split(".").slice(1).join("."),g=!r.includes("EP."),l=r.match(/([1-9]\/[1-9])/g)),a.details=document.querySelector("#series_title").textContent,a.state=i?"Movie":`EP.${o}${l?` • ${l[0]} `:""}${g?` • ${r}`:""}`;const c=seriesInfo?.[0].series_cover_portrait_image_url,p=seriesInfo?.[0].series_cover_landscape_image_url;s>1&&(a.largeImageKey=[c||p,p||c][s-2]||"https://cdn.rcd.gg/PreMiD/websites/V/Viu/assets/0.png"),a.smallImageKey=e.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",a.smallImageText=e.paused?strings.pause:strings.play,[a.startTimestamp,a.endTimestamp]=presence.getTimestampsfromMedia(e),t&&(a.buttons=[{label:i?strings.watchMovie:strings.watchEpisode,url:document.baseURI}]),e.paused&&(delete a.startTimestamp,delete a.endTimestamp)}else a.details=i?strings.viewingMovie:strings.viewingShow,a.state=document.querySelector("#series_title").textContent}else document.querySelector("input#search_input_txt")&&document.location.search&&(a.details=strings.searchSomething,a.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",a.smallImageText=strings.searching);presence.setActivity(a)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;