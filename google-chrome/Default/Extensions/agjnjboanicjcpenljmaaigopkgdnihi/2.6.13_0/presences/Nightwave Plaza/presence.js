var __webpack_exports__={};const presence=new Presence({clientId:"620204628608417832"});presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/N/Nightwave%20Plaza/assets/logo.png"},t=document.querySelector("div.player-title"),n=document.querySelector("div.player-artist"),s=document.querySelector("div.player-time"),a=document.querySelector("button.player-play"),r=document.querySelector("div.col.cell"),o=document.querySelectorAll(".window > .inner > .header.header-draggable.noselect"),c=document.querySelector(".p-2.song-info");if(c){const[t,n,s]=[...c.querySelectorAll(".mb-1")].map((e=>e.textContent));t&&n&&s&&(e.details=`Looking at ${s.substring(8)} by ${t.substring(10)}`,e.state=`Album: ${n.substring(8)}`)}else if(2===o.length){let t;"Ratings"===o[1].textContent&&(t=document.querySelector("button.active")),e.details=`Looking at ${t?t.textContent:""} ${o[1].textContent}`}else{if(t&&(e.state=t.textContent),n&&(e.details=n.textContent),a)switch(a.textContent){case"Play":e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/play.png",r&&(e.smallImageText=r.textContent);break;case"Stop":e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png",r&&(e.smallImageText=r.textContent)}if(s){const[t,n]=s.textContent.split("/").map((e=>presence.timestampFromFormat(e)));[e.startTimestamp,e.endTimestamp]=presence.getTimestamps(t,n)}}e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;