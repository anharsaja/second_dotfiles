var __webpack_exports__={};const presence=new Presence({clientId:"928134371205083166"}),browsingTimestamp=Date.now()/1e3,shortenedURLs={};async function getShortURL(e){if(!e||e.length<256)return e;if(shortenedURLs[e])return shortenedURLs[e];try{const t=await(await fetch(`https://pd.premid.app/create/${e}`)).text();return shortenedURLs[e]=t,t}catch(t){return presence.error(t),e}}presence.on("UpdateData",(async()=>{let e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/G/Gaia/assets/logo.png",smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/search.png",startTimestamp:browsingTimestamp};const[t,s]=await Promise.all([presence.getSetting("buttons"),presence.getSetting("cover")]),n={"/(video|series)/":async()=>{const t=document.querySelector("video"),n=e;if(t){const e=[document.querySelector(".heading.video-player-meta__series-title")?.textContent,document.querySelector(".heading.video-player-meta__title")?.textContent,document.querySelector(".text-season-episode")?.textContent?.toUpperCase()],r=document.querySelector(".vjs-poster")?.style?.backgroundImage?.match(/url\("(.*)"\)/)?.[1];return delete n.startTimestamp,n.details=e.find(Boolean),n.state=e[0]?`${e[2]} ${e[1]}`:"Film",n.smallImageKey=t.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",n.smallImageText=t.paused?"Paused":"Playing",s&&r&&(n.largeImageKey=await getShortURL(r)),t.paused||([n.startTimestamp,n.endTimestamp]=presence.getTimestampsfromMedia(t)),n.buttons=[{label:e[0]?"Watch Series":"Watch Film",url:document.URL}],n}{const e=[(document.querySelector(".jumbotron-episode__meta > h1")??document.querySelector(".heading.detail-series__title"))?.textContent,document.querySelector(".jumbotron-video__meta> h1")?.textContent];return n.details=e[0]?"Viewing series:":"Viewing film:",n.state=e.find(Boolean),n.buttons=[{label:e[0]?"View Series":"View Film",url:document.URL}],n}},"/(yoga|style|seeking-truth|topic|alternative-healing|transformation)/":()=>({details:"Browsing:",state:document.querySelector(".heading.jumbotron-subcategory__title").textContent}),"/films-docs/":{details:"Browsing:",state:"Docs & Films"},"/recently-added":{details:"Viewing what's new on Gaia"}};for(const[t,s]of Object.entries(n))if(location.pathname.match(t))if("function"==typeof s){const t=await s();e=t.largeImageKey?t:{...e,...t}}else e={...e,...s};t||delete e.buttons,e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;