var __webpack_exports__={};const presence=new Presence({clientId:"607587875122446359"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{let e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/G/GitHub/assets/logo.png"};const t={login:{details:"Logging in"},settings:{details:"Viewing settings"},explore:{details:"Browsing repositories"},discover:{details:"Browsing repositories"},marketplace:{details:"Browsing marketplace"},pulls:{details:"Viewing pull requests"},issues:{details:"Viewing issues"},notifications:{details:"Viewing notifications"},watching:{details:"Browsing interested repositories"},new:{details:"Creating a repository"},topics:{details:"Browsing topics"},trending:{details:"Browsing trending repositories"},collections:{details:"Browsing collections"},events:{details:"Browsing events"},codespaces:{details:"Browsing codespaces"},search:{details:"Searching for",state:new URLSearchParams(document.location.search).get("q")},"trending/developers":{details:"Browsing trending developers"},"new/import":{details:"Importing a repository"},"new/project":{details:"Creating a project"},"organization/new":{details:"Creating an organization"},"notifications/subscriptions":{details:"Viewing subscriptions"}},{pathname:i,search:s,href:n,hostname:a}=document.location,[o,r,l]=await Promise.all([presence.getSetting("cover"),presence.getSetting("timestamp"),presence.getSetting("privacy")]);for(const[s,n]of Object.entries(t))i.includes(`/${s}`)&&(e={...e,...n});if("github.com"===a)switch(!0){case!!document.querySelector("body.page-profile"):if(l){e.details="Viewing a profile";break}const t=new URLSearchParams(s).get("tab"),a=document.querySelector("span.p-nickname")?.textContent.split("Â·")[0].trim();e.buttons=[{label:"View Profile",url:n}],o&&(e.largeImageKey=`${document.querySelector("img.avatar-user").src}.png`),e.details=t?`Viewing ${a}'s ${t}`:`Viewing ${a}'s profile`;break;case!!document.querySelector("div#repository-container-header"):const r={owner:i.split("/")[1],name:i.split("/")[2],target:i.split("/")[4],id:i.split("/")[4]};if(e.buttons=[{label:"View Repository",url:n}],o&&!l&&(e.largeImageKey=`https://avatars.githubusercontent.com/u/${document.querySelector('meta[name~="octolytics-dimension-user_id"]')?.content}`),i.includes("/tree/")){if(l){e.details="Viewing a repository",e.state="In a folder",delete e.buttons;break}e.details=`Browsing repository ${r.owner}/${r.name}`,e.state=`In folder ${i.split("/").slice(4).join("/")}`}else if(i.includes("/blob/")){if(l){e.details="Browsing a repository",e.state="Viewing a file",delete e.buttons;break}const t=document.querySelector("#repos-header-breadcrumb-wide > ol")?.textContent.trim().split("/").slice(1).join("/"),i=document.querySelector("#file-name-id-wide").textContent;e.details=`Browsing repository ${r.owner}/${r.name}`,e.state=`Viewing file ${(t?`${t}/${i}`:i)?.trim()} at ${r.target}`}else if(i.includes("/issues"))if(i.includes("/issues/"))if(i.includes("new")){if(l){e.details="Creating an issue",delete e.state,delete e.buttons;break}e.details=`Creating an issue in ${r.owner}/${r.name}`}else{if(l){e.details="Looking at an issue",delete e.state,delete e.buttons;break}e.details=`Looking at issue #${r.id}`,e.state=`${document.querySelector("a.author")?.textContent?.trim()??document.querySelector('[href="#top"]')?.textContent?.trim()} - ${document.querySelector("h1.gh-header-title")?.textContent}`,e.buttons=[{label:"View Issue",url:n}]}else{if(l){e.details="Browsing issues",delete e.state,delete e.buttons;break}e.details="Browsing issues",e.state=`${r.owner}/${r.name}`}else if(i.includes("/pulls")){if(l){e.details="Browsing pull requests",delete e.state,delete e.buttons;break}e.details="Browsing pull requests",e.state=`${r.owner}/${r.name}`}else if(i.includes("/pull")){if(l){e.details="Looking at a pull request",delete e.state,delete e.buttons;break}e.details=`Looking at pull request #${r.id}`,e.state=`${document.querySelector("a.author.Link--primary")?.textContent??document.querySelector('[class*="author Link"]')?.textContent} - ${document.querySelector("h1.gh-header-title")?.textContent}`,e.buttons=[{label:"View Pull Request",url:n}]}else if(i.endsWith("/discussions")){if(l){e.details="Browsing discussions",delete e.state,delete e.buttons;break}e.details="Browsing discussions in",e.state=`${r.owner}/${r.name}`}else if(i.includes("/discussions/")){if(l){e.details="Looking at a discussion",delete e.state,delete e.buttons;break}e.details=`Looking at discussion #${r.id}`,e.state=`${document.querySelectorAll("a.author")[0]?.textContent} - ${document.querySelector("h1.gh-header-title")?.textContent}`,e.buttons=[{label:"View Discussion",url:n}]}else if(i.includes("/pulse")||i.includes("/graphs/contributors")||i.includes("/community")||i.includes("/graphs/commit-activity")||i.includes("/graphs/code-frequency")||i.includes("/network/dependencies")||i.includes("/graphs/commit-activity")||i.includes("/network")||i.includes("/network/members")){if(l){e.details="Browsing insights",delete e.state,delete e.buttons;break}e.details=`Browsing insights of ${r.owner} / ${r.name}`,e.state=document.querySelector("nav a.js-selected-navigation-item.selected.menu-item")?.textContent}else{if(l){e.details="Browsing a repository",delete e.state,delete e.buttons;break}e.details="Browsing repository",e.state=`${r.owner}/${r.name}`}break;case i.includes("/orgs/"):if(l){e.details="Viewing the people in an organization",delete e.state,delete e.buttons;break}e.details=`Viewing ${i.split("/")[2]}'s ${i.split("/")[3]}`;break;case!!document.querySelector('meta[name="hovercard-subject-tag"]'):if(e.details="Viewing an organization",l){delete e.state,delete e.buttons;break}e.state=document.title,o&&(e.largeImageKey=`${document.querySelector('meta[property~="og:image"]')?.content??document.querySelector("img[itemprop='image'].avatar")?.src??e.largeImageKey}`);break;case i.includes("/features"):e.details="Browsing features",i.includes("copilot")&&(e.state="Looking at Github Copilot");break;case"/"===i||!i:e.details="Viewing the home page"}else if("/"===i)e.details="Creating a GitHub gist";else if(i.includes("/discover"))e.details="Browsing GitHub gists";else if(i.includes("/forked"))e.details="Browsing forked GitHub gists";else if(i.includes("/starred"))e.details="Browsing starred GitHub gists";else switch(!0){case!!document.querySelector("div.js-profile-editable-replace"):if(l){e.details="Viewing a profile";break}const t=new URLSearchParams(s).get("tab"),a=document.querySelector("span.p-nickname")?.textContent.trim();e.buttons=[{label:"View Profile",url:n}],o&&(e.largeImageKey=`${document.querySelector("img.avatar.avatar-user.width-full").src}.png`),e.details=t?`Viewing ${a}'s ${t}`:`Viewing ${a}'s profile`;break;case!!document.querySelector("div.repository-content.gist-content"):if(l){e.details="Viewing a gist";break}const r={owner:i.split("/")[1],name:document.querySelector("[itemprop = 'name'] > a").innerHTML};e.buttons=[{label:"View Gist",url:n}],e.details=`Browsing gist ${r.name} by ${r.owner}`}r&&(e.startTimestamp=browsingTimestamp),presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;