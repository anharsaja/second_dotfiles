var __webpack_exports__={};const presence=new Presence({clientId:"611668948131512321"}),strings=presence.getStrings({play:"general.playing",pause:"general.paused"}),presenceData={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/D/dailymotion/assets/logo.png"};presence.on("UpdateData",(async()=>{const e=document.querySelector("#dmp_Video");if(e&&!isNaN(e.duration)){const t=document.querySelector(".VideoInfoTitle__videoTitle___3WLlw"),a=document.querySelector(".ChannelLine__channelName___3JE1B");presenceData.details=t?t.textContent:"Title not found...",presenceData.state=a?a.textContent:"Uploader not found...",presenceData.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/D/dailymotion/assets/logo.png",presenceData.smallImageKey=e.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",presenceData.smallImageText=e.paused?(await strings).pause:(await strings).play,[presenceData.startTimestamp,presenceData.endTimestamp]=presence.getTimestamps(Math.floor(e.currentTime),Math.floor(e.duration)),e.paused&&(delete presenceData.startTimestamp,delete presenceData.endTimestamp),t&&a&&presence.setActivity(presenceData,!e.paused)}else presence.setActivity({details:"Browsing..",largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/D/dailymotion/assets/logo.png"})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VuY2UuanMiLCJtYXBwaW5ncyI6IjJCQUFBLE1BQU1BLFNBQVcsSUFBSUMsU0FBUyxDQUMxQkMsU0FBVSx1QkFDVkMsUUFBVUgsU0FBU0ksV0FBVyxDQUM5QkMsS0FBTSxrQkFDTkMsTUFBTyxtQkFDUEMsYUFBZSxDQUNmQyxjQUFlLG9FQUVuQlIsU0FBU1MsR0FBRyxjQUFjQyxVQUN0QixNQUFNQyxFQUFRQyxTQUFTQyxjQUFjLGNBQ3JDLEdBQUlGLElBQVVHLE1BQU1ILEVBQU1JLFVBQVcsQ0FDakMsTUFBTUMsRUFBUUosU0FBU0MsY0FBYyx1Q0FBd0NJLEVBQVdMLFNBQVNDLGNBQWMscUNBQy9HTixhQUFhVyxRQUFVRixFQUNqQkEsRUFBTUcsWUFDTixxQkFDTlosYUFBYWEsTUFBUUgsRUFDZkEsRUFBU0UsWUFDVCx3QkFDTlosYUFBYUMsY0FDVCxtRUFDSkQsYUFBYWMsY0FBZ0JWLEVBQU1XLE9BQVMsZ0RBQWtELCtDQUM5RmYsYUFBYWdCLGVBQWlCWixFQUFNVyxjQUN2Qm5CLFNBQVNHLGFBQ1RILFNBQVNFLE1BQ3JCRSxhQUFhaUIsZUFBZ0JqQixhQUFha0IsY0FDdkN6QixTQUFTMEIsY0FBY0MsS0FBS0MsTUFBTWpCLEVBQU1rQixhQUFjRixLQUFLQyxNQUFNakIsRUFBTUksV0FDdkVKLEVBQU1XLGdCQUNDZixhQUFhaUIsc0JBQ2JqQixhQUFha0IsY0FFcEJULEdBQVNDLEdBQ1RqQixTQUFTOEIsWUFBWXZCLGNBQWVJLEVBQU1XLE9BQ2xELE1BRUl0QixTQUFTOEIsWUFBWSxDQUNqQlosUUFBUyxhQUNUVixjQUFlLG9FQUV2QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3ByZXNlbmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHByZXNlbmNlID0gbmV3IFByZXNlbmNlKHtcbiAgICBjbGllbnRJZDogXCI2MTE2Njg5NDgxMzE1MTIzMjFcIixcbn0pLCBzdHJpbmdzID0gcHJlc2VuY2UuZ2V0U3RyaW5ncyh7XG4gICAgcGxheTogXCJnZW5lcmFsLnBsYXlpbmdcIixcbiAgICBwYXVzZTogXCJnZW5lcmFsLnBhdXNlZFwiLFxufSksIHByZXNlbmNlRGF0YSA9IHtcbiAgICBsYXJnZUltYWdlS2V5OiBcImh0dHBzOi8vY2RuLnJjZC5nZy9QcmVNaUQvd2Vic2l0ZXMvRC9kYWlseW1vdGlvbi9hc3NldHMvbG9nby5wbmdcIixcbn07XG5wcmVzZW5jZS5vbihcIlVwZGF0ZURhdGFcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHZpZGVvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNkbXBfVmlkZW9cIik7XG4gICAgaWYgKHZpZGVvICYmICFpc05hTih2aWRlby5kdXJhdGlvbikpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLlZpZGVvSW5mb1RpdGxlX192aWRlb1RpdGxlX19fM1dMbHdcIiksIHVwbG9hZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5DaGFubmVsTGluZV9fY2hhbm5lbE5hbWVfX18zSkUxQlwiKTtcbiAgICAgICAgcHJlc2VuY2VEYXRhLmRldGFpbHMgPSB0aXRsZVxuICAgICAgICAgICAgPyB0aXRsZS50ZXh0Q29udGVudFxuICAgICAgICAgICAgOiBcIlRpdGxlIG5vdCBmb3VuZC4uLlwiO1xuICAgICAgICBwcmVzZW5jZURhdGEuc3RhdGUgPSB1cGxvYWRlclxuICAgICAgICAgICAgPyB1cGxvYWRlci50ZXh0Q29udGVudFxuICAgICAgICAgICAgOiBcIlVwbG9hZGVyIG5vdCBmb3VuZC4uLlwiO1xuICAgICAgICBwcmVzZW5jZURhdGEubGFyZ2VJbWFnZUtleSA9XG4gICAgICAgICAgICBcImh0dHBzOi8vY2RuLnJjZC5nZy9QcmVNaUQvd2Vic2l0ZXMvRC9kYWlseW1vdGlvbi9hc3NldHMvbG9nby5wbmdcIjtcbiAgICAgICAgcHJlc2VuY2VEYXRhLnNtYWxsSW1hZ2VLZXkgPSB2aWRlby5wYXVzZWQgPyBcImh0dHBzOi8vY2RuLnJjZC5nZy9QcmVNaUQvcmVzb3VyY2VzL3BhdXNlLnBuZ1wiIDogXCJodHRwczovL2Nkbi5yY2QuZ2cvUHJlTWlEL3Jlc291cmNlcy9wbGF5LnBuZ1wiO1xuICAgICAgICBwcmVzZW5jZURhdGEuc21hbGxJbWFnZVRleHQgPSB2aWRlby5wYXVzZWRcbiAgICAgICAgICAgID8gKGF3YWl0IHN0cmluZ3MpLnBhdXNlXG4gICAgICAgICAgICA6IChhd2FpdCBzdHJpbmdzKS5wbGF5O1xuICAgICAgICBbcHJlc2VuY2VEYXRhLnN0YXJ0VGltZXN0YW1wLCBwcmVzZW5jZURhdGEuZW5kVGltZXN0YW1wXSA9XG4gICAgICAgICAgICBwcmVzZW5jZS5nZXRUaW1lc3RhbXBzKE1hdGguZmxvb3IodmlkZW8uY3VycmVudFRpbWUpLCBNYXRoLmZsb29yKHZpZGVvLmR1cmF0aW9uKSk7XG4gICAgICAgIGlmICh2aWRlby5wYXVzZWQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBwcmVzZW5jZURhdGEuc3RhcnRUaW1lc3RhbXA7XG4gICAgICAgICAgICBkZWxldGUgcHJlc2VuY2VEYXRhLmVuZFRpbWVzdGFtcDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGl0bGUgJiYgdXBsb2FkZXIpXG4gICAgICAgICAgICBwcmVzZW5jZS5zZXRBY3Rpdml0eShwcmVzZW5jZURhdGEsICF2aWRlby5wYXVzZWQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcHJlc2VuY2Uuc2V0QWN0aXZpdHkoe1xuICAgICAgICAgICAgZGV0YWlsczogXCJCcm93c2luZy4uXCIsXG4gICAgICAgICAgICBsYXJnZUltYWdlS2V5OiBcImh0dHBzOi8vY2RuLnJjZC5nZy9QcmVNaUQvd2Vic2l0ZXMvRC9kYWlseW1vdGlvbi9hc3NldHMvbG9nby5wbmdcIixcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljSEpsYzJWdVkyVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKd2NtVnpaVzVqWlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hOUVVGTkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEZGQlFWRXNRMEZCUXp0SlFVTTFRaXhSUVVGUkxFVkJRVVVzYjBKQlFXOUNPME5CUXpsQ0xFTkJRVU1zUlVGRFJpeFBRVUZQTEVkQlFVY3NVVUZCVVN4RFFVRkRMRlZCUVZVc1EwRkJRenRKUVVNM1FpeEpRVUZKTEVWQlFVVXNhVUpCUVdsQ08wbEJRM1pDTEV0QlFVc3NSVUZCUlN4blFrRkJaMEk3UTBGRGRrSXNRMEZCUXl4RlFVTkdMRmxCUVZrc1IwRkJhVUk3U1VGRE5VSXNZVUZCWVN4RlFVTmFMR3RGUVVGclJUdERRVU51UlN4RFFVRkRPMEZCUlVnc1VVRkJVU3hEUVVGRExFVkJRVVVzUTBGQlF5eFpRVUZaTEVWQlFVVXNTMEZCU3l4SlFVRkpMRVZCUVVVN1NVRkRjRU1zVFVGQlRTeExRVUZMTEVkQlFYRkNMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdTVUZEY2tVc1NVRkJTU3hMUVVGTExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRk8xRkJRM0JETEUxQlFVMHNTMEZCU3l4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zY1VOQlFYRkRMRU5CUVVNc1JVRkRNVVVzVVVGQlVTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc2JVTkJRVzFETEVOQlFVTXNRMEZCUXp0UlFVTjRSU3haUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITEV0QlFVczdXVUZETTBJc1EwRkJReXhEUVVGRkxFdEJRWEZDTEVOQlFVTXNWMEZCVnp0WlFVTndReXhEUVVGRExFTkJRVU1zYjBKQlFXOUNMRU5CUVVNN1VVRkRlRUlzV1VGQldTeERRVUZETEV0QlFVc3NSMEZCUnl4UlFVRlJPMWxCUXpWQ0xFTkJRVU1zUTBGQlJTeFJRVUYzUWl4RFFVRkRMRmRCUVZjN1dVRkRka01zUTBGQlF5eERRVUZETEhWQ1FVRjFRaXhEUVVGRE8xRkJRek5DTEZsQlFWa3NRMEZCUXl4aFFVRmhPMWxCUTNwQ0xHdEZRVUZyUlN4RFFVRkRPMUZCUTNCRkxGbEJRVmtzUTBGQlF5eGhRVUZoTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExHbEVRVUZqTEVOQlFVTXNLME5CUVZrc1EwRkJRenRSUVVOMlJTeFpRVUZaTEVOQlFVTXNZMEZCWXl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTk8xbEJRM3BETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1QwRkJUeXhEUVVGRExFTkJRVU1zUzBGQlN6dFpRVU4yUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFOUJRVThzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXp0UlFVTjRRaXhEUVVGRExGbEJRVmtzUTBGQlF5eGpRVUZqTEVWQlFVVXNXVUZCV1N4RFFVRkRMRmxCUVZrc1EwRkJRenRaUVVOMlJDeFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVTnlRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNc1JVRkROMElzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRekZDTEVOQlFVTTdVVUZGU0N4SlFVRkpMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVU3V1VGRGFrSXNUMEZCVHl4WlFVRlpMRU5CUVVNc1kwRkJZeXhEUVVGRE8xbEJRMjVETEU5QlFVOHNXVUZCV1N4RFFVRkRMRmxCUVZrc1EwRkJRenRUUVVOcVF6dFJRVVZFTEVsQlFVa3NTMEZCU3l4SlFVRkpMRkZCUVZFN1dVRkJSU3hSUVVGUkxFTkJRVU1zVjBGQlZ5eERRVUZETEZsQlFWa3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dExRVU42UlR0VFFVRk5PMUZCUTA0c1VVRkJVU3hEUVVGRExGZEJRVmNzUTBGQlF6dFpRVU53UWl4UFFVRlBMRVZCUVVVc1dVRkJXVHRaUVVOeVFpeGhRVUZoTEVWQlExb3NhMFZCUVd0Rk8xTkJRMjVGTEVOQlFVTXNRMEZCUXp0TFFVTklPMEZCUTBZc1EwRkJReXhEUVVGRExFTkJRVU1pZlE9PSJdLCJuYW1lcyI6WyJwcmVzZW5jZSIsIlByZXNlbmNlIiwiY2xpZW50SWQiLCJzdHJpbmdzIiwiZ2V0U3RyaW5ncyIsInBsYXkiLCJwYXVzZSIsInByZXNlbmNlRGF0YSIsImxhcmdlSW1hZ2VLZXkiLCJvbiIsImFzeW5jIiwidmlkZW8iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpc05hTiIsImR1cmF0aW9uIiwidGl0bGUiLCJ1cGxvYWRlciIsImRldGFpbHMiLCJ0ZXh0Q29udGVudCIsInN0YXRlIiwic21hbGxJbWFnZUtleSIsInBhdXNlZCIsInNtYWxsSW1hZ2VUZXh0Iiwic3RhcnRUaW1lc3RhbXAiLCJlbmRUaW1lc3RhbXAiLCJnZXRUaW1lc3RhbXBzIiwiTWF0aCIsImZsb29yIiwiY3VycmVudFRpbWUiLCJzZXRBY3Rpdml0eSJdLCJzb3VyY2VSb290IjoiIn0=
undefined;