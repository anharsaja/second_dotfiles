var __webpack_exports__={};const presence=new Presence({clientId:"1078446138966954085"});let browsingTimestamp=Math.floor(Date.now()/1e3),oldPath=null;presence.on("UpdateData",(async()=>{const{pathname:e,hostname:t,href:s}=document.location;oldPath!==e&&(browsingTimestamp=Math.floor(Date.now()/1e3),oldPath=e);const a={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/C/Chessly/assets/logo.png",startTimestamp:browsingTimestamp},n=e.split("/").filter((e=>""!==e));if("chessly.com"===t)switch(!0){case/\/courses(\/|$)/.test(e):{const e=n.indexOf("courses");if(n[e+1]){const t=document.querySelector("[class*='_imageWrapper'] img");switch(n[e+2]){case"gift-checkout":case"checkout":a.details="Purchasing a course",a.state=t.alt,a.largeImageKey=t.src;break;case"lessons":a.details="Doing a lesson",a.state=`${[...document.querySelectorAll("[class*='UserViewLessonHeader'] a[class*='UserViewLessonHeader_breadcrumbItem']")].map((e=>e.textContent)).join(", ")} - ${document.querySelector("header > [class*='UserViewLessonHeader'] > [class*='UserViewLessonHeader']").textContent}`;break;default:a.details="Viewing a course",a.state=document.querySelector("h1").textContent,a.largeImageKey=t.src}}else a.details="Browsing courses";break}case/\/games\//.test(e):"Play"===document.querySelector("[class*='PrimaryActionButton']")?.textContent?(a.details="Preparing to play a game",a.state=document.querySelector("h1").textContent):(a.details="Playing a game",a.state=document.querySelector("h1").textContent);break;case"dashboard"===n[0]:switch(n[1]){case"analysis":a.details="Analyzing a game";break;case"settings":a.details="Managing account settings";break;default:a.details="Browsing the dashboard"}break;case"faq"===n[0]:a.details="Reading the FAQ";break;case"login"===n[0]:a.details="Logging in";break;default:a.details="Browsing"}else if("feedback.chessly.com"===t)switch(n[0]??""){case"":a.details="Browsing feedback and suggestions";break;case"suggestions":"add"===n[1]?(a.details="Creating a suggestion",a.state=document.querySelector("#suggestionTitle").value):(a.details="Viewing a suggestion",a.state=document.querySelector("h1").textContent,a.buttons=[{label:"View Suggestion",url:s}])}a.details?presence.setActivity(a):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;