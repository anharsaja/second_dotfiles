var __webpack_exports__={};const presence=new Presence({clientId:"1003750528242692096"}),browsingUnix=Math.floor(Date.now()/1e3|0);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/T/Ticketer/assets/logo.png"},{pathname:t}=document.location;let a,i,s;switch(e.startTimestamp=browsingUnix,t){case"/commands":e.details="Viewing the commands page";break;case"/changelog":e.details="Viewing the changelog page";break;case"/contribute":e.details="Viewing the contribution page";break;case"/dashboard":e.details="Browsing the dashboard";break;case`/dashboard/${document.URL.slice(34)}`:if(document.querySelector(".server-info > h3")&&(a=document.querySelector(".server-info > h3"),i=document.querySelector(".server-info > img"),s=document.querySelector(".informations-nav > h2"),e.details="Server Settings - Editing:",e.state=a.textContent,e.smallImageKey=i.getAttribute("src")),!s?.textContent)return;switch(s.textContent){case"Stats":e.details="Server Stats - Viewing:";break;case"Tickets":e.details="Ticket History - Viewing:";break;case"Staff":e.details="Staff Actvity - Viewing:"}break;default:e.details="Viewing the homepage"}e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;