var __webpack_exports__={};const presence=new Presence({clientId:"996453486696878144"}),browsingTimestamp=Math.floor(Date.now()/1e3),slideshow=presence.createSlideshow();presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/N/Neovel/assets/logo.jpg",startTimestamp:browsingTimestamp},t={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/N/Neovel/assets/logo.jpg",startTimestamp:browsingTimestamp},a=document.location.pathname.split("/"),[o,s,i]=await Promise.all([presence.getSetting("privacy"),presence.getSetting("time"),presence.getSetting("cover")]),r="https://neovel.io/V2/book/image?bookId=%bookId%&oldApp=false&imageExtension=1";switch(a[1]){case"discover":e.details="Discovering new books";break;case"tos":e.details="Reading Neovel ToS",a.length>2&&(e.state="Privacy Policy");break;case"book":document.location.hostname.includes("neopload")?(e.details="Managing their book",o||(e.state=`Book ${document.querySelector(`option[value="${a[2]}"]`).textContent} [${a[3]}]`,e.largeImageKey=r.replace("%bookId%",a[2]))):(e.details=t.details="Reading a book page",e.buttons=t.buttons=[{label:"View Book",url:document.documentURI}],e.largeImageKey=t.largeImageKey=r.replace("%bookId%",a[2]),e.state=`from ${document.querySelector("a.author-element span").textContent} [${a[3]}]`,slideshow.addSlide("slideAuthor",e,5e3),t.state=`${document.querySelector("div.title-section h1").textContent} [${a[3]}]`,slideshow.addSlide("slideBook",t,5e3));break;case"read":e.details=t.details=o?"Reading a chapter":`Reading the chapter "${document.querySelector("h1.chapter-name").textContent}"`,e.buttons=t.buttons=o?[{label:"View Book",url:`https://neovel.io/book/${a[2]}/${a[3]}`}]:[{label:"View Chapter",url:document.documentURI},{label:"View Book",url:`https://neovel.io/book/${a[2]}/${a[3]}`}],e.largeImageKey=t.largeImageKey=r.replace("%bookId%",a[2]),e.state=`from ${document.querySelector("div.book-info span").textContent} [${a[3]}]`,slideshow.addSlide("slideAuthor",e,5e3),t.state=`from ${document.querySelector("div.book-info h2 a").textContent} [${a[3]}]`,slideshow.addSlide("slideBook",t,5e3);break;case"user":e.details="Viewing an author",e.buttons=[{label:"View Author",url:document.documentURI}],e.largeImageKey=document.querySelector("app-avatar.author-profile-picture img").getAttribute("src"),e.state=`${document.querySelector("div.author-label h1").textContent}`;break;case"explorer":e.details="Exploring stories",o||(e.state=`from "${document.querySelector("div.top-bar h1").textContent}"`);break;case"library":e.details="Exploring its library",o||(e.state={0:"In its recents novels",1:"In its lists",2:"Reading its comments"}[a[2]]);break;case"write":e.details="Is going to write";break;case"profile":e.details="Managing their author profile",o||(e.state=`On page "${document.querySelector(".mat-tab-label-active").textContent}"`);break;case"validation":e.details="Validating books";break;case"starter":e.details="Fetching their books";break;case"chapter":e.details="Editing a chapter",o||(e.state=`from "${document.querySelector("div.card-title strong.neovel-font-big").textContent}"`,e.largeImageKey=r.replace("%bookId%",a[2]));break;case"dashboard":e.details="Viewing book dashboard",o||(e.state=`from ${document.querySelector("div.book-detail-container h2").textContent} [${a[3]}]`,e.largeImageKey=r.replace("%bookId%",a[2]));break;case"contact_us":e.details="Contacting Neovel staff";break;default:a[1].includes("profile")?e.details="Managing their reader profile":a[1].includes("search")&&(e.details="Looking for a book")}s||(delete e.startTimestamp,delete t.startTimestamp),i||(e.largeImageKey=t.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/N/Neovel/assets/logo.jpg"),slideshow.getSlides().length>0?presence.setActivity(slideshow):e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;