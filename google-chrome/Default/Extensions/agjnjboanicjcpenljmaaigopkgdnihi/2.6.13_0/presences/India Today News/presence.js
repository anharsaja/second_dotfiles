var __webpack_exports__={};const presence=new Presence({clientId:"1051110545723506718"}),browsingTimestamp=Math.floor(Date.now()/1e3);async function getStrings(){return presence.getStrings({play:"general.playing",pause:"general.paused",home:"general.viewHome",search:"general.searchFor",browse:"general.browsing",watchingLive:"general.watchingLive",live:"general.live",watchingVid:"general.watchingVid",buttonViewPage:"general.buttonViewPage",buttonWatchVideo:"general.buttonWatchVideo",buttonReadArticle:"general.buttonReadArticle"},await presence.getSetting("lang").catch((()=>"en")))}function capitaliseFirstLetter(e){return e.trim().charAt(0).toUpperCase()+e.trim().slice(1).toLowerCase()}let strings,video={duration:0,currentTime:0,paused:!0},oldLang=null;presence.on("iFrameData",(e=>{video=e})),presence.on("UpdateData",(async()=>{let e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/I/India%20Today%20News/assets/logo.png",details:"Unsupported page"};const{href:t,pathname:s}=document.location,[r,a,i,n,o]=await Promise.all([presence.getSetting("timestamp"),presence.getSetting("buttons"),presence.getSetting("author"),presence.getSetting("lang").catch((()=>"en")),presence.getSetting("privacy")]);if(oldLang===n&&strings||(oldLang=n,strings=await getStrings()),o)return e.details=strings.browse,void presence.setActivity(e);const l={"/photo":{details:"Viewing Photographical news",buttons:[{label:strings.buttonViewPage,url:t}]},"/data-intelligence-unit":{details:"Viewing DIU news",buttons:[{label:strings.buttonViewPage,url:t}]},"/news.html":{details:"Viewing news",buttons:[{label:strings.buttonViewPage,url:t}]}},c=document.querySelector("div.Story_story__author__cJoes")?.querySelector("a.jsx-99cc083358cc2e2d")?.textContent,g=document.querySelector("div.Story_authors__OqkJZ"),d=document.querySelector('[class="jsx-559305e56e2f7896 active"]')?.textContent.toLowerCase().trim();for(const[t,r]of Object.entries(l))s.includes(t)&&(e={...e,...r});if("/"===s)e.details=strings.home;else if(s.includes("/search/"))e.details=strings.search,e.state=s.split("/search/")[1],e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",e.smallImageText="Searching";else if(s.includes(`/${d}`))e.details=`Viewing ${capitaliseFirstLetter(d)} news`,e.buttons=[{label:strings.buttonViewPage,url:t}];else if(s.includes("/photo"))e.details=document.querySelector("h1.Photo_maintitle__G_cdj")?.textContent,e.state=`Total of ${document.querySelector("span.typedata")?.textContent.split("/")[1]} photos`,e.largeImageKey=document.querySelector("div.PhotoCard_card__pic__axT6x")?.querySelector("img")?.src,e.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/I/India%20Today%20News/assets/logo.png",e.smallImageText="India Today News - Photos",e.buttons=[{label:strings.buttonReadArticle,url:t}],s.includes("s")&&!s.includes("/photo/")&&(e.details=`Viewing ${s.split("/photos")[0]?.replace("/","")?.split("/")[1].toUpperCase()} Photo Gallery`,e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/I/India%20Today%20News/assets/logo.png",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.smallImageText="India Today News - Photo Gallery",e.buttons=[{label:"View Photo Gallery",url:t}],delete e.state);else if(!isNaN(video?.duration)&&s.includes("/video")){const[a,i]=presence.getTimestamps(Math.floor(video.currentTime),Math.floor(video.duration));e.details=strings.watchingVid,e.state=document.querySelector("h1.Videoplayer_title__3Vk_I")?.textContent,e.smallImageKey=video.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText=video.paused?strings.pause:strings.play,e.buttons=[{label:strings.buttonWatchVideo,url:t}],r&&([e.startTimestamp,e.endTimestamp]=[a,i]),video.paused&&delete e.endTimestamp,s.includes("s")&&!s.includes("/video/")&&(e.details=`Viewing ${s.split("/videos")[0]?.replace("/","")?.split("/")[1].toUpperCase()} Videos`,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.smallImageText="India Today News - Videos",e.buttons=[{label:"View Videos",url:t}])}else if(s.includes("/weather/")){const s=document.querySelector("div.wtr_ttl_lhs")?.querySelector("h1")?.textContent.split("Today");e.details=s?.[0].trim(),e.state=s?.[1].trim(),e.smallImageKey=document.querySelector("span.wkl_li_icn")?.querySelector("img")?.src,e.smallImageText=`${document.querySelector("span.wtr_tmp_txt")?.textContent.trim()} - ${document.querySelector("div.wtr_tmp_rhs")?.querySelector("strong")?.textContent.trim()}Â°C`,e.buttons=[{label:"View Weather",url:t}]}else if(s.includes("/story")){const r=document.querySelector("h1.LiveBlog_blogtitile__WB5Az");e.details=document.querySelector("h1.Story_strytitle__MYXmR")?.textContent,e.state=document.querySelector("span.strydate")?.textContent,e.largeImageKey=document.querySelector("div.Story_associate__image__bYOH_")?.querySelector("img")?.src,e.smallImageKey=document.querySelector("a.jsx-99cc083358cc2e2d")?.querySelector("img")?.src,e.smallImageText=c,r&&(e.details=r.textContent,e.state=document.querySelector("span.catdate")?.textContent,e.largeImageKey=document.querySelector("div.LiveBlog_blogmos__UcOVK > img")?.getAttribute("src"),e.smallImageKey=document.querySelector("div.Byline_profile__pic__ijD9v > a > img")?.getAttribute("src"),e.smallImageText=document.querySelector("div.Byline_category__author__UEnOW > a")?.textContent),e.buttons=[{label:strings.buttonReadArticle,url:t}],s.includes("/india/story")&&(e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/I/India%20Today%20News/assets/logo.png"),g&&(e.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/I/India%20Today%20News/assets/logo.png",e.smallImageText="Multiple Authors")}else video&&!isNaN(video.duration)&&s.includes("livetv")&&(e.details=strings.watchingLive,e.state=document.querySelector("h1.Livetv_titlewithicon__Z2jnL")?.textContent.toUpperCase()?.replace("LIVE TV",""),e.smallImageKey=video.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/live.png",e.smallImageText=video.paused?strings.pause:strings.live,e.buttons=[{label:"Watch Live TV",url:t}]);!a&&e.buttons&&delete e.buttons,(r&&!e.startTimestamp||!e.endTimestamp)&&(e.startTimestamp=browsingTimestamp),i?s.includes("/story")&&(e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.smallImageText="Reading article"):s.includes("/story")&&!g&&e.buttons.push({label:"View Author",url:document.querySelector("div.Story_story__author__cJoes")?.querySelector("a.jsx-99cc083358cc2e2d")?.getAttribute("href")}),e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;