var __webpack_exports__={};const presence=new Presence({clientId:"1138055195008454656"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={startTimestamp:browsingTimestamp},{pathname:t,hostname:s}=document.location;switch(s.replace("www.","")){case"masuru.in.th":{const s=document.querySelector("title").textContent;s&&(e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/M/Masuru/assets/logo.webp",e.details=s,t.replace("/th","").replace("/en","").startsWith("/s/")&&(e.state=document.querySelector('meta[name="description"]')),presence.setActivity(e));break}case"bot.masuru.in.th":{const s=document.querySelector("title").textContent;if(s){e.details=s,e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/M/Masuru/assets/0.webp";const a=t.replace("/th","").replace("/en","");switch(a){case"/":e.details=`Home - ${s}`;break;case"/status":e.details=`Status - ${s}`;break;default:a.startsWith("/dashboard")&&(e.details=`Dashboard - ${s}`,e.state=a.split("/").reverse()[0],"discovery"===e.state&&(e.buttons=[{label:"View Discovery",url:"https://masuru.in.th/discovery"}]))}presence.setActivity(e)}break}case"cloud.masuru.in.th":{const t=document.querySelector("title").textContent;t&&(e.details=t,e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/M/Masuru/assets/logo.webp",presence.setActivity(e));break}}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;