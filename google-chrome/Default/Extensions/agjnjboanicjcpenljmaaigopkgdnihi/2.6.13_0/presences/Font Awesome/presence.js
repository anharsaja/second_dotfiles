"use strict";var __webpack_exports__={};const presence=new Presence({clientId:"820023496934817804"}),browsingTimestamp=Math.floor(Date.now()/1e3),slideshow=presence.createSlideshow();let oldSlideshowKey;function registerSlideshowKey(e){return oldSlideshowKey!==e&&(presence.info(`Slideshow key changed from ${oldSlideshowKey} to ${e}`),slideshow.deleteAllSlides(),oldSlideshowKey=e,!0)}const iconCache={};function getIconImage(e,t="#fff"){const a=document.createElement("canvas");a.width=512,a.height=512;const c=a.getContext("2d"),{fontFamily:n,fontWeight:o,color:s}=getComputedStyle(e),{content:l}=getComputedStyle(e,":before"),r=l.replace(/"/g,""),i=`${n}-${o}-${t}-${s}-${r}`;if(iconCache[i])return iconCache[i];c.fillStyle=t,c.fillRect(0,0,512,512),c.font=`${o} 384px/1 ${n}`,c.fillStyle=s,c.textAlign="center",c.textBaseline="middle",c.fillText(r,256,256);const h=new Promise((e=>{a.toBlob((t=>{const a=URL.createObjectURL(t);presence.info(`${i} -> ${a}`),setTimeout((()=>URL.revokeObjectURL(a)),15e3),e(t)}))}));return iconCache[i]=h,iconCache[i]}let batchCacheKey,batchInterval,batchCache=[],batchIndex=0,batchItems=[],batchAborter=new AbortController;async function batch(e,t,a){if(batchCacheKey===e)return batchItems.length!==t.length&&(presence.info(`Batched items changed from ${batchItems.length} to ${t.length}`),batchAborter.abort(),batchCache=[],batchIndex=0,batchItems=t,null===batchInterval&&c()),batchCache;async function c(){for(let e=batchIndex,t=0;e<batchItems.length&&t<10;e++,t++){const t=await a(batchItems[e]);if(batchAborter.signal.aborted){presence.info("Batch aborted"),batchAborter=new AbortController;break}batchCache.push(t),batchIndex++}presence.info(`Batched ${batchIndex} of ${batchItems.length}`),batchIndex===batchItems.length?(clearTimeout(batchInterval),batchInterval=null):e===batchCacheKey&&(batchInterval=setTimeout(c,5e3))}return presence.info(`Batched key changed from ${batchCacheKey} to ${e}`),clearTimeout(batchInterval),batchAborter.abort(),batchCacheKey=e,batchCache=[],batchItems=t,batchIndex=0,c(),batchCache}presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/F/Font%20Awesome/assets/logo.png",startTimestamp:browsingTimestamp,type:0,name:"Font Awesome"},{pathname:t,href:a,search:c}=document.location,n=t.split("/").filter(Boolean);let o=!1;switch(n[0]??"/"){case"/":e.details="Browsing Home Page";break;case"docs":e.details="Reading Documentation",n[1]&&(e.state=document.querySelector(".section+h1"),e.buttons=[{label:"Read Docs",url:a}]);break;case"icons":if("categories"===n[1])if(n[2]){const t=document.querySelector("h2");e.details="Viewing Icon Category",e.state=t,e.smallImageKey=await getIconImage(t.querySelector("i")),e.smallImageText=t,e.buttons=[{label:"View Category",url:a}]}else e.details="Browsing Categories";else if(n[1]){e.details="Viewing Icon",e.state=document.querySelector(".icon-detail h1+button,#icon-landing h1+button").childNodes[1],e.smallImageKey=await getIconImage(document.querySelector(".icon-details-preview-rendering i"),getComputedStyle(document.querySelector(".icon-details-preview.card")).backgroundColor);const t=document.querySelector("#icon_family");t&&(e.smallImageText=t.value),e.buttons=[{label:"View Icon",url:a}]}else e.details="Browsing Icons";break;case"search":{const t=new URLSearchParams(c).get("q");if(e.details="Searching Icons",t){e.state=t;const a=[...document.querySelectorAll("#icons-results > article")];if(a.length){const c=`search-${t}-${a[0].id}`;registerSlideshowKey(c),o=!0;const n=await batch(c,a,(async t=>({...e,smallImageKey:await getIconImage(t.querySelector("i")),smallImageText:t.id})));for(const e of n)slideshow.addSlide(e.smallImageText,e,5e3)}}break}case"start":e.details="Getting Started";break;case"support":e.details="Browsing Support";break;case"plans":n[1]?(e.details="Viewing Plan",e.state=document.querySelector("h3")):e.details="Browsing Plans";break;case"sessions":e.details="Signing In"}o?presence.setActivity(slideshow):e.details?presence.setActivity(e):presence.clearActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;