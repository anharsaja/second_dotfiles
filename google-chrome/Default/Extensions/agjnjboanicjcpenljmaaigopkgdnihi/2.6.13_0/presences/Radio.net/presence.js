var __webpack_exports__={};const presence=new Presence({clientId:"634124614544392193"});let oldLang,newLang,strings,timestamp;async function getStrings(e){return presence.getStrings({play:"general.playing",pause:"general.paused",search:"general.searching",browsing:"general.browsing"},e)}presence.on("UpdateData",(async()=>{const e=window.location.hostname.split("."),t=window.location.pathname.split("/").slice(1),s={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/R/Radio.net/assets/logo.png"};if(oldLang=newLang,newLang=await presence.getSetting("lang").catch((()=>"en")),strings&&oldLang===newLang||(strings=await getStrings(newLang)),"corporate"===e[0])switch(t[0]){case"about-us":case"ueber-uns":case"broadcasters":case"sender":case"advertising":case"werbung":case"press":case"presse":case"jobs":case"contact":case"kontakt":{const t=document.querySelector(".current_page_item").textContent;s.details=`${e.join(".")} corporate`,s.state=t.charAt(0).toUpperCase()+t.slice(1).toLowerCase();break}default:return presence.setActivity()}else switch(t[0]){case"s":"none"!==document.querySelector(".player__animate-icon").style.display?(timestamp||=Date.now(),s.details=document.querySelector("h1").textContent,s.state=document.querySelector(".player__song").textContent,s.largeImageKey=document.querySelector("#station").children[3].children[1].firstChild.firstChild.firstChild.src,s.smallImageText=strings.play,s.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/play.png",s.startTimestamp=timestamp):(timestamp=0,s.details=document.querySelector("h1").textContent,s.largeImageKey=document.querySelector("#station").children[3].children[1].firstChild.firstChild.firstChild.src,s.smallImageText=strings.pause,s.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png");break;case"p":if("none"!==document.querySelector(".player__animate-icon").style.display){const e=document.querySelector(".player__timing-wrap").textContent.split("|"),t=presence.getTimestamps(presence.timestampFromFormat(e[0]),presence.timestampFromFormat(e[1]));s.details=document.querySelector("h1").textContent,s.state=document.querySelector(".player__song").textContent,s.largeImageKey=document.querySelector("#podcast").children[1].children[1].firstChild.firstChild.firstChild.src,s.smallImageText=strings.play,s.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/play.png",[s.startTimestamp,s.endTimestamp]=t}else s.details=document.querySelector("h1").textContent,s.state=document.querySelector(".player__song").textContent,s.largeImageKey=document.querySelector("#podcast").children[1].children[1].firstChild.firstChild.firstChild.src,s.smallImageText=strings.pause,s.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png";break;case"search":s.details=new URLSearchParams(window.location.search).get("q"),s.state=document.querySelector("h1").textContent,s.smallImageText=strings.search,s.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png";break;case"genre":case"topic":case"country":case"city":case"local-stations":case"top-stations":s.details=document.querySelector("h1").textContent,s.smallImageText=strings.browsing,s.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png";break;case"country-selector":case"contact":case"app":case"terms-and-conditions":case"privacy-policy":case"imprint":s.details=document.title;break;default:return presence.setActivity()}}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;