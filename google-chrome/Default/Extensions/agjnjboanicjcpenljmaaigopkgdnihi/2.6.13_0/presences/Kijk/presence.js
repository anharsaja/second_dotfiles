var __webpack_exports__={};const presence=new Presence({clientId:"812413011502825504"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/K/Kijk/assets/logo.png",startTimestamp:browsingTimestamp},t=document.querySelector('[data-testid="searchInput"]'),{href:a,pathname:s}=window.location,[r,l,i]=await Promise.all([presence.getSetting("privacy"),presence.getSetting("buttons"),presence.getSetting("covers")]),n=document.querySelector('[class="NavItemstyle__ItemStyle-sc-1v7l1xb-1 hEDlux"]'),m=document.querySelector('[data-testid="videoMetaDataTitle"]')?.textContent??document.querySelector('[name="og:title"]')?.content,o=document.querySelector("video");if(r)e.details="Browsing...";else if(t?.value)e.details="Zoekt naar",e.state=t.value,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png";else switch(s.split("/")[1]){case"":e.details="Bekijkt de home pagina";break;case"films":"Films"===n?.textContent?(e.details="Bekijkt alle films",e.buttons=[{label:"Bekijk Alle Films",url:a}]):(delete e.startTimestamp,e.buttons=[{label:"Bekijk Film",url:a}],o?(e.largeImageKey=document.querySelector('[name="og:image"]').content,o.paused?e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png":([e.startTimestamp,e.endTimestamp]=presence.getTimestampsfromMedia(o),e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/play.png"),document.querySelector('[class="jw-text jw-reset-text jw-text-alt"]')?.textContent.includes("Adv.")?e.details="Advertenties":e.details=m):(e.largeImageKey=document.querySelector('[data-testid="imageMediaComponent"]')?.getAttribute("src"),e.details="Bekijkt",e.state=m));break;case"programmas":"Programma's"===n?.textContent||"Gemist"===n?.textContent?(n?.textContent.includes("Gemist")?e.details="Bekijkt alle gemiste programma's":e.details=`Bekijkt alle ${n?.textContent}`,e.buttons=[{label:"Bekijk Programma's",url:a}]):(delete e.startTimestamp,e.buttons=[{label:"Bekijk Programma",url:a}],o?(e.largeImageKey=document.querySelector('[name="og:image"]').content,o.paused?e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png":([e.startTimestamp,e.endTimestamp]=presence.getTimestampsfromMedia(o),e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/play.png"),document.querySelector('[class="jw-text jw-reset-text jw-text-alt"]')?.textContent.includes("Adv.")?e.details="Advertenties":e.details=m):(e.largeImageKey=document.querySelector('[data-testid="imageMediaComponent"]')?.getAttribute("src"),e.details="Bekijkt",e.state=m));break;case"fragmenten":e.details="Bekijkt alle fragmenten",e.buttons=[{label:"Bekijk Alle Fragmenten",url:a}];break;default:e.details=`Bekijkt ${s.split("/")[1]}`}i||(e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/K/Kijk/assets/logo.png"),l||delete e.buttons,e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;