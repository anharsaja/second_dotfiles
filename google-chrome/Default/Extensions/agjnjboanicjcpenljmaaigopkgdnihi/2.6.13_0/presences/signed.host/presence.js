var __webpack_exports__={};const presence=new Presence({clientId:"1000664778404016230"});let lastUnique,lastTimestamp=Date.now();presence.on("UpdateData",(async()=>{if(document.querySelector(".next-error-h1"))return presence.clearActivity();const{pathname:e,hostname:t,href:i}=document.location;lastUnique!==e&&(lastUnique=e,lastTimestamp=Date.now());let s=`Currently on ${e}`,n=null,a=null,r=null;const o=document.querySelector("#premid-username")?.textContent,d={"/":{details:"Viewing the front page"},"/terms":{details:"Reading the terms of the service"},"/login":{details:"Logging into their dashboard"},"/dash":{details:"Watching their general statistics"},"/dash/service/account":{details:"Editing account information"},"/dash/service/domains":{details:"Changing their domain"},"/dash/service/settings":{details:"Configuring their upload preferences"},"/dash/service/subscription":{details:"Viewing subscription options"},"/dash/service/gallery":{details:"Viewing their image gallery"},"/dash/service/warns":{details:"Viewing their warns"},"/dash/service/invites":{details:"Viewing their invite inventory"},"/dash/service/upload":{details:"Uploading file(s) with the web uploader"},"/dash/service/email":{details:"Configuring their email preferences"},"/dash/connections/discord":{details:"Modifying their Discord connection"},"/dash/bio/customize":{details:"Customizing their bio page"},"/dash/bio/css":{details:"Editing their custom CSS"}};switch(t){case"signed.host":e.includes("/dash")&&(r=o?`Logged in as ${o}`:"Not logged in!"),s=d[e]?.details;break;case"bio.signed.host":if("/"===e){s="Viewing the front bio page";break}s=`Viewing ${document.querySelector("#premid-username")?.textContent?.replace(/#.*/g,"")??"someone"}'s bio page`,r=`${document.querySelector("#premid-status")?.textContent??"unknown"} | ${parseInt(document.querySelector("#premid-bioviews")?.textContent)?document.querySelector("#premid-bioviews")?.textContent:"no"} views | uid ${document.querySelector("#premid-uid")?.textContent??"no"}`,n="Visit Bio",a=i}presence.setActivity({largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/S/signed.host/assets/logo.png",state:r,startTimestamp:lastTimestamp,details:s,buttons:n&&a?[{label:n,url:a}]:null})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;