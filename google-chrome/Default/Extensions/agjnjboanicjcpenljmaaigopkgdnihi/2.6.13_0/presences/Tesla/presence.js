var __webpack_exports__={};const presence=new Presence({clientId:"829056927227969596"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async function(){const[e,t,n,s]=await Promise.all([presence.getSetting("timeElapsed"),presence.getSetting("showButtons"),presence.getSetting("logo"),presence.getSetting("showCheckout")]),a=window.location.pathname.split("/"),r=["en_ca","es_mx","en_pr","nl_be","cs_cz","da_dk","de_de","el_gr","es_es","fr_fr","hr_hr","en_ie","is_is","it_it","fr_lu","nl_nl","no_no","de_at","pl_pl","pt_pt","sl_si","fr_ch","sv_se","fi_fi","en_gb","en_eu","he_il","en_ae","en_jo","zh_cn","zh_hk","en_mo","zh_tw","ja_jp","en_sg","ko_kr","en_au","en_nz"].includes(a[1])?2:1,o={largeImageKey:["https://cdn.rcd.gg/PreMiD/websites/T/Tesla/assets/1.png","https://cdn.rcd.gg/PreMiD/websites/T/Tesla/assets/0.png","https://cdn.rcd.gg/PreMiD/websites/T/Tesla/assets/2.png","https://cdn.rcd.gg/PreMiD/websites/T/Tesla/assets/3.png"][n]??"https://cdn.rcd.gg/PreMiD/websites/T/Tesla/assets/1.png"};if(e&&(o.startTimestamp=browsingTimestamp),"www.tesla.com"===window.location.hostname)if(a[r])if(a[r].startsWith("model")){const e=r+1;let n=null;"design"===a[e]?(n=document.querySelector(".text-loader--content.tds-text--center.text-loader--subtitle>span").textContent,o.details=`Designing ${n}`,t&&(o.buttons=[{label:`View ${n}`,url:window.location.href.replace(a[e],"").replace("#overview","")},{label:`Design ${n}`,url:window.location.href}])):(n=document.querySelector(".header-lower.tds-animate_small--to_reveal").textContent,o.details=`Viewing ${n}`,t&&(o.buttons=[{label:`View ${n}`,url:window.location.href}]))}else if(a[r].startsWith("cybertruck")){const e=r+1;o.details="Cybertruck","design"===a[e]?(o.state="Designing",t&&(o.buttons=[{label:"View Cybertruck",url:window.location.href.replace(a[e],"")},{label:"Design Cybertruck",url:window.location.href}])):(o.details="Viewing Cybertruck",t&&(o.buttons=[{label:"View Cybertruck",url:window.location.href}]))}else switch(a[r]){case"teslaaccount":switch(o.details="Account",a[r+1]){case"payment-history":o.state="Payment History";break;case"settings":o.state="Settings";break;case"ownership":o.state="Ownership"}break;case"solarroof":o.details="Solar Roof","design"===a[r+1]&&(o.state="Designing"),t&&(o.buttons=[{label:"View Solar Roof",url:window.location.href}]);break;case"solarpanels":o.details="Solar Panels",t&&(o.buttons=[{label:"View Solar Panels",url:window.location.href}]);break;case"energy":o.details="Energy","design"===a[r+1]&&(o.state="Designing"),t&&(o.buttons=[{label:"View Page",url:window.location.href}]);break;case"powerwall":o.details="Powerwall",t&&(o.buttons=[{label:"View Powerwall",url:window.location.href}]);break;case"inventory":o.details="Inventory",t&&(o.buttons=[{label:"View Inventory",url:window.location.href}]);break;case"drive":o.details="Test drive";break;case"charging":o.details="Charging";break;case"home-charging":o.details="Wall Connector";break;default:document.querySelector(".error-container>.error-code")?"404"===document.querySelector(".error-container>.error-code").textContent&&(o.details="Error 404",o.state="Page not found"):o.details="Other"}else o.details="Home";else if("shop.tesla.com"===window.location.hostname){const e=r+1;o.details="Shop","category"===a[r]&&a[e]?(o.state=document.title.replace("Tesla | ",""),t&&(o.buttons=[{label:"View Category",url:window.location.href}])):"product"===a[r]&&a[e]?(o.state=document.querySelector("h2.product-title.tds-text--h1-alt").textContent,t&&(o.buttons=[{label:"View Product",url:window.location.href}])):"checkout"===a[r]&&"billing-shipping-info"===a[e]?o.state="Checkout"+(s?` (${document.querySelector("span.ordersummary__container__order__details__line__total>span.inline-value").textContent})`:""):"orders"===a[r]&&(o.state="Order History")}o.details?presence.setActivity(o):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;