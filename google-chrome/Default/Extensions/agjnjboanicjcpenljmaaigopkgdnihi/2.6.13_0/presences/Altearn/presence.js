var __webpack_exports__={};const presence=new Presence({clientId:"805098006625517599"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/A/Altearn/assets/logo.png",startTimestamp:browsingTimestamp},t=await presence.getSetting("privacy"),a=await presence.getSetting("button");t?e.details="Browsing":window.location.pathname.startsWith("/articles")?(e.details="Viewing a page:",e.state="Activities"):window.location.pathname.startsWith("/category/")?(e.details="Searching an article:",e.state=`in category ${document.title.replace(" | Altearn","")}`,window.location.pathname.endsWith("category/ag/")&&(e.details="Viewing a page:",e.state="General Assembly")):window.location.pathname.startsWith("/assemblee-generale-")?(e.details="Viewing an General Assembly",e.state=document.title.replace(" | Altearn","").replace("Assemblée Générale - ",""),a&&(e.buttons=[{label:"View General Assembly",url:document.URL}])):window.location.pathname.endsWith("/notre-organisation/")?(e.details="Viewing a page:",e.state="Our organisation"):window.location.pathname.startsWith("/")&&1!==window.location.pathname.length?(e.details="Reading an article:",e.state=document.title.replace(" | Altearn",""),a&&(e.buttons=[{label:"View article",url:document.URL}]),window.location.pathname.includes("/author/")&&(e.details="Looking for an user:",e.state=document.title.replace(" | Altearn",""),a&&(e.buttons=[{label:"View user",url:document.URL}])),document.title.includes("Fiche de poste:")&&(e.details="Viewing a place as",e.state=document.title.replace(" | Altearn","").replace("Fiche de poste:",""),a&&(e.buttons=[{label:"View place",url:document.URL}]))):1===window.location.pathname.length&&(e.details="Viewing a page:",e.state="Home"),e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;