var __webpack_exports__={};const presence=new Presence({clientId:"640150336547454976"}),browsingTimestamp=Math.floor(Date.now()/1e3);async function getStrings(){return presence.getStrings({viewing:"general.viewing",play:"general.playing",pause:"general.paused",viewHome:"general.viewHome",viewSeries:"general.viewSeries",buttonViewSeries:"general.buttonViewSeries",buttonViewEpisode:"general.buttonViewEpisode",searchFor:"general.searchFor",search:"general.search"},await presence.getSetting("lang").catch((()=>"en")))}let strings,iFrameVideo,currentTime,duration,paused,lastPlaybackState,playback,oldLang=null;presence.on("iFrameData",(e=>{playback=null!==e.iframeVideo.duration,playback&&({iFrameVideo,currentTime,duration,paused}=e.iframeVideo),lastPlaybackState!==playback&&(lastPlaybackState=playback)})),presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/V/VRV/assets/logo.png",startTimestamp:browsingTimestamp},{href:t,pathname:s}=document.location,[a,r,n,i,g]=await Promise.all([presence.getSetting("lang").catch((()=>"en")),presence.getSetting("time"),presence.getSetting("cover"),presence.getSetting("buttons"),presence.getSetting("search")]);switch(oldLang===a&&strings||(oldLang=a,strings=await getStrings()),s.split("/")[1]){case"watch":{e.details=strings.viewing,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.largeImageKey=document.querySelector("img.c-content-image")?.src??"https://cdn.rcd.gg/PreMiD/websites/V/VRV/assets/logo.png",e.buttons=[{label:strings.buttonViewEpisode,url:t}];const s=document.querySelector("span.series").textContent,a=document.querySelector("h2.title").textContent,r=document.querySelector("span.season");e.state=r?`${s} - S${r.textContent.split(" ")[1]} ${a}`:`${s} - ${a}`,iFrameVideo&&!isNaN(duration)&&(e.smallImageKey=paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText=paused?strings.pause:strings.play,[e.startTimestamp,e.endTimestamp]=presence.getTimestamps(Math.floor(currentTime),Math.floor(duration)),e.details=r?`${s} - S${r.textContent.split(" ")[1]} ${a}`:s,e.state=r?a.split(" - ")[1]:a,paused&&(delete e.startTimestamp,delete e.endTimestamp));break}case"series":e.details=strings.viewSeries,e.state=document.querySelector("div.series-title").textContent,e.largeImageKey=document.querySelector("img.c-content-image")?.src??"https://cdn.rcd.gg/PreMiD/websites/V/VRV/assets/logo.png",e.buttons=[{label:strings.buttonViewSeries,url:t}];break;case"watchlist":e.details="Viewing their watchlist",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png";break;case"":e.details=strings.viewHome,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png";break;default:"Channel"===document.querySelector(".item-type")?.textContent&&(e.details="Viewing channel:",e.state=document.querySelector(".item-title").textContent,e.largeImageKey=document.querySelector("img").src)}t.includes("?q=")&&g&&(e.details=strings.searchFor,e.state=t.split("?q=")[1],e.startTimestamp=browsingTimestamp,delete e.endTimestamp,e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/V/VRV/assets/logo.png",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",e.smallImageText=strings.search,delete e.buttons),n||(e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/V/VRV/assets/logo.png"),i||delete e.buttons,r||(delete e.startTimestamp,delete e.endTimestamp),e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;