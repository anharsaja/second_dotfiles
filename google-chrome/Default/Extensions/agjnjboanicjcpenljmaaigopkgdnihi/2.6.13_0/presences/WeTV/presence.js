var __webpack_exports__={};class WeTV extends Presence{constructor(e){super(e)}getTitle(){return JSON.parse(document.querySelector('[type="application/ld+json"]').textContent)["@graph"][0].name}getMovieTitle(){return document.querySelector(".play-relevant__link").getAttribute("title")}getEpisodeTitle(){const e=document.querySelector(".play-relevant__item.play-relevant__item--selected");if(e)return e.children[2].textContent}getEpisodeNumber(){return document.querySelector(".play-video__item.play-video__item--selected")?.textContent.match(/[1-9][0-9]?[0-9]?/)[0]}isMovie(){return this.getTitle()===this.getMovieTitle()}isClip(){return this.getTitle()!==this.getEpisodeTitle()}}const presence=new WeTV({clientId:"840271335183351902"});presence.on("UpdateData",(async()=>{const e={details:"Browsing...",largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/W/WeTV/assets/logo.png",smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/search.png"};if(document.location.pathname.includes("/play/")){const t=document.querySelector("video");t?(e.details=presence.getTitle(),[e.startTimestamp,e.endTimestamp]=presence.getTimestampsfromMedia(t),e.smallImageKey=t.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText=t.paused?"Paused":"Playing",t.paused&&delete e.endTimestamp,presence.isMovie()?(e.state="Movie",presence.isClip()&&(e.state="Clip")):presence.getEpisodeNumber()?e.state=`Episode ${presence.getEpisodeNumber()}`:e.state=presence.getEpisodeTitle()):(e.details="Viewing:",e.state=presence.getTitle())}else document.location.pathname.endsWith("/search")&&(e.details="Searching for:",e.state=document.querySelector("input").value);presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;