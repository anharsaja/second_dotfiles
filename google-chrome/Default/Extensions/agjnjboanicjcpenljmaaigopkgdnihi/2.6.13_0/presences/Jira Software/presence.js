var __webpack_exports__={};const presence=new Presence({clientId:"782358522628145153"}),browsingTimestamp=Math.floor(Date.now()/1e3);let projectName;presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/J/Jira%20Software/assets/logo.png",startTimestamp:browsingTimestamp},t=document.location.pathname;if(document.location.hostname.match(/[a-z0-9]+[.]atlassian[.]net/))if("Create issue - Jira"!==document.title)if("/projects"===t||"/secure/BrowseProjects.jspa"===t)e.details="Browsing Projects.";else if(t.includes("/jira/software/projects/"))if(projectName=t.replace("/jira/software/projects/","").split("/").shift(),t.match(/\/[a-zA-Z0-9]+\/boards\/[0-9]$/))e.details=`Viewing ${document.querySelector('#jira-frontend > #helpPanelContainer > div:first-child > div > div[data-testid="Content"] > div:first-child > div:first-child > div:first-child > div > div:nth-child(2) > div:first-child > div:first-child > div > h1').textContent}.`,e.state=`Project: ${projectName}`;else if(t.includes("/reports")){let i;!function(e){e.burnup="Analyzing Burnup report.",e.burndown="Analyzing Burndown report.",e.velocity="Analyzing Velocity report.",e.cumulative="Analyzing Cumulative report."}(i||(i={})),e.details=i[t.split("/").pop()]||"Analyzing Reports.",e.state=`Project: ${projectName}`}else if(t.includes("/issues/")){const i=t.split("/").pop();""===i?(e.details="Tracking Issues.",e.state=`Project: ${projectName}`):(e.details=`Viewing Issue ${i}.`,e.state=`Project: ${projectName}`)}else if(t.includes("/settings/"))if(await presence.getSetting("showSettingsSections"))if(t.includes("/issuetypes")||t.includes("/apps"))t.includes("/apps/")?t.includes("/app-fields")?(e.details="Editing Apps settings: App fields.",e.state=`Project: ${projectName}`):(e.details="Editing Apps settings: Project automation.",e.state=`Project: ${projectName}`):(e.details=`Editing Issue type: ${document.querySelector('#jira-frontend > #helpPanelContainer > div > div > div[data-testid="Content"] > div:first-child > div:first-child > div > div:nth-child(2) > div > div > div:first-child > div:nth-child(3) > div > div > div:first-child > div > form > div > div > div > h1').textContent}.`,e.state=`Project: ${projectName}`);else{let i;!function(e){e.details="Editing Details settings.",e.access="Editing Access settings.",e.notifications="Editing Notifications settings.",e.features="Editing Features settings."}(i||(i={})),e.details=i[t.split("/").pop()],e.state=`Project: ${projectName}`}else e.details="Editing Settings.",e.state=`Project: ${projectName}`;else{let i;!function(e){e.roadmap="Viewing Roadmap.",e.backlog="Viewing Backlog.",e.code="Reviewing Code.",e.pages="Viewing Pages."}(i||(i={})),e.details=i[t.split("/").pop()],e.state=`Project: ${projectName}`}else if(t.includes("/projects/"))projectName=t.replace("/projects/","").split("/").pop(),e.details="Viewing Releases.",e.state=`Project: ${projectName}`;else if("/jira/your-work"===t)e.details="Viewing personal Issues.";else if(t.includes("/browse/"))e.details=`Viewing Issue ${t.split("/").pop()}`;else switch(t){case"/issues/":{let t;!function(e){e[e["My open issues."]=-1]="My open issues.",e[e["Reported by me."]=-2]="Reported by me.",e[e["Viewed recently."]=-3]="Viewed recently.",e[e["All issues."]=-4]="All issues.",e[e["Open issues."]=-5]="Open issues.",e[e["Created recently."]=-6]="Created recently.",e[e["Resolved recently."]=-7]="Resolved recently.",e[e["Updated recently."]=-8]="Updated recently.",e[e["Done issues."]=-9]="Done issues."}(t||(t={})),e.details="Tracking global Issues:",e.state=t[parseInt(document.location.search.split("=",2).pop().substr(0,2))]||"Searching for an issue.";break}case"/secure/ManageFilters.jspa":e.details="Managing Filters.";break;case"/jira/dashboards":e.details="Browsing Dashboards.";break;case"/secure/Dashboard.jspa":e.details="Viewing a Dashboard:",e.state=document.querySelector("#dashboard-content > div:first-child > div > div:first-child > h1").textContent;break;case"/jira/people/search":e.details="Browsing Users.";break;default:t.match(/\/jira\/people\/[a-z0-9]+$/)?(e.details="Viewing a User:",e.state=document.querySelector('#jira-frontend > #helpPanelContainer > div > div > div[data-testid="Content"] > div:first-child > div > div > div > div > div:nth-child(2) > aside > div:first-child > div > div:nth-child(2) > h2').textContent):t.match(/\/jira\/people\/team\/[a-z0-9-]+$/)?(e.details="Viewing a Team:",e.state=document.querySelector('#helpPanelContainer > div > div > div[data-testid="Content"] > div:first-child > div > div > div > div:nth-child(2) > aside > div:first-child > div > div:first-child > form > div > div > div > div').textContent):"/secure/ViewPersonalSettings.jspa"===t&&(e.details="Editing Personal settings.")}else e.details="Creating an Issue.";e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;