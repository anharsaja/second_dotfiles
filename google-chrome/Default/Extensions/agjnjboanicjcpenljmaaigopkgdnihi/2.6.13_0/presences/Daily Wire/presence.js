var __webpack_exports__={};const presence=new Presence({clientId:"843781235494486046"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async function(){const e=await presence.getSetting("timeElapsed"),t=await presence.getSetting("showButtons"),s=window.location.pathname.split("/"),n={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/D/Daily%20Wire/assets/logo.png"};if(e&&(n.startTimestamp=browsingTimestamp),s[1])if("news"===s[1]&&s[2])n.details="Viewing Article",n.state=document.querySelector("h1.css-cmdiie.e172hw750")?.textContent||"Unknown",t&&(n.buttons=[{label:"Read Article",url:window.location.href}]);else switch(s[1]){case"episode":n.details=document.querySelector("h2.css-n0lwas.e172hw750")?.textContent||"Unknown",n.state=document.querySelectorAll("span.css-e6rih1.ew91t7w0")[1]?.textContent||"Unknown",t&&(n.buttons=[{label:"Watch Episode",url:window.location.href}]);break;case"show":n.details="Viewing Show",n.state=document.querySelector("h3.css-1qqpwph")?.textContent||"Unknown",t&&(n.buttons=[{label:"Watch Show",url:window.location.href}]);break;case"discussion":n.details="Viewing Discussion",n.state=document.querySelector("h2.css-n0lwas.e172hw750")?.textContent||"Unknown",t&&(n.buttons=[{label:"View Discussion",url:window.location.href}]);break;case"author":n.details="Viewing Author",n.state=document.querySelector("h2.css-cmdiie.e172hw750")?.textContent||"Unknown",t&&(n.buttons=[{label:"View Author",url:window.location.href}]);break;case"subscribe":n.details="Viewing Membership";break;case"read":case"dicuss":case"watch":n.details="Browsing";break;case"search":n.details="Searching",n.state=document.querySelector("input.ais-SearchBox-input")?.value;break;default:n.details="Other"}else n.details="Home";n.details?presence.setActivity(n):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;