var __webpack_exports__={};const presence=new Presence({clientId:"1089948109225861200"}),browsingTimestamp=Math.floor(Date.now()/1e3),staticPages={"/":{details:"Browsing the main feed"},"/news":{details:"Browsing the main feed"},"/newest":{details:"Browsing the newest discussions"},"/newcomments":{details:"Browsing new comments"},"/ask":{details:"Browsing Ask HN discussions"},"/show":{details:"Browsing Show HN discussions"},"/jobs":{details:"Browsing job discussions"},"/pool":{details:"Browsing second-chance discussions"},"/invited":{details:"Browsing reposted links"},"/best":{details:"Browsing best discussions"},"/active":{details:"Browsing active discussions"},"/bestcomments":{details:"Browsing best comments"},"/asknew":{details:"Browsing new Ask HN discussions"},"/shownew":{details:"Browsing new Show HN discussions"},"/noobstories":{details:"Browsing submissions by new users"},"/noobcomments":{details:"Browsing comments by new users"},"/leaders":{details:"Browsing top users"},"/whoishiring":{details:"Browsing 'Who Is Hiring?' discussions"},"/launches":{details:"Browsing Launch HN discussions"}};presence.on("UpdateData",(async()=>{const s={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/H/Hacker%20News/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:e,href:t,search:i}=document.location,a=new URLSearchParams(i);switch(staticPages[e]&&Object.assign(s,staticPages[e]),e){case"/submitted":s.details="Browsing submissions by a user",s.state=a.get("id");break;case"/threads":s.details="Browsing threads by a user",s.state=a.get("id");break;case"/front":s.details="Browsing top discussions",s.state=document.querySelector("#pagespace + tr div").firstChild.textContent;break;case"/submit":s.details="Creating a new discussions",s.state=document.querySelector("[name='title']").value;break;case"/user":s.details="Viewing a user's profile",s.state=a.get("id");break;case"/favorites":s.details="Browsing a user's favorite "+(a.get("comments")?"threads":"discussions"),s.state=a.get("id");break;case"/item":{const e=document.querySelector(".titleline a");s.details="Viewing a discussion",s.state=e.textContent,s.buttons=[{label:"View Discussion",url:t}],document.querySelector(".sitebit.comhead")&&s.buttons.push({label:"Read Article",url:e.href});break}case"/from":s.details="Browsing discussions from a website",s.state=a.get("site")}s.details?presence.setActivity(s):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;