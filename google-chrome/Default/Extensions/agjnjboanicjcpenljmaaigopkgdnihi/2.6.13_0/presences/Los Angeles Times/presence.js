var __webpack_exports__={};const presence=new Presence({clientId:"1005501034191409153"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e=document.title.replace(" - Los Angeles Times",""),[t,a,s,n]=await Promise.all([presence.getSetting("privacy"),presence.getSetting("buttons"),presence.getSetting("articleAuthor"),presence.getSetting("moreDetails")]),{pathname:r,href:i,search:o}=window.location,l=r.split("/"),c={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/L/Los%20Angeles%20Times/assets/logo.jpg",startTimestamp:browsingTimestamp};if(a&&!t&&(c.buttons=[{label:"View Page",url:i}]),l[1])if(r.includes("/topic/"))c.details="Viewing a Topic",t||(c.state=e);else if(r.includes("/search"))c.details=t?"Searching":"Searching for",t||(c.state=new URLSearchParams(o).get("q")),a&&!t&&(c.buttons=[{label:"Show Search Results",url:i}]);else if("people"===l[1]&&l[2]){const t={name:document.querySelector("h1.author-name")?.textContent??e??"Unknown",title:document.querySelector("p.author-title")?.textContent,avatar:document.querySelector("div.author-avatar > picture > img")};c.details="Viewing an Author",c.state=`${t.name}${t.title?` (${t.title})`:""}`,t.avatar&&(c.smallImageKey=await getShortURL(t.avatar.src),c.smallImageText=t.name)}else if(hasDatePath(r)&&l[4]){const r={img:document.querySelector("div.author-avatar a > img"),name:document.querySelector("div.author-avatar a")?.ariaLabel.trim()},o=document.querySelector("div.authors > div.author-name"),l=document.querySelector("h1.headline")?.textContent??e;c.details=n?l:"Reading an Article",t||(c.state=n?`${o?.textContent.trim()??`By ${r.name}`}, ${document.querySelector("time span")?.textContent}`:l),a&&!t&&(c.buttons=[{label:"Read Article",url:i}]),s&&!t&&r.name&&(c.smallImageKey=await getShortURL(r.img?.src),c.smallImageText=o?.textContent.trim()??`By ${r.name}`)}else if("projects"===l[1]&&l[2])c.details="Viewing a Project",t||(c.state=e,a&&(c.buttons=[{label:"View Project",url:i}]));else switch(l[1]){case"bestcovery":{const e=["auto","home","lifestyle","electronics","tech","health-beauty","fashion","sports","music","kids-babies","streaming"],a=document.title.replace(" - Bestcovery","");c.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/L/Los%20Angeles%20Times/assets/0.png",c.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/L/Los%20Angeles%20Times/assets/1.png",c.smallImageText="Bestcovery powered by L.A. Times",e.includes(l[2])?(c.details="Viewing a Category",c.buttons[0].label="View Category",t||(c.state=a)):(c.details="Reading a Review",c.state=a.replace(" | Review by Bestcovery",""),c.buttons[0].label="Read Article");break}case"coupon-codes":c.details="Viewing Coupon Codes";break;case"games":c.details="Viewing Games",!t&&l[2]&&(c.details="Playing a Game",c.state=document.querySelector("h2.subhead")?.textContent,c.buttons[0].label="View Game");break;default:l[1]&&(c.details="Viewing a Category",t||(c.state=e))}else c.details="Viewing Home Page",delete c.buttons;c.state||delete c.state,c.details?presence.setActivity(c):presence.setActivity()}));const shortenedURLs={};async function getShortURL(e){if(!e||e.length<256)return e;if(shortenedURLs[e])return shortenedURLs[e];try{const t=await(await fetch(`https://pd.premid.app/create/${e}`)).text();return shortenedURLs[e]=t,t}catch(t){return presence.error(t),e}}function hasDatePath(e){return/[0-9]{4}-[0-9]{2}-[0-9]{2}/g.test(e)}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;