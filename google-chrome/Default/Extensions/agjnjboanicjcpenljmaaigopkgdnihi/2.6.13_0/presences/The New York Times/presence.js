var __webpack_exports__={};const presence=new Presence({clientId:"813781191308083239"}),time=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e=document.title.replace(" - The New York Times",""),t=await getSettings(),{pathname:a,hostname:s,href:i,search:n}=window.location,r=a.split("/"),c={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/T/The%20New%20York%20Times/assets/logo.jpg",startTimestamp:time};if("www.nytimes.com"===s)if(t.buttons&&!t.privacy&&(c.buttons=[{label:"View Page",url:i}]),("international"!==r[1]&&"ca"!==r[1]&&"es"!==r[1]||r[2])&&r[1]){if(a.includes("/interactive/"))c.details="Viewing an Interactive:",t.privacy||(c.state=e);else if(a.includes("/section/")||a.includes("/spotlight/podcasts"))c.details="Viewing a Section Page:",t.privacy||(c.state=e);else if(a.includes("/destination/"))c.details="Viewing a Destination Page:",t.privacy||(c.state=e);else if(a.includes("/reviews/"))c.details="Viewing a Review Page:",t.privacy||(c.state=e);else if(a.includes("/column/"))c.details="Viewing a Column Page:",t.privacy||(c.state=e);else if(a.includes("/search"))c.details=t.privacy?"Searching":"Searching for:",t.privacy||(c.state=new URLSearchParams(n).get("query")),t.buttons&&!t.privacy&&(c.buttons=[{label:"Show Search Results",url:i}]);else if(a.includes("/video/"))c.details="Viewing a Video Section:",c.state=e;else if(hasDatePath(a)&&a.includes("/podcasts/")){const a=document.querySelector("audio"),s=document.querySelector("span.css-1f76qa2 span"),n=document.querySelector("span.css-1f76qa2 img");c.details=t.privacy?"Listening to a Podcast":"Listening to a Podcast:",s&&!t.privacy&&(c.state=`${s.textContent}: ${e}`),a&&!isNaN(a.duration)&&([c.startTimestamp,c.endTimestamp]=presence.getTimestampsfromMedia(a),a.paused&&(delete c.endTimestamp,c.startTimestamp=time)),t.buttons&&!t.privacy&&(c.buttons=[{label:"Listen to Podcast",url:i}]),t.podcastLogo&&!t.privacy&&n&&(c.largeImageKey=await getShortURL(n.src))}else if("by"===r[1]&&r[2]){const e=document.querySelector("h1.css-1uxfi68.e16wpn5v0")?.textContent??"Unknown";c.details="Viewing an Author Page:",c.state=e,document.querySelector("div.css-cnx41t img")&&(c.smallImageKey=await getShortURL(document.querySelector("div.css-cnx41t img").src),c.smallImageText=e)}else if(hasDatePath(a)&&r[4]){const a=document.querySelector("img.css-1bfqq7u.ey68jwv2"),s=document.querySelector("p.css-aknsld.e1jsehar1"),n=document.querySelector('h1[data-testid="headline"]')?.textContent??e,r=document.querySelector('span span.css-bwjyn0.live-blog-header-live-label[data-active="true"]'),o=document.querySelector("span.css-233int.e16638kd4");c.details=t.privacy?"Reading an Article":!t.moreDetails||r||o?"Reading an Article:":n,t.privacy||(c.state=!t.moreDetails||r||o?n:`${s?.textContent??`By ${a?.title??"Unknown"}`}, ${document.querySelector("time span")?.textContent}`),t.buttons&&!t.privacy&&(c.buttons=[{label:"Read Article",url:i}]),r?(c.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/live.png",c.smallImageText="Live"):t.articleAuthor&&!t.privacy&&a&&(c.smallImageKey=await getShortURL(a.src),c.smallImageText=s?.textContent??`By ${a.title}`)}}else c.details="Viewing Home Page";else if("myaccount.nytimes.com"===s&&(c.details="Managing Account",!t.privacy))switch(r[2]){case"subscription":c.state="Subscription Overview";break;case"billing":c.state="Billing History";break;case"settings":c.state="Emails and Settings";break;case"change-email":c.state="Change Email";break;case"forgot-password":c.state="Reset Password";break;default:"get-started"===r[1]&&"manage-billing"===r[2]&&(c.state="Payment details")}c.state||delete c.state,c.details?presence.setActivity(c):presence.setActivity()}));const shortenedURLs={};async function getShortURL(e){if(!e||e.length<256)return e;if(shortenedURLs[e])return shortenedURLs[e];try{const t=await(await fetch(`https://pd.premid.app/create/${e}`)).text();return shortenedURLs[e]=t,t}catch(t){return presence.error(t),e}}function hasDatePath(e){return/[0-9]{4}\/[0-9]{2}\/[0-9]{2}/g.test(e)}async function getSettings(){const e=await Promise.all([presence.getSetting("privacy"),presence.getSetting("buttons"),presence.getSetting("podcastLogo"),presence.getSetting("articleAuthor"),presence.getSetting("moreDetails")]),t=["privacy","buttons","podcastLogo","articleAuthor","moreDetails"],a={};for(const[s,i]of t.entries())a[i]=e[s];return a}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;