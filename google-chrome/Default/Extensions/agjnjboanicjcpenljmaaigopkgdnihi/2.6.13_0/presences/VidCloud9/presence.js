var __webpack_exports__={};const presence=new Presence({clientId:"697552926876368917"}),strings=presence.getStrings({play:"general.playing",pause:"general.paused"});let iFrameVideo,currentTime,duration,paused,video,playback,title,browsingTimestamp;presence.on("iFrameData",(e=>{video=e,playback=!!e.iframeVideo.duration,playback&&(({iFrameVideo,paused}=e.iframeVideo),currentTime=e.iframeVideo.currTime,duration=e.iframeVideo.dur)})),presence.on("UpdateData",(async()=>{const e=await presence.getSetting("sSI"),t=await presence.getSetting("sTE"),a=await presence.getSetting("sVT");t?(browsingTimestamp=Math.floor(Date.now()/1e3),presence.info("Elapsed is on")):(browsingTimestamp=null,presence.info("Elapsed Off"));const s={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/V/VidCloud9/assets/logo.png"};if(a?(presence.info("Video Time is On"),playback&&(browsingTimestamp=Math.floor(Date.now()/1e3))):presence.info("Video time is off"),e)switch(presence.info("Info is On."),document.location.pathname){case"/":s.startTimestamp=browsingTimestamp,s.details="Viewing home page";break;case"/movies":s.startTimestamp=browsingTimestamp,s.details="Viewing the recently added movies";break;case"/series":s.startTimestamp=browsingTimestamp,s.details="Viewing the recently added series";break;case"/cinema-movies":s.startTimestamp=browsingTimestamp,s.details="Viewing the recently added cinema movies.";break;case"/recommended-series":s.startTimestamp=browsingTimestamp,s.details="Viewing recommened series";break;default:document.location.pathname.includes("/videos/")?(title=document.querySelector("#main_bg > div:nth-child(5) > div > div.video-info-left > h1"),title?(s.state=title.textContent,iFrameVideo&&!isNaN(duration)&&title&&video?paused?paused&&(delete s.startTimestamp,delete s.endTimestamp,s.details="Paused:",s.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png",s.smallImageText=(await strings).pause):(s.details="Watching:",s.smallImageKey=paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",a&&(s.smallImageText=paused?(await strings).pause:(await strings).play,[s.startTimestamp,s.endTimestamp]=presence.getTimestamps(Math.floor(currentTime),Math.floor(duration)))):!iFrameVideo&&isNaN(duration)&&title?(s.details="Viewing:",s.state=title.textContent,s.startTimestamp=browsingTimestamp):(s.details="Error 03: Watching unknown show/movie.",s.state="Can't tell if playing or not.",s.startTimestamp=browsingTimestamp,s.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",s.smallImageText="Error 3",presence.error("Can't tell what you are watching. Fix a variable or line of code."))):(s.startTimestamp=browsingTimestamp,s.details="Error 02: Watching unknown show/movie.",s.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",presence.error("Can't read page."))):" Result search"===document.querySelector("#main_bg > div:nth-child(5) > div > div.section-header > h3").textContent?(presence.info("Searching"),s.details="Searching:",s.state=document.location.href.replace("https://vidcloud9.com/search.html?keyword=",""),s.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",s.smallImageText="Searching"):(s.startTimestamp=browsingTimestamp,s.details="Error 01: Can't Read Page",s.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",presence.error("Can't read page. Set up a conditional."))}else s.details=null,presence.info("Info is off.");s.details?presence.setActivity(s):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;