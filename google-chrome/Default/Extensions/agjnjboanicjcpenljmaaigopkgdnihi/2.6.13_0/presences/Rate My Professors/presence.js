var __webpack_exports__={};const presence=new Presence({clientId:"1047546230525415535"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/R/Rate%20My%20Professors/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:t}=document.location,s=t.split("/").filter((e=>""!==e));switch(s[0]){case"account":switch(s[1]){case"profile":e.details="Viewing their profile";break;case"settings":e.details="Managing their settings";break;case"ratings":e.details="Viewing their ratings";break;case"saved-professors":e.details="Viewing their saved professors"}break;case"add":switch(s[1]){case"school-rating":e.details="Rating a school",e.state=document.querySelector("[class*='HeaderDescription__StyledTitleName'] span").textContent;break;case"teacher-rating":e.details="Rating a professor",e.state=[...document.querySelectorAll("[class*='HeaderDescription__StyledTitleName'] span")].map((e=>e.textContent)).join(" ").trim();break;case"professor":e.details="Adding a professor";break;case"school":e.details="Adding a school"}break;case"flag":"school-rating"===s[1]?e.details="Reporting a rating for a school":e.details="Reporting a rating for a professor";break;case"professor":e.details="Viewing a professor",e.state=document.querySelector("[class*='NameTitle__Name']").textContent.trim(),e.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/R/Rate%20My%20Professors/assets/0.png",e.smallImageText=`Quality: ${document.querySelector("[class*='RatingValue__Numerator']").textContent} / 5`;break;case"school":e.details="Viewing a school",e.state=document.querySelector("[class*='StyledTitleName']").textContent,e.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/R/Rate%20My%20Professors/assets/0.png",e.smallImageText=`Quality: ${document.querySelector("[class*='OverallRating__Number']").textContent}`;break;case"search":e.details="Searching for a "+("teachers"===s[1]?"professor":"school"),e.state=document.querySelector("h1 > span > b").textContent.replace(/^\s*"(.*)"\s*$/,"$1");break;case"submit-correction":"campus"===s[1]&&(e.details="Submitting a correction for a campus");break;default:e.details="Browsing"}presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;