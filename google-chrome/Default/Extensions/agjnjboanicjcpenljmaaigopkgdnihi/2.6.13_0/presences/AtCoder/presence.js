var __webpack_exports__={};const presence=new Presence({clientId:"845360129715994685"}),timeElapsed=~~(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/A/AtCoder/assets/logo.png",startTimestamp:timeElapsed};if(location.pathname.split("/")[1])switch(location.pathname.split("/")[1]){case"home":e.details="Viewing Home Page";break;case"register":e.details="Creating an account";break;case"login":e.details="Logging in";break;case"contests":switch(e.details="Viewing Contest",e.state=`${document.title.split("-")[0]}`,location.pathname.split("/")[3]){case"tasks":e.details="Viewing Contest Tasks",e.state=`${document.title.split("-")[1]}`,5===location.pathname.split("/").length&&(e.details=document.querySelector(".contest-title").textContent,e.state=document.title);break;case"clarifications":e.details="Viewing Clarifications",e.state=`Contest: ${location.pathname.split("/")[2].toUpperCase()}`;break;case"submit":e.details=`Submitting Solution: ${location.pathname.split("/")[2].toUpperCase()}`,e.state=`${document.querySelectorAll(".select2-selection__rendered").item(0).textContent} [${document.querySelectorAll(".select2-selection__rendered").item(1).textContent}]`;break;case"submissions":"me"===location.pathname.split("/")[4]?e.details="Viewing my Submissions":e.details="Viewing All Submissions",e.state=document.querySelector(".contest-title").textContent;break;case"score":e.details="Viewing my Score",e.state=document.querySelector(".contest-title").textContent;break;case"standings":"virtual"===location.pathname.split("/")[4]?e.details="Viewing Virtual Standings":e.details="Viewing Standings",e.state=`Contest: ${location.pathname.split("/")[2].toUpperCase()}`;break;case"results":e.details="Viewing Result",e.state=`Contest: ${location.pathname.split("/")[2].toUpperCase()}`;break;case"editorial":e.details="Viewing Editorial",e.state=`Contest: ${location.pathname.split("/")[2].toUpperCase()}`,5===location.pathname.split("/").length&&(e.details="Reading Editorial",e.state=`${location.pathname.split("/")[2].toUpperCase()}: ${document.querySelector("#main-container").querySelector("h2").querySelector("a").textContent}`);break;case"custom_test":e.details="Performing Custom Test",e.state=`Contest: ${location.pathname.split("/")[2].toUpperCase()}`}break;case"ranking":e.details="Viewing Ranks",e.state=`Page no. ${location.search.split("=")[1]||1}`;break;case"users":{const t=document.querySelector(".username").textContent;e.details="Viewing Profile","history"===location.pathname.split("/")[3]?e.state=`${t}'s Competition History`:e.state=t;break}case"settings":e.details="Editing their Settings";break;case"posts":if(location.pathname.split("/")[2]){e.details="Reading Post",e.state=document.querySelector(".panel-title").childNodes[0].textContent;break}e.details="Browsing Post Archive..."}else e.details="Viewing Home Page";e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;