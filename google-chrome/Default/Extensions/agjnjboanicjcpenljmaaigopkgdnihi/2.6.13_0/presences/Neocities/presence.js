var __webpack_exports__={};const presence=new Presence({clientId:"945295281728159744"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/N/Neocities/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:t,hostname:s}=document.location,[i,a]=await Promise.all([presence.getSetting("image"),presence.getSetting("buttons")]),r=document.querySelector("link[rel~='icon']"),n=document.title.split(/-(.+)/)[1];"neocities.org"===s?"/"===t?e.details="Home page":"/browse"===t?(e.details="Browsing sites",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png"):t.startsWith("/site/")?(e.details="Viewing a site:",e.state=document.querySelector("h2 > span").textContent,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.buttons=[{label:"View site",url:document.URL}]):"/activity"===t?(e.details="Viewing Recent Activities",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png"):t.startsWith("/tutorial")?(e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png","/tutorials"===t||"/tutorial"===t?e.details="Looking through tutorials":(e.details="In a course:",e.state=n)):"/dashboard"===t?e.details="Viewing their site":t.includes("/text_editor")&&(e.details="In the Text Editor",e.state=n,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/writing.png"):"blog.neocities.org"===s?(e.details="Reading blogs",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",t.startsWith("/blog")&&(e.details="Reading a blog:",e.state=document.title,e.buttons=[{label:"Read blog",url:document.URL}])):(e.details=document.title,e.state=`by ${s.split(".")[0]}`,i&&r&&(e.largeImageKey=r.href),e.buttons=[{label:"View Page",url:document.location.origin}]),a||delete e.buttons,presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;