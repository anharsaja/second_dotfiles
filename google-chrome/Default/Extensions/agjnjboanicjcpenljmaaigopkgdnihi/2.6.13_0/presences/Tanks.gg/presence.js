var __webpack_exports__={};const presence=new Presence({clientId:"1003195428642238464"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/T/Tanks.gg/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:t,href:a}=window.location;if("/"===t)e.details="Browsing the home page";else if(document.location.pathname.startsWith("/tank/"))e.details="Viewing a tank",e.state=`${document.querySelector(".header-tank > h1").firstChild.textContent}`,e.buttons=[{label:"View Tank",url:a}];else if(document.location.pathname.startsWith("/list/stats"))e.details="Browsing tanks by stats",e.state=`Sorting by: ${document.querySelector("#content > div > div.container-fluid.main-container > div > div.filter > div.dropdown.stat > button").textContent}`,e.buttons=[{label:"View Page",url:a}];else if(document.location.pathname.startsWith("/techtree/"))e.details="Viewing the tech tree",e.state=document.querySelector(".current").textContent,e.buttons=[{label:"View Tech Tree",url:a}];else if(document.location.pathname.startsWith("/compare/"))e.details="Comparing tanks",e.buttons=[{label:"View Comparison",url:a}];else if(document.querySelector('[class="player-stats"]'))e.details=`Viewing profile (${document.querySelector('[class="dropdown-item active"]').textContent})`,e.state=`${document.querySelector("#content > div > div.container-fluid.main-container > div > div.top-container > div.main-col > h2").firstChild.textContent}`,e.buttons=[{label:"View Profile",url:a}];else switch(t){case"/list":e.details="Browsing tanks";break;case"/compare":e.details="Comparing tanks";break;case"/about":e.details="Viewing the about page";break;case"/privacy":e.details="Viewing the privacy policy"}presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;