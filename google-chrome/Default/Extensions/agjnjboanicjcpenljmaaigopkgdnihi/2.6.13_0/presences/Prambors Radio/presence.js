var __webpack_exports__={};const presence=new Presence({clientId:"630428033966276612"}),strings=presence.getStrings({pause:"general.paused"}),presenceData={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/P/Prambors%20Radio/assets/logo.png"};let timestamp;presence.on("UpdateData",(async()=>{const{pause:e}=await strings;if(["streaming.pramborsfm.com","live.pramborsfm.com"].includes(document.location.hostname))switch(presenceData.buttons=[{label:"Listen to Prambors",url:"https://live.pramborsfm.com"}],timestamp??=Date.now(),document.location.hostname){case"streaming.pramborsfm.com":{const t=document.querySelector("#playerBtn")?.className;"stopped"===t?(timestamp=null,delete presenceData.startTimestamp,presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png",presenceData.smallImageText=e):"playing"===t&&(presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/live.png",presenceData.smallImageText="Listening",presenceData.startTimestamp=timestamp),presenceData.state=document.querySelectorAll("span[data-radium=true]").item(3).textContent,presenceData.details=document.querySelectorAll("span[data-radium=true]").item(2).textContent;break}case"live.pramborsfm.com":{const t=[...[...document.querySelectorAll("button")].pop().classList].pop().split("--").pop();"play"===t?(timestamp=null,delete presenceData.startTimestamp,presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png",presenceData.smallImageText=e):"pause"===t&&(presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/live.png",presenceData.smallImageText="Listening",presenceData.startTimestamp=timestamp),presenceData.state=document.querySelector(".td-player-vertical__track-info__artist-name").textContent,presenceData.details=document.querySelector(".td-player-vertical__track-info__cue-title").textContent;break}}presence.setActivity(presenceData)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;