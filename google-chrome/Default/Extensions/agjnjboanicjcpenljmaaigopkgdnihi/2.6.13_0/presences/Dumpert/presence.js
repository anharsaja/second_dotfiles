var __webpack_exports__={};const presence=new Presence({clientId:"840126038205923369"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/D/Dumpert/assets/logo.png",startTimestamp:browsingTimestamp},{href:t,pathname:s}=window.location,[r,n,a]=await Promise.all([presence.getSetting("privacy"),presence.getSetting("buttons"),presence.getSetting("covers")]),o=document.querySelector(".searchfield"),l=document.querySelector('[class*="dropdown--"] > div')?.textContent?.toLowerCase();if(s.includes("/zoek/"))return e.details=r?"Bekijkt zoekresultaten":`Bekijkt zoekresultaten voor: ${document.querySelector('[class*="list_title_holder list_bar_left"] > h1')?.textContent?.split("'")[1]}`,e.state=l?`Gesorteerd op: ${l}`:"",void presence.setActivity(e);if(o?.value)return e.details=r?"Is aan het zoeken":"Zoekt naar:",e.state=o.value,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",e.smallImageText="Aan het zoeken",void presence.setActivity(e);switch(!0){case t.includes("selectedId="):case s.includes("/item/"):{const s=document.querySelector('[class="vjs-tech"]');s?(delete e.startTimestamp,e.largeImageKey=document.querySelector('[property="og:image" ]')?.content??"https://cdn.rcd.gg/PreMiD/websites/D/Dumpert/assets/logo.png",e.smallImageKey=s?.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",s.paused||([e.startTimestamp,e.endTimestamp]=presence.getTimestampsfromMedia(s)),e.buttons=[{label:"Bekijk Video",url:t}]):(e.largeImageKey=document.querySelectorAll("img")[1]?.getAttribute("src")??"https://cdn.rcd.gg/PreMiD/websites/D/Dumpert/assets/logo.png",e.buttons=[{label:"Bekijk Foto",url:t}]),e.details=document.querySelector('meta[property~="og:title"]')?.content??"Onbekende titel";break}case s.includes("toppers"):e.details=r?"Bekijkt content":"Bekijkt de toppers",e.buttons=[{label:"Bekijk Content",url:t}];break;case s.includes("latest"):e.details=r?"Bekijkt content":"Bekijkt de nieuwste content",e.buttons=[{label:"Bekijk Content",url:t}];break;case s.includes("/tag/"):{const s=document.querySelector('[class*="activeitem--"]')?.textContent?.toLowerCase();e.details=r?"Bekijkt resultaten voor een tag":s?`Bekijkt resultaten voor tag: ${s}`:`Bekijkt resultaten voor tag: ${document.querySelector('[class*="list_title_holder list_bar_left"] > h1')?.textContent?.split("'")[1]}`,e.state=l?`Gesorteerd op: ${l}`:"",e.buttons=[{label:"Bekijk Content",url:t}];break}}r&&e.state&&delete e.state,n&&!r||!e.buttons||delete e.buttons,a||"https://cdn.rcd.gg/PreMiD/websites/D/Dumpert/assets/logo.png"===e.largeImageKey||(e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/D/Dumpert/assets/logo.png"),e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;