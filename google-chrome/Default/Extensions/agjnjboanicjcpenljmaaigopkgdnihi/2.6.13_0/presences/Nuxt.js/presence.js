var __webpack_exports__={};const presence=new Presence({clientId:"691080074006495303"}),browsingTimestamp=Math.floor(Date.now()/1e3);async function getStrings(){return presence.getStrings({browse:"general.browsing",search:"general.searchFor",viewHome:"general.viewHome",buttonReadArticle:"general.buttonReadArticle",buttonViewPage:"general.buttonViewPage",buttonViewProfile:"general.buttonViewProfile"},await presence.getSetting("lang").catch((()=>"en")))}function capitalizeFirstLetter(e){return e?e.trim().charAt(0).toUpperCase()+e.trim().slice(1).toLowerCase():"Undefined"}function imgPath(e,t){return e?e.includes(t)?`https://${e.replace("//","")}`:`https://${t}${e}`:"https://cdn.rcd.gg/PreMiD/websites/N/Nuxt.js/assets/0.png"}let strings,oldLang=null;presence.on("UpdateData",(async()=>{let e={startTimestamp:browsingTimestamp,largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/N/Nuxt.js/assets/0.png"};const[t,s,a,n]=await Promise.all([presence.getSetting("lang").catch((()=>"en")),presence.getSetting("privacy"),presence.getSetting("buttons"),presence.getSetting("covers")]),i=document.querySelector('input[id="docsearch-input"]'),r=document.querySelector('meta[property="og:title"]')?.getAttribute("content")?.toLowerCase(),l=document.querySelector('[class="d-heading-title"]'),o=document.querySelector('[class*="-text-active"]'),c=!document.querySelector('[class*="docus-content"]'),{pathname:g,hostname:d,href:u}=document.location;if(oldLang===t&&strings||(oldLang=t,strings=await getStrings()),s)return e.details=strings.browse,void presence.setActivity(e);if(i?.value)return e.details=strings.search,e.state=i.value,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",void presence.setActivity(e);switch(g.split("/")[1].replace(/-/gm,"")){case"casestudies":c?e.details="Viewing all case studies":(e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.details="Reading a case studie about",e.state=r,e.buttons=[{label:"Read Case Studie",url:u}]);break;case"deployments":c?e.details="Viewing all deployment options":(e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.details=`Reading about ${r} nuxt deployment`,o?.textContent&&(e.state=o.textContent),e.buttons=[{label:strings.buttonReadArticle,url:u}]);break;case"announcements":c?e.details="Viewing all announcements":(e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.details="Reading announcement about",e.state=o?.textContent?`${r} - ${o.textContent}`:r,e.buttons=[{label:strings.buttonReadArticle,url:u}],e.largeImageKey=imgPath(document.querySelector('[class="object-cover"]')?.getAttribute("src"),d));break;case"docs":!c&&l?(e.details="Reading documentation about",e.state=`${document.querySelector('li[class="active"] > h5')?.textContent?.trim()} - ${l.textContent}`,e.buttons=[{label:strings.buttonReadArticle,url:u}]):e.details="Browsing the docs";break;case"examples":!c&&l?(e.details="Viewing an example about",e.state=`${document.querySelector('li[class="active"] > h5')?.textContent?.trim()} - ${l.textContent}`,e.buttons=[{label:strings.buttonReadArticle,url:u}]):e.details="Browsing examples";break;case"tutorials":c?e.details="Viewing all tutorials":(e.details="Reading a tutorial about",e.state=capitalizeFirstLetter(r),e.buttons=[{label:"View Tutorial",url:u}]);break;default:{const t={"":{details:strings.viewHome},design:{details:"Viewing design options"},faq:{details:"Viewing FAQs"},partners:{details:"Viewing partners"},support:{details:"Viewing the support page"},teams:{details:"Viewing the Nuxt.js team"},videocourses:{details:"Viewing all video coruses"},sponsors:{details:"Viewing all sponsors"},releases:{details:"Viewing all releases"},themes:{details:"Viewing all themes"},testimonials:{smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/reading.png",details:"Reading all testimonials",buttons:[{label:"Read Testimonials",url:u}]},showcase:{details:`Viewing ${document.querySelector('button[class*="rounded-md"]')?.textContent?.toLowerCase()} showcases`}};for(const[s,a]of Object.entries(t))g.replace(/-/gm,"").includes(s)&&(e={...e,...a})}}a&&!e.buttons&&"/"!==g&&(e.buttons=[{label:strings.buttonViewPage,url:u}]),!a&&e.buttons&&delete e.buttons,n||"https://cdn.rcd.gg/PreMiD/websites/N/Nuxt.js/assets/0.png"===e.largeImageKey||(e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/N/Nuxt.js/assets/0.png"),e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;