"use strict";var __webpack_exports__={};const presence=new Presence({clientId:"1240164154682249227"}),browsingTimestamp=Math.floor(Date.now()/1e3);let duration,currentTime,paused,playback;function getDetails(e,t,s,a){switch(t[0].toLowerCase()){case"browse":e.details="Browsing home page";break;case"continue-watching":e.details="Browsing Continue Watching playlist";break;case"my-list":e.details="Browisng my list";break;case"new-releases":e.details="Browsing new releases";break;case"recommended-new-shelf":e.details="Browsing trending page";break;case"series":e.details="Browsing series";break;case"search":getSearchDetails(e);break;default:getVideoDetails(e,s,a)}}function getSearchDetails(e){e.details="Searching for:",e.state=parseQueryParams().q||"...",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png"}function getVideoDetails(e,t,s){const a="main > section > section > div > div > div",i=document.querySelector(`${a} > h1`);if(null!==i){const n=document.querySelector(`${a} > form:nth-child(1) > select`);e.details="Viewing a series",e.state=null===n?i.textContent.trim():`${i.textContent.trim()}: ${n.options[n.selectedIndex].textContent.trim()}`,t&&(e.buttons=[{label:"View Series",url:s}])}else{const a=document.querySelector(".video-title"),i=document.querySelector(".context-link"),n=document.querySelector("#watch-info > div > div > div > div > div > h5 > a");if(!a)return;if(e.details=a.textContent.trim(),i||n){if(!i&&n)e.state=n.textContent.trim(),t&&(e.buttons=[{label:"Watch Video",url:s},{label:"View Series",url:n.getAttribute("href")}]);else if(i&&n){const r=n.textContent.trim().match(/(\d+)[^\d]+(\d+)/);e.state=i.textContent.trim(),r&&(e.details=`S${r[1]}E${r[2]}: ${a.textContent.trim()}`),t&&(e.buttons=[{label:"Watch Episode",url:s},{label:"View Series",url:i.href}])}}else t&&(e.buttons=[{label:"Watch Video",url:s}]);setTimestamps(e)}}function setTimestamps(e){delete e.startTimestamp,paused||([e.startTimestamp,e.endTimestamp]=presence.getTimestamps(currentTime,duration)),e.smallImageKey=paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png"}function parseQueryParams(){const e={},t=document.location.search.split("?")[1];if(t){const s=t.split("&");for(const t of s){const s=t.split("=");e[decodeURIComponent(s[0])]=decodeURIComponent(s[1]||"")}}return e}presence.on("iFrameData",(e=>{playback=!!e.duration,playback&&({duration,currentTime,paused}=e)})),presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/D/Dropout/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:t,href:s}=document.location,a=await presence.getSetting("buttons");getDetails(e,t.split("/").filter(Boolean),a,s),presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;