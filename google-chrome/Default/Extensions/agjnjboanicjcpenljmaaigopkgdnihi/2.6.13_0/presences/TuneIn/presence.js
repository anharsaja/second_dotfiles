var __webpack_exports__={};const presence=new Presence({clientId:"844108776793178122"}),startTimestamp=Math.floor(Date.now()/1e3);async function getStrings(){return presence.getStrings({play:"general.playing",pause:"general.paused",browse:"general.browsing",live:"general.live",listening:"general.listeningMusic"})}let strings,oldLang=null;presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/T/TuneIn/assets/logo.png",type:2,startTimestamp},[t,s,n,r]=await Promise.all([presence.getSetting("lang").catch((()=>"en")),presence.getSetting("timestamps"),presence.getSetting("cover"),presence.getSetting("privacy")]),a=document.querySelector("[data-icon='stop']"),i=document.querySelector("[data-testid='player-status-playing']");if(oldLang!==t&&(oldLang=t,strings=await getStrings()),a||i){if(r)e.details=strings.listening;else{const t=document.querySelector("#playerTitle").textContent,s=document.querySelector("#playerSubtitle").textContent,r=document.querySelector("#playerArtwork").getAttribute("src");t&&(e.details=t),s&&(e.state=s),r&&n&&(e.largeImageKey=r)}if(e.smallImageKey=a?"https://cdn.rcd.gg/PreMiD/resources/live.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText=a?strings.live:strings.play,!r&&s&&!a&&i){const t=document.querySelector("#scrubberElapsed").textContent,s=document.querySelector("#scrubberDuration").textContent;"00:00"===t&&""===s||([e.startTimestamp,e.endTimestamp]=presence.getTimestamps(presence.timestampFromFormat(t),presence.timestampFromFormat(s)))}}else e.details=strings.browse;presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;