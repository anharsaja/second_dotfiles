var __webpack_exports__={};const presence=new Presence({clientId:"1193411747898458132"}),browsingTimestamp=Math.floor(Date.now()/1e3),stateless="stateless";async function getStrings(){return presence.getStrings({viewHome:"general.viewHome",viewMember:"general.viewMember",viewChannel:"general.viewChannel",readingThread:"general.readingThread",browsing:"general.browsing",reading:"general.reading"})}let strings;function memberActivity(e,t,s){let i=(t.match(/\/member\/\w+/)||[t])[0];const n=t.substring(i.length).replaceAll(/\/(?=$)/gi,"");switch(i=`${document.location.protocol}//${document.location.host}${i}`,e.buttons=[{label:"View Profile",url:i}],n&&(e.largeImageKey=document.querySelector("#avatar > img").getAttribute("src"),e.state=document.querySelector("#member-title-primary > a").getAttribute("title")),n){case"/submissions":e.details="Viewing submissions by:",genericButton(e,"Submissions",s);break;case"/guestbook":e.details=`${strings.reading} guest book of:`,genericButton(e,"Guest Book",s);break;case"/jams":e.details="Viewing jam activity of:",genericButton(e,"Jams",s);break;case"/forum":e.details="Viewing threads by:",genericButton(e,"Threads",s);break;case"/subscribers":e.details="Viewing subscribers of:",genericButton(e,"Subscribers",s);break;case"/subscriptions":e.details="Viewing subscriptions of:",genericButton(e,"Subscriptions",s);break;case"/awards":e.details="Viewing trophies of:",genericButton(e,"Trophies",s);break;case"/upvoted":e.details="Viewing diamonds of:",genericButton(e,"Diamonds",s);break;case"/favorites":e.details="Viewing favorites of:",genericButton(e,"Favorites",s);break;case"/feed":e.details="Viewing feed of:",genericButton(e,"Feed",s);break;case"/activity":e.details="Viewing activity of:",genericButton(e,"Activity",s);break;default:n.startsWith("/post")?(e.details=`${strings.reading} custom post:`,e.state=document.querySelector('meta[name="description"]').getAttribute("content"),genericButton(e,"Post",s)):n.startsWith("/wall")?/\/post\/\d+/.test(n)?(e.details=`${strings.reading} wall post by:`,genericButton(e,"Post",s)):(e.details=`${strings.reading} wall posts by:`,genericButton(e,"Wall",s)):(e.details=strings.viewMember,e.state=document.querySelector('meta[name="og:profile:username"]').getAttribute("content"),e.largeImageKey=document.querySelector('meta[name="og:image:secure_url"]').getAttribute("content"))}}function genericFeed(e,t,s){e.details=strings.browsing,e.state||(e.state=t),genericButton(e,t,s)}function genericSubmission(e,t,s){e.state=document.querySelector("#resource-title-text > h1").textContent,e.largeImageKey=document.querySelector('link[rel="image_src"]').getAttribute("href"),genericButton(e,t,s)}function genericButton(e,t,s){const i={label:`View ${t}`,url:s};e.buttons?e.buttons.unshift(i):e.buttons=[i]}presence.on("UpdateData",(async()=>{const e={details:"Viewing page:",largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/P/Planet%20Minecraft/assets/logo.png",startTimestamp:browsingTimestamp};strings||(strings=await getStrings());const t=document.location.pathname.replaceAll(/\/$/g,"");if(""===t)e.state=strings.viewHome,delete e.details;else{const s=`${document.location.protocol}//${document.location.host}${document.location.pathname}`;if(t.startsWith("/member"))memberActivity(e,t,s);else if(t.startsWith("/account/manage")&&t.endsWith("/new"))e.details="Managing Submissions",e.state=document.querySelector("#manage_header").textContent;else switch(t){case"/projects":genericFeed(e,"Maps",s);break;case"/texture-packs":genericFeed(e,"Resource Packs",s);break;case"/skins":genericFeed(e,"Skins",s);break;case"/mob-skins":genericFeed(e,"Mob Skins",s);break;case"/data-packs":genericFeed(e,"Data Packs",s);break;case"/mods":genericFeed(e,"Mods",s);break;case"/blogs":genericFeed(e,"Blogs",s);break;case"/servers":genericFeed(e,"Servers",s);break;case"/bedrock-servers":genericFeed(e,"Bedrock Servers",s);break;case"/collections":genericFeed(e,"Collections",s);break;default:if(t.startsWith("/mod"))e.details="Viewing mod:",genericSubmission(e,"Mod",s);else if(t.startsWith("/blog"))e.details=`${strings.reading} a blog:`,genericSubmission(e,"Blog",s);else if(t.startsWith("/project"))e.details="Viewing map:",genericSubmission(e,"Map",s);else if(t.startsWith("/texture-pack"))e.details="Viewing a resource pack:",genericSubmission(e,"Resource Pack",s);else if(t.startsWith("/skin"))e.details="Viewing skin:",genericSubmission(e,"Skin",s);else if(t.startsWith("/mob-skin"))e.details="Viewing mob skin:",genericSubmission(e,"Mob Skin",s);else if(t.startsWith("/data-pack"))e.details="Viewing data pack:",genericSubmission(e,"Data Pack",s);else if(t.startsWith("/server"))e.details="Viewing server:",genericSubmission(e,"Server",s);else if(t.startsWith("/bedrock-server"))e.details="Viewing bedrock server:",genericSubmission(e,"Server",s);else if(/\/tickets\/\d+/.test(t))e.details=`${strings.reading} ticket:`,e.state=document.querySelector("#ticket_view > h1").textContent,genericButton(e,"Ticket",s);else if(t.startsWith("/rules"))e.details=`${strings.reading} the rules.`,e.buttons=[{label:"Read Rules",url:s}];else if(t.startsWith("/chat"))e.details=strings.viewChannel,e.state=document.querySelector("span.channel_name").textContent,e.buttons=[{label:"Open Chat",url:s}];else if(t.startsWith("/forums"))if(t.endsWith("/new"))e.details="Writing a thread...",e.state=stateless;else{const t=document.querySelector("#content_graphic_header > *:first-child"),{length:i}=t.children;if(t.lastChild.nodeType===Node.TEXT_NODE)e.state=t.lastChild.textContent,genericFeed(e,"Forums",s);else if("#current"===t.lastChild.getAttribute("href")){let n;if(i<1)n=t.textContent;else{n="";for(let e=0;e<i;e++){const s=t.children[e];if("i"!==s.tagName.toLowerCase()){const{childNodes:t}=s;for(const s of t)s.nodeType===Node.TEXT_NODE&&(n+=(e>0?" > ":"")+s.textContent)}}}e.state=n,genericFeed(e,"Forums",s)}else e.details=strings.readingThread,e.state=document.querySelector("head > title"),genericButton(e,"Thread",s)}}}e.state?e.state===stateless&&delete e.state:e.state=document.querySelector("head > title").textContent,presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;