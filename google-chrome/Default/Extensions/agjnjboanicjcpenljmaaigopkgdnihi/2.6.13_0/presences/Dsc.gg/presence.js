var __webpack_exports__={};const presence=new Presence({clientId:"843711390539841577"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{let e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/D/Dsc.gg/assets/logo.jpeg",details:"Viewing üì∞ page:",state:"üõë Unsupported"};const{pathname:t,href:s,host:i}=document.location,[n,a]=await Promise.all([presence.getSetting("timestamp"),presence.getSetting("buttons")]),o={"/about":{details:"üìö About",buttons:[{label:"View Page",url:s}]},"/premium":{details:"üíé Premium",buttons:[{label:"View Page",url:s}]}};for(const[s,i]of Object.entries(o))t.includes(s)&&(e={...e,...i});if("dsc.gg"===i){if("/"===t)e.state="üè° Home","Search Results"===document.querySelector("h1.text-5xl")?.textContent&&(e.details=`üîé Searching for: ${document.querySelector("input.py-4")?.getAttribute("searching")}`,e.state=`${document.querySelector("h2.text-lg")?.textContent}`,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png");else if("/dashboard"===t)e.details="Viewing ‚öôÔ∏è dashboard",e.state="üîó Links","Create a new link"===document.querySelector("h1.text-2xl")?.textContent&&(e.details="New link creation",e.state=`${document.querySelector("input.p-2")?.getAttribute("value")||"Loading..."}`);else if(t.includes("/dashboard/l/")){const[,s]=t.split("/dashboard/l/");e.details=`Editing üîó ${s.split("/")[0]} link`,e.state=`üèì Tab: ${s.split("/")[1]}`,e.buttons=[{label:"Visit Link",url:`https://dsc.gg/${s.split("/")[0]}`}]}}else if("docs.dsc.gg"===i)switch(t){case"/":e.details="Viewing üìë Documentation",e.state=`üåê Content: ${location.href.includes("#")?location.href.replace("https://docs.dsc.gg/#"," "):"üìß Introduction"}`;break;case"/endpoints":e.details="Viewing üîó endpoints",e.state=`üåê Content: ${location.href.includes("#")?location.href.replace("https://docs.dsc.gg/endpoints#"," "):"None"}`;break;case"/widgets":e.details="Viewing üñºÔ∏è widgets",e.state=`üåê Content: ${location.href.includes("#")?location.href.replace("https://docs.dsc.gg/widgets#"," "):"None"}`}a||delete e.buttons,n&&(e.startTimestamp=browsingTimestamp),e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;