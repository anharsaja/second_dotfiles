var __webpack_exports__={};function getQuery(){const e=location.search.split("?",2);return e&&e.length>0&&e[1]?e[1].split("&").reduce((function(e,t){const a=t?t.split("=",2):null;return null===a?e:Object.assign(e,{[a[0]]:a[1]})}),{}):{}}const pages=[{middleware:e=>!!e.location.pathname.match(/^\/(movie|serie)\//i),exec:(e,t,{strings:a,images:n,frame:s})=>{if(!e)return null;const[,r]=location.pathname.match(/^\/(movie|serie)\//i);if(!r)return null;const i="serie"===r?"series":"movie"===r?"movie":"other";return t.details=s?"movie"===i?a.watchingMovie:"series"===i?a.watchingSeries:a.playing:a.browsing,t.state=document.querySelector(".single-content.movie .title>h1")?.textContent,s?(t.details=a.playing,t.smallImageKey=s.paused?n.PAUSE:n.PLAY,t.smallImageText=`${a.playing} ${t.state}`,s.paused?(t.startTimestamp&&delete t.startTimestamp,t.endTimestamp&&delete t.endTimestamp):[t.startTimestamp,t.endTimestamp]=e.getTimestamps(s.currentTime,s.duration)):(t.smallImageKey=n.BROWSE,t.startTimestamp&&delete t.startTimestamp,t.endTimestamp&&delete t.endTimestamp),t.buttons=[{label:a[{movie:"buttonViewMovie",series:"buttonViewSeries",other:"buttonViewPage"}[i]],url:document.location.href}],t}},{middleware:e=>!!e.location.pathname.match(/^\/(cat)\//i),exec:(e,t,{strings:a,images:n})=>e?(t.details=a.searching,0===document.querySelector(".category .arg > .type")?.textContent.toLowerCase().indexOf("genre")?t.state=`${a.viewGenre} ${document.querySelector(".category .arg > .q.arg_category")?.textContent}`:delete t.state,t.smallImageKey=n.SEARCH,t):null},{middleware:e=>!!e.location.hostname.match(/streamkiste/i),exec:(e,t,{strings:a,images:n})=>e?(t.details=a.browsing,delete t.state,t.smallImageKey=n.BROWSE,t):null}],presence=new Presence({clientId:"825531268581818419"});let lastPageIndex,currentLang,localizedStrings,frameData;const IMAGES={LOGO:"https://cdn.rcd.gg/PreMiD/websites/S/StreamKiste/assets/0.png",PLAY:"https://cdn.rcd.gg/PreMiD/resources/play.png",PAUSE:"https://cdn.rcd.gg/PreMiD/resources/pause.png",BROWSE:"https://cdn.rcd.gg/PreMiD/websites/S/StreamKiste/assets/1.png",SEARCH:"https://cdn.rcd.gg/PreMiD/resources/search.png"};presence.on("iFrameData",(e=>{frameData=e})),presence.on("UpdateData",(async()=>{const e=await presence.getSetting("lang").catch((()=>"en"));e!==currentLang&&(currentLang=e,localizedStrings=await presence.getStrings({browsing:"general.browsing",watchingMovie:"general.watchingMovie",watchingSeries:"general.watchingSeries",buttonViewMovie:"general.buttonViewMovie",buttonViewSeries:"general.buttonViewSeries",buttonViewPage:"general.buttonViewPage",viewGenre:"general.viewGenre",playing:"general.playing",searching:"general.search",searchFor:"general.searchFor"},e));const t=getQuery(),a=pages.findIndex((e=>e.middleware(window,[t]))),n=pages[a];n&&Promise.resolve(n.exec(presence,{largeImageKey:IMAGES.LOGO},{frame:frameData,strings:localizedStrings,query:t,images:IMAGES})).then((e=>(lastPageIndex&&lastPageIndex!==a&&pages[lastPageIndex]&&"function"==typeof pages[lastPageIndex].destroy&&(pages[lastPageIndex].destroy(e),lastPageIndex=a),e?(e.details&&presence.setActivity(e),e.buttons&&0===e.buttons.length?delete e.buttons:e.buttons=e.buttons?.slice(0,2)):presence.setActivity({largeImageKey:IMAGES.LOGO,state:localizedStrings.browsing}),e))).catch(presence.error)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;