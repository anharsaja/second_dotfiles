var __webpack_exports__={};const presence=new Presence({clientId:"681116862930747520"});let oldLang,newLang,strings,previous,current,timestamp=0;async function getStrings(e){return presence.getStrings({reading:"general.reading",page:"general.page"},e)}function getDocumentHeight(){const{body:e}=document,{documentElement:t}=document;return Math.max(e.scrollHeight,e.offsetHeight,t.clientHeight,t.scrollHeight,t.offsetHeight)}function isLanguageCode(e){return/^(?<lang>[a-z]{2})(-(?<region>[A-Z]{2}))?$/.test(e)}function isNewLocation(e,t){return!e||!t||e.hostname!==t.hostname||e.pathname!==t.pathname||e.protocol!==t.protocol||e.port!==t.port}presence.on("UpdateData",(async()=>{const e=current.pathname.split("/").slice(1),t={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/K/Keep%20Talking%20and%20Nobody%20Explodes/assets/logo.png"};if(oldLang=newLang,newLang=await presence.getSetting("lang").catch((()=>"en")),strings&&oldLang===newLang||(strings=await getStrings(newLang)),current=window.location,"bombmanual"===current.hostname.split(".")[0])switch(isLanguageCode(e[0])?e[1]:e[0]){case"web":case"print":{(0===timestamp||isNewLocation(previous,current))&&(timestamp=Date.now());const e=[...document.querySelectorAll(".page")],a=Math.round(window.scrollY/getDocumentHeight()*(e.length-1));t.details=document.querySelector(".title").textContent.replace(/\n|\t/g,""),t.smallImageText=strings.reading,t.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",t.startTimestamp=timestamp,t.state=0===a?document.querySelector(".versioning").firstChild.textContent:`${strings.page} ${a+1} / ${e.length}: ${e[a].children[0].children[1].textContent}`;break}case"how-to-play-pc.html":case"how-to-play-mobile.html":case"how-to-play-switch.html":case"how-to-play-xbox.html":case"how-to-play-playstation.html":case"how-to-play-vr.html":case"how-to-play-psvr.html":case"how-to-play-gear-vr.html":case"how-to-play-oculus-go.html":case"how-to-play-oculus-quest.html":case"how-to-play-daydream.html":case"language":t.details=document.title;break;default:return presence.setActivity()}else switch(e[0]){case"contact-us":case"privacy-policy":t.details=document.querySelector("h1")?.textContent??document.title;break;case"presskit":t.details="Presskit";break;case"how-to-play-remotely":t.details="How To Play Remotely";break;case"mobile":t.details="Mobile App";break;case"translation-faq":t.details="Translation FAQ";break;case"faq":t.details="FAQ",window.location.hash?.length>0&&(t.state=document.querySelector(window.location.hash).children[0].children[0].children[0].children[0].children[0].textContent);break;case"commercial-license":t.details="Commercial Licensing";break;case"non-commercial-use":t.details="Non-Commercial Use";break;default:return presence.setActivity()}presence.setActivity(t),previous=current}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;