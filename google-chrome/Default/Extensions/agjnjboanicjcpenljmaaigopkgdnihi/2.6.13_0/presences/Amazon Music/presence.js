var __webpack_exports__={};const presence=new Presence({clientId:"808756700022702120"});async function getStrings(){return presence.getStrings({play:"general.playing",pause:"general.paused",viewPlaylist:"general.buttonViewPlaylist",viewArtist:"general.buttonViewArtist"},await presence.getSetting("lang").catch((()=>"en")))}let strings,oldLang=null;presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/A/Amazon%20Music/assets/logo.png"},[t,s,a,n]=await Promise.all([presence.getSetting("buttons"),presence.getSetting("lang").catch((()=>"en")),presence.getSetting("showPlaylist"),presence.getSetting("cover")]);if(oldLang===s&&strings||(oldLang=s,strings=await getStrings()),navigator.mediaSession.metadata){const s="paused"===navigator.mediaSession.playbackState;if(!document.querySelector("div._2kGtEHAlQ5t5sY3jvz-wwl > div._1Wgs9MKFGuL58IFgKSM811 > div._2HXusrWftEtKAYukKt5IuO > music-button")){const s=document.querySelector("music-app.hydrated music-horizontal-item")?.shadowRoot.querySelector("div > div > span")?.children[2]?.querySelector("a")?.href,n=document.querySelector("music-app.hydrated music-horizontal-item")?.shadowRoot.querySelector("div > div > span")?.children[0]?.querySelector("a")?.href;a&&t&&n&&s?e.buttons=[{label:strings.viewArtist,url:n},{label:strings.viewPlaylist,url:s}]:n&&t&&(e.buttons=[{label:strings.viewArtist,url:n}])}e.details=navigator.mediaSession.metadata.title,e.state=navigator.mediaSession.metadata.artist,e.smallImageKey=s?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText=s?strings.pause:strings.play,e.endTimestamp=Date.now()/1e3+presence.timestampFromFormat(document.querySelector("div.sXaGQzYs9WqImj2uxDCBs > span:nth-child(2)").textContent.match(/[0-9:]+/)[0]),n&&(e.largeImageKey=navigator.mediaSession.metadata.artwork[0].src),s&&(delete e.startTimestamp,delete e.endTimestamp),presence.setActivity(e)}else e.details="Browsing...",presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;