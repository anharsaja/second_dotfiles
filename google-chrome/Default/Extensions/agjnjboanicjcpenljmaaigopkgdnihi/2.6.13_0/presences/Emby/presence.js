"use strict";var __webpack_exports__={};const semver=/^[v^~<>=]*?(\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+))?(?:-([\da-z\-]+(?:\.[\da-z\-]+)*))?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i,validateAndParse=e=>{if("string"!=typeof e)throw new TypeError("Invalid argument expected string");const a=e.match(semver);if(!a)throw new Error(`Invalid argument not valid semver ('${e}' received)`);return a.shift(),a},isWildcard=e=>"*"===e||"x"===e||"X"===e,tryParse=e=>{const a=parseInt(e,10);return isNaN(a)?e:a},forceType=(e,a)=>typeof e!=typeof a?[String(e),String(a)]:[e,a],compareStrings=(e,a)=>{if(isWildcard(e)||isWildcard(a))return 0;const[t,s]=forceType(tryParse(e),tryParse(a));return t>s?1:t<s?-1:0},compareSegments=(e,a)=>{for(let t=0;t<Math.max(e.length,a.length);t++){const s=compareStrings(e[t]||"0",a[t]||"0");if(0!==s)return s}return 0},compareVersions=(e,a)=>{const t=validateAndParse(e),s=validateAndParse(a),n=t.pop(),r=s.pop(),i=compareSegments(t,s);return 0!==i?i:n&&r?compareSegments(n.split("."),r.split(".")):n||r?n?-1:1:0},compare=(e,a,t)=>{assertValidOperator(t);const s=compareVersions(e,a);return operatorResMap[t].includes(s)},operatorResMap={">":[1],">=":[0,1],"=":[0],"<=":[-1,0],"<":[-1],"!=":[-1,1]},allowedOperators=Object.keys(operatorResMap),assertValidOperator=e=>{if("string"!=typeof e)throw new TypeError("Invalid operator type, expected string but got "+typeof e);if(-1===allowedOperators.indexOf(e))throw new Error(`Invalid operator, expected one of ${allowedOperators.join("|")}`)};let version,showMediaTimestamp=!1;const uploadedMediaCache=new Map,EMBY_URL="emby.media",PRESENCE_ART_ASSETS={download:"https://cdn.rcd.gg/PreMiD/resources/downloading.png",live:"https://cdn.rcd.gg/PreMiD/resources/live.png",logo:"https://cdn.rcd.gg/PreMiD/websites/E/Emby/assets/0.png",pause:"https://cdn.rcd.gg/PreMiD/resources/pause.png",play:"https://cdn.rcd.gg/PreMiD/resources/play.png",read:"https://cdn.rcd.gg/PreMiD/resources/reading.png",search:"https://cdn.rcd.gg/PreMiD/resources/search.png",write:"https://cdn.rcd.gg/PreMiD/resources/writing.png"},presenceData={largeImageKey:PRESENCE_ART_ASSETS.logo};let presence,ApiClient;async function createImageBlob(){const e=presenceData.largeImageKey;isPrivateIP(e)&&(uploadedMediaCache.has(e)?presenceData.largeImageKey=uploadedMediaCache.get(e):await fetch(e).then((e=>e.blob())).then((a=>{const t=new FileReader;t.readAsDataURL(a),t.onloadend=()=>{const a=t.result;uploadedMediaCache.set(e,a),presenceData.largeImageKey=a}})))}function handleOfficialWebsite(){switch(presenceData.details="At emby.media",location.pathname){case"/":case"/index.html":presenceData.state="On landing page";break;case"/about.html":presenceData.state="On about page";break;case"/blog.html":presenceData.state="Reading the blog",presenceData.smallImageKey=PRESENCE_ART_ASSETS.read;break;case"/download.html":presenceData.state="On downloads",presenceData.smallImageKey=PRESENCE_ART_ASSETS.download;break;case"/premiere.html":case"/premiere-ext.html":case"/premiereterms.html":presenceData.state="Learning about premiere";break;case"/support.html":presenceData.state="On support page";break;default:location.pathname.startsWith("/community")?presenceData.state="On community page":document.querySelector(".w-pagehead > h1")&&"Emby Blog"===document.querySelector(".w-pagehead > h1").textContent&&(presenceData.state="Reading the blog",presenceData.smallImageKey=PRESENCE_ART_ASSETS.read)}}async function getApiClient(){return(await presence.getPageVariable("ApiClient")).ApiClient}async function isEmbyWebClient(){return ApiClient??=await getApiClient(),!("object"!=typeof ApiClient||!ApiClient._appName||"Emby Web"!==ApiClient._appName)}function embyBasenameURL(){const{pathname:e}=location;return`${location.origin}${e.replace(e.split("/").slice(-2).join("/"),"")}`}function mediaPrimaryImage(e){return`${embyBasenameURL()}/emby/Items/${e}/Images/Primary?height=256`}async function handleAudioPlayback(){try{presenceData.type=2;const e=document.querySelector("audio"),a=/\/Audio\/(\w+)\/universal/.exec(e.src);if(!a)return void presence.error("Could not obtain audio itemId");const[,t]=a,s=await obtainMediaInfo(t);presenceData.details=`Listening to ${s.Name??"Unknown title"}`,presenceData.state=`By ${s.AlbumArtist??"Unknown artist"}`,await presence.getSetting("showThumbnails")&&document.querySelector(".nowPlayingBarImage").style.backgroundImage&&(presenceData.largeImageKey=mediaPrimaryImage(t),createImageBlob()),e.paused?(presenceData.smallImageKey=PRESENCE_ART_ASSETS.pause,presenceData.smallImageText="Paused",delete presenceData.endTimestamp):(presenceData.smallImageKey=PRESENCE_ART_ASSETS.play,presenceData.smallImageText="Playing",showMediaTimestamp?[presenceData.startTimestamp,presenceData.endTimestamp]=presence.getTimestampsfromMedia(e):delete presenceData.endTimestamp)}catch(e){}}function getUserId(){try{return ApiClient._currentUser.Id}catch(e){const a=JSON.parse(localStorage.getItem("servercredentials3")).Servers;return(1===a.length?a[0]:a.find((e=>e.Id===new URLSearchParams(location.hash.split("?")[1]).get("serverId")))).UserId}}const mediaInfoCache=new Map;async function obtainMediaInfo(e){if(mediaInfoCache.has(e))return mediaInfoCache.get(e);let a,t;compare(version,"4.7.0",">")?(a=ApiClient._serverInfo,t=a?.Users?.[1]?.AccessToken):(a=ApiClient._serverInfo,t=a?.AccessToken),t||(ApiClient=await getApiClient(),compare(version,"4.7.0",">")?(a=ApiClient._serverInfo,t=a?.Users?.[1]?.AccessToken):(a=ApiClient._serverInfo,t=a?.AccessToken));const s=`${embyBasenameURL()}emby/Users/${getUserId()}/Items/${e.replace(/\//gm,"")}?X-Emby-Client=${ApiClient._appName.replace(/ /gm,"_")}&X-Emby-Device-Name=${ApiClient._deviceName}&X-Emby-Device-Id=${ApiClient._deviceId}&X-Emby-Client-Version=${ApiClient._appVersion}&X-Emby-Token=${t}`,n=await fetch(s.replace(/ /gm,"_")),r=await n.json();return mediaInfoCache.set(e,r),mediaInfoCache.get(e)}async function handleVideoPlayback(){const e=document.querySelector("[data-type='video-osd']")||document.querySelector(".htmlVideoPlayerContainer");if(null===e)return;getApiClient();const a=document.querySelector("video");let t,s,n=PRESENCE_ART_ASSETS.logo;const r=/\/Items\/(\d+)\//.exec(document.querySelector(".pageTitle")?.style.backgroundImage)||/\/Items\/(\d+)\//.exec(document.querySelector(".itemBackdrop")?.style?.backgroundImage)||/\/[0-9]+\//.exec(document.querySelector(".htmlVideoPlayer")?.src);if(!r)return void presence.error("Could not obtain video itemId");const i=await obtainMediaInfo(r[1]||r[0]);if(i&&"string"!=typeof i){switch(i.Type){case"Movie":t="Watching a Movie",s=i.Name,await presence.getSetting("showThumbnails")&&(n=mediaPrimaryImage(i.Id));break;case"Series":t=`Watching ${i.Name}`,s=e.querySelector("h3.videoOsdTitle").textContent,await presence.getSetting("showThumbnails")&&(n=mediaPrimaryImage(i.Id));break;case"TvChannel":t="Watching Live Tv",s=i.Name;break;default:t=`Watching ${i.Type}`,s=i.Name}presenceData.largeImageKey=n,createImageBlob(),i&&"TvChannel"===i.Type?(presenceData.type=3,presenceData.smallImageKey=PRESENCE_ART_ASSETS.live,presenceData.smallImageText="Live TV"):a.paused?(presenceData.type=3,presenceData.smallImageKey=PRESENCE_ART_ASSETS.pause,presenceData.smallImageText="Paused",delete presenceData.endTimestamp):(presenceData.type=3,presenceData.smallImageKey=PRESENCE_ART_ASSETS.play,presenceData.smallImageText="Playing",showMediaTimestamp?[presenceData.startTimestamp,presenceData.endTimestamp]=presence.getTimestampsfromMedia(a):delete presenceData.endTimestamp)}else t="Watching unknown content",s="No metadata could be obtained";presenceData.details=t,presenceData.state=s,presenceData.state||delete presenceData.state}async function handleItemDetails(){const e=await obtainMediaInfo(new URLSearchParams(location.hash.split("?")[1]).get("id"));if(delete presenceData.startTimestamp,delete presenceData.endTimestamp,e){if("string"==typeof e)return;switch(presenceData.details=`Browsing details of: ${e.Name}`,e.Type){case"Movie":presenceData.state=`${e.Type} ─ ${e.OriginalTitle} (${e.ProductionYear})`;break;case"Series":presenceData.state=`${e.Type} ─ (${e.Status})`;break;case"Season":presenceData.state=`${e.Type} ─ ${e.SeriesName}`;break;case"Episode":presenceData.state=`${e.Type} ─ ${e.SeriesName} - ${e.SeasonName}`;break;case"Person":{let a="Description not available";e.Overview&&(a=e.Overview.substr(0,40)+(e.Overview.length>40?"...":"")),presenceData.state=`${e.Type} ─ ${a}`;break}case"MusicAlbum":presenceData.state=`${e.Type} ─ ${e.RecursiveItemCount} songs`;break;case"MusicArtist":case"TvChannel":presenceData.state=`${e.Type} ─ No further information available`;break;default:presenceData.state="No further information available"}}else presenceData.details="Browsing details of an item",presenceData.state="Could not get item details"}async function handleWebClient(){const e=document.body.querySelector("audio");if(e&&e.classList.contains("mediaPlayerAudio")&&document.querySelector(".nowPlayingBarInfoContainer")&&e.src)return void await handleAudioPlayback();presenceData.details="At web client";const a=location.hash.split("?")[0].substring(3);switch(a){case"startup/login.html":case"startup/manuallogin.html":case"startup/forgotpassword.html":presenceData.state="Logging in";break;case"home":presenceData.state="At home";break;case"search":presenceData.state="Searching",presenceData.smallImageKey=PRESENCE_ART_ASSETS.search;break;case"settings":case"settings/display.html":case"settings/homescreen.html":case"settings/playback.html":case"settings/subtitles.html":case"settings/profile.html":case"settings/password.html":case"settings/keyboard.html":presenceData.state="On user preferences";break;case"dashboard":case"dashboardgeneral.html":case"users":case"useredit.html":case"userlibraryaccess.html":case"userparentalcontrol.html":case"userpassword.html":case"supporterkey.html":case"librarysetup/library.html":case"librarysetup/advanced.html":case"network":case"transcoding":case"syncactivity.html":case"syncsettings.html":case"configurationpage":case"devices":case"devices/device.html":case"devices/cameraupload.html":case"livetvsetup/livetvstatus.html":case"livetvsetup/livetvtuner.html":case"livetvsetup/guideprovider.html":case"livetvsetup/livetvsettings.html":case"logs":case"notificationsettings.html":case"plugins/plugins.html":case"plugins/plugincatalog.html":case"plugins/addplugin.html":case"scheduledtasks":case"scheduledtask":case"apikeys":presenceData.state="On admin dashboard";break;case"movies":presenceData.state="Browsing movies";break;case"tv":presenceData.state="Browsing tv series";break;case"music":presenceData.state="Browsing music";break;case"metadatamanager":presenceData.state="Editing media metadata";break;case"item":await handleItemDetails();break;case"videoosd/videoosd.html":await handleVideoPlayback();break;default:"dlg"!==a.substr(0,3)&&presence.info(`path: ${a}`)}}async function setDefaultsToPresence(){presenceData.largeImageKey=PRESENCE_ART_ASSETS.logo,presenceData.smallImageKey&&delete presenceData.smallImageKey,presenceData.smallImageText&&delete presenceData.smallImageText,presenceData.startTimestamp&&delete presenceData.startTimestamp,isNaN(presenceData.endTimestamp)&&delete presenceData.endTimestamp,await presence.getSetting("showTimestamps")&&(presenceData.startTimestamp=Date.now())}async function updateData(){showMediaTimestamp=await presence.getSetting("showMediaTimestamps"),await setDefaultsToPresence();let e=!1;const a=ApiClient?._appVersion??(await getApiClient())?._appVersion;version&&version===a||(version=a),location.host.toLowerCase()===EMBY_URL?(e=!0,handleOfficialWebsite()):await isEmbyWebClient()&&(e=!0,await handleWebClient()),presenceData.smallImageKey!==PRESENCE_ART_ASSETS.play&&presenceData.smallImageKey!==PRESENCE_ART_ASSETS.pause||delete presenceData.startTimestamp,e&&(presenceData.largeImageKey||(presenceData.largeImageKey=PRESENCE_ART_ASSETS.logo),presenceData.details?presence.setActivity(presenceData):presence.setActivity())}async function init(){let e=!1,a=!1;if(location.host===EMBY_URL)e=!0,presence.info("Emby website detected");else try{for(const t of JSON.parse(localStorage.getItem("servercredentials3")).Servers)Date.now()-new Date(t.DateLastAccessed).getTime()<3e4&&(e=!0,a=!0)}catch(a){e=!1}e&&(presence=new Presence({clientId:"671807692297207828"}),presence.on("UpdateData",updateData),a&&presence.info("Emby web client detected"))}function isPrivateIP(e){return/^http:\/\/(192\.168\.|10\.|172\.(1[6-9]|2[0-9]|3[01])\.|127\.0\.0\.1|localhost)/.test(e)}init();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;