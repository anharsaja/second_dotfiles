var __webpack_exports__={};const presence=new Presence({clientId:"1003206856958816296"}),browsingTimestamp=Math.floor(Date.now()/1e3);function getEl(e){return e?.closest("p")?.querySelector(".resulth > span")?.textContent??e?.closest("p")?.querySelector(".resulth")?.textContent??"Unknown"}presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/D/Discord%20ID/assets/logo.png",startTimestamp:browsingTimestamp},{hostname:t,href:s}=document.location,[a,r,c]=await Promise.all([presence.getSetting("privacy"),presence.getSetting("covers"),presence.getSetting("idAndUsername")]);switch(!0){case t.includes("wiki.discord.id"):{const t=document.querySelector('[placeholder="Search contentâ€¦"]');switch(!0){case a:e.details="Browsing the wiki";break;case!!t.value:e.details="Searching for",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png",e.state=t.value;break;default:e.details="Reading",e.state=document.querySelector('[data-testid="page.title"]').textContent,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png"}break}case"discord.id"===t:if(a)e.details="Browsing Lookup";else{const t=getEl(document.querySelector(".fas.fa-user")),a=getEl(document.querySelector(".fas.fa-hashtag")),r=document.querySelectorAll(".badgepng");if(document.querySelector("#inputid").value&&!document.querySelector("#captchaPopup___BV_modal_header_"))switch(r.length>0&&(e.smallImageKey=`${s}${r[r.length-1].getAttribute("src")}`,e.smallImageText=`Created on: ${getEl(document.querySelector(".fas.fa-asterisk"))}`),e.largeImageKey=document.querySelector(".avyimg")??"https://cdn.rcd.gg/PreMiD/websites/D/Discord%20ID/assets/logo.png",!0){case c:e.details=a?"Viewing user":"Viewing IDs";break;case!!t&&!!a:e.details="Viewing user",e.state=`${a} (${t})`;break;case!!t&&!a:e.details="Viewing id",e.state=t}else e.details="Browsing"}}r||"https://cdn.rcd.gg/PreMiD/websites/D/Discord%20ID/assets/logo.png"===e.largeImageKey||(e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/D/Discord%20ID/assets/logo.png"),e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;