var __webpack_exports__={};const presence=new Presence({clientId:"937393073539911730"});let isInGame=!1,timeStarted=Date.now();presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/D/dod%20Games/assets/logo.png"},t=document.querySelector("#component_top_right_loginasname_text").textContent,n=document.querySelectorAll("#topBarDownLink"),o=["drawit","quiz","agonia","tichu"];let r=0;function a(t){e.buttons=[{label:"ŒïŒØœÉŒøŒ¥ŒøœÇ",url:t}]}function c(n,o){switch(isInGame||(timeStarted=Date.now(),isInGame=!0),n){case"drawit":{const n=document.querySelectorAll("#playersContainer .player");for(let o=0;o<n.length;o++)n[o].querySelector(".name").textContent===t&&("none"!==document.querySelector("#drawtools").style.display&&(e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/writing.png",e.smallImageText="ŒñœâŒ≥œÅŒ±œÜŒØŒ∂ŒµŒπ"),e.state=`Œ£Œ∫ŒøœÅ: ${n[o].querySelector(".score").textContent} | ŒìœçœÅŒøœÇ: ${document.querySelector("#round b").textContent.replaceAll(" ","")} | ŒòŒ≠œÉŒ∑ #${parseInt(n[o].getAttribute("index"))+1}/${n.length}`);n.length<10&&o&&a(o),e.details="Œ†Œ±ŒØŒ∂ŒµŒπ ŒñœâŒ≥œÅŒ¨œÜŒπœÉŒ≠ Œ§Œø",e.startTimestamp=timeStarted;break}case"quiz":{const n=document.querySelectorAll("#playersContainer .numberAndPlayerContainer");for(let o=0;o<n.length;o++)n[o].querySelector(".quiz_playerName").textContent===t&&(e.state=`Œ£Œ∫ŒøœÅ: ${n[o].querySelector(".quiz_playerPoints").textContent} | ŒìœçœÅŒøœÇ: ${parseInt(document.querySelector("#countRound").textContent)||"‚Äì"} | ŒòŒ≠œÉŒ∑ #${parseInt(n[o].querySelector(".quiz_playerNumber").textContent)}/${n.length}`);o&&a(o),e.details="Œ†Œ±ŒØŒ∂ŒµŒπ ŒöŒøœÖŒØŒ∂",e.startTimestamp=timeStarted;break}case"agonia":{const t=parseInt(document.querySelector("#agonia_content").className.match(/\d+/g)[0]),n=["agonia_player1","agonia_player2","agonia_player3","agonia_player4"],r={};for(const e of n){const t=document.querySelector(`#${e}`);if(t){const e=t.querySelector(".gnh_name").textContent;e&&(r[e]={score:t.querySelector(".gnh_score_text").textContent,winner:!1})}}const c="none"!==document.querySelector("#gameover_content").parentElement.style.display;if(c){const e=["gameover_user1","gameover_user2","gameover_user3","gameover_user4"];for(const t of e){const e=document.querySelector(`#${t}`);if(e&&"none"!==e.querySelector(".gameover_userphotowin").style.display){const t=e.getAttribute("shownname");t in r&&(r[t].winner=!0)}}}let s="";for(const e in r){const t=r[e];s+=`${t.winner?" üèÜ ":""}${e}: ${t.score} ‚Äì `}Object.keys(r).length===t||c?e.state=s.substring(0,s.length-3):(e.state=`${Object.keys(r).length}/${t} œÄŒ±ŒØŒ∫œÑŒµœÇ...`,o&&a(o)),e.details=`Œ†Œ±ŒØŒ∂ŒµŒπ ŒëŒ≥œâŒΩŒØŒ± | üí™üèª ${document.querySelector(".mytr").getAttribute("elo")}`,e.startTimestamp=timeStarted;break}case"tichu":{const t=["bottom","up","right","left"],n=[],r=[],c={};for(const e of t){const t=document.querySelector(`#nickholder_${e} .playerName`).textContent;t&&(c[e]={name:t,bet:null})}for(const e of["up","left","right"]){if(!(e in c))continue;const t=document.querySelector(`#nickholder_${e} #tichugrand`);"none"!==t.style.display&&(c[e].bet=t.className)}let s=document.querySelector("#btnTichuToggle");"none"!==s.style.display&&(c.bot.bet="tichu"),s=document.querySelector("#btnGrandToggle"),"none"!==s.style.display&&(c.bot.bet="grand");for(const e in c){const t=c[e];(["bottom","up"].includes(e)?n:r).push(`${"tichu"===t.bet?"üü†":"grand"===t.bet?"üî¥":""}${t.name}`)}2===n.length&&2===r.length?e.state=`(${n[0]}, ${n[1]}) ${document.querySelector("#txtMyTeamScore").textContent} ‚Äì ${document.querySelector("#txtOpTeamScore").textContent} (${r[0]}, ${r[1]})`:(e.state=`${n.length+r.length}/4 œÄŒ±ŒØŒ∫œÑŒµœÇ...`,o&&a(o)),e.details=`Œ†Œ±ŒØŒ∂ŒµŒπ Tichu | üí™üèª ${document.querySelector(".mytr").getAttribute("elo")}`,e.startTimestamp=timeStarted;break}}}for(const e of n){e.textContent.includes("&room=")&&r++;for(const t of o)e.textContent.includes(`game=${t}&room=`)&&c(t,e.textContent)}if(!r){const e=document.querySelectorAll("#windowLobbyTab2.windowLobbyTabSelected > .windowTabText > .dodlangspan");for(const t of e)t.textContent.includes("ŒñœâŒ≥œÅŒ¨œÜŒπœÉŒµ")?(r++,c("drawit")):t.textContent.includes("ŒöŒøœÖŒØŒ∂")?(r++,c("quiz")):t.textContent.includes("ŒëŒ≥œâŒΩŒØŒ±")?(r++,c("agonia")):t.textContent.includes("Tichu")&&(r++,c("tichu"))}r||(isInGame=!1),isInGame?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;