var __webpack_exports__={};const presence=new Presence({clientId:"844109006679179265"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/T/TV%20Time/assets/logo.png",startTimestamp:browsingTimestamp},{href:t,pathname:s}=document.location,[r,a,l]=await Promise.all([presence.getSetting("privacy"),presence.getSetting("buttons"),presence.getSetting("covers")]),o=document.querySelector('[property="og:title"]')?.content,i=document.querySelector('[id="global-search-input"]'),c=s.split("/");if(r)e.details="Browsing";else if(i?.value)e.details="Searching for",e.state=i?.value,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png";else if(s===`/${document.querySelector("html").getAttribute("lang")}`)e.details="Viewing watchlist";else switch(c[2]){case"show":switch(c[3]){case"explore":document.querySelector('[id="shows-results"]')?(e.details="Viewing search results for",e.state=document.querySelector('[id="shows-results"]').textContent.split('"')[1]):(e.details="Exploring Shows",e.buttons=[{label:"Explore Shows",url:t}]);break;case"browse":{const s=t.split("?")[1].replace("filter=","").replace(/_/gm," ");e.details="Viewing shows filtered by",e.state=`${s.at(0).toUpperCase()}${s.slice(1)}`;break}default:e.details="Viewing",e.state=o,e.largeImageKey=document.querySelector('img[src*="/poster/"]')?.getAttribute("src")??document.querySelector('[property="og:image"]')?.getAttribute("content")??"https://cdn.rcd.gg/PreMiD/websites/T/TV%20Time/assets/logo.png",o.match(/S[0-9]*E[0-9]/gm)?e.buttons=[{label:"View Episode",url:t}]:e.buttons=[{label:"View Show",url:t}]}break;case"actor":e.details="Viewing",e.state=o,e.largeImageKey=document.querySelector('[property="og:image"]')?.getAttribute("content")??"https://cdn.rcd.gg/PreMiD/websites/T/TV%20Time/assets/logo.png",e.buttons=[{label:"View Actor",url:t}];break;case"upcoming":e.details="Viewing upcoming shows",e.buttons=[{label:"View Upcoming Shows",url:t}];break;case"explore":document.querySelector('[id="shows-results"]')?(e.details="Viewing search results for",e.state=document.querySelector('[id="shows-results"]').textContent.split('"')[1]):(e.details="Exploring Shows",e.buttons=[{label:"Explore Shows",url:t}]);break;case"user":switch(c[4]){case"profile":e.details=`Viewing ${o}'s ${document.querySelector('[class="profile-nav"]').querySelector('[class*="active"]')?.textContent??"Profile"}`,e.largeImageKey=document.querySelector('[class="avatar"]')?.firstElementChild?.firstElementChild?.getAttribute("src")??document.querySelector('[class="avatar"]')?.firstElementChild?.getAttribute("src");break;case"calendar":e.details="Viewing Calendar for",e.state=`${document.querySelector('[class="month-label"]').textContent} ${document.querySelector('[class="day-number"]').textContent} (${document.querySelector('[class="relative-date"]').textContent.trim()})`,e.buttons=[{label:"View Calendar",url:t}];break;case"account":e.details=`Managing ${document.querySelector('[class*="active"]').textContent} account settings`}}l||(e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/T/TV%20Time/assets/logo.png"),a||delete e.buttons,e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;