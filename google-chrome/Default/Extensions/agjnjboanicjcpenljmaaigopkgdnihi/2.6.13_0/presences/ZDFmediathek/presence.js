var __webpack_exports__={};let elapsed=Math.floor(Date.now()/1e3),prevUrl=document.location.href;const assets={zdf:"https://cdn.rcd.gg/PreMiD/websites/Z/ZDFmediathek/assets/0.png","3sat":"https://cdn.rcd.gg/PreMiD/websites/Z/ZDFmediathek/assets/1.png",phoenix:"https://cdn.rcd.gg/PreMiD/websites/Z/ZDFmediathek/assets/2.png",arte:"https://cdn.rcd.gg/PreMiD/websites/Z/ZDFmediathek/assets/3.png",zdfinfo:"https://cdn.rcd.gg/PreMiD/websites/Z/ZDFmediathek/assets/4.png",zdfneo:"https://cdn.rcd.gg/PreMiD/websites/Z/ZDFmediathek/assets/5.png",kika:"https://cdn.rcd.gg/PreMiD/websites/Z/ZDFmediathek/assets/6.png"},presence=new Presence({clientId:"854999470357217290"}),strings=presence.getStrings({play:"general.playing",pause:"general.paused",browsing:"general.browsing",browsingThrough:"discord.browseThrough",buttonWatchVideo:"general.buttonWatchVideo",buttonWatchStream:"general.buttonWatchStream"});presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/Z/ZDFmediathek/assets/logo.png"},t=document.querySelector("div.zdfplayer-video-container video");if(document.location.href!==prevUrl&&(prevUrl=document.location.href,elapsed=Math.floor(Date.now()/1e3)),t)if(e.type=3,location.pathname.startsWith("/live-tv")){const t=document.querySelector("div.m-active h2[class='visuallyhidden']").textContent.replace(/ {2}/g," ").replaceAll(" im Livestream","").replaceAll(" Livestream","");let s=t;switch(s){case"phoenix":s="PHOENIX";break;case"KiKA":s="KI\\.KA"}const a=document.querySelector(`section.timeline-${s} ul li.m-live h4 a span`),r=document.querySelector(`section.timeline-${s} ul li.m-live h4 a`).getAttribute("aria-label").replace(t,"");let i="";a.textContent&&":"!==a.textContent&&(i=a.textContent.replace(":"," -")),e.largeImageKey=assets[t.toLowerCase()],e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/live.png",e.smallImageText="Live",e.details=r,e.state=`${i}${t} Live`,e.startTimestamp=elapsed,e.buttons=[{label:(await strings).buttonWatchStream,url:prevUrl}],document.querySelector("div.m-active div figure div div video").paused&&(e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png",e.smallImageText=(await strings).pause,delete e.startTimestamp,delete e.endTimestamp)}else e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/Z/ZDFmediathek/assets/logo.png",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText=(await strings).play,e.state=document.querySelector("ol li:nth-last-child(2) a").textContent,e.details=document.querySelector("ol li:nth-last-child(1) span").textContent,[e.startTimestamp,e.endTimestamp]=presence.getTimestamps(Math.floor(t.currentTime),Math.floor(t.duration)),e.buttons=[{label:(await strings).buttonWatchVideo,url:prevUrl}],t.paused&&(e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png",e.smallImageText=(await strings).pause,delete e.startTimestamp,delete e.endTimestamp);else e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.smallImageText=(await strings).browsingThrough,e.details=(await strings).browsing,e.startTimestamp=elapsed;e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;