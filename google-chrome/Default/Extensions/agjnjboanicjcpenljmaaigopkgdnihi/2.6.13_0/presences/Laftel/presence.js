var __webpack_exports__={};const presence=new Presence({clientId:"755666356141293568"});let prev="",last={},lastEpisode={};function getQuery(){return JSON.parse(`{"${decodeURI(location.search.substring(1)).replaceAll('"','\\"').replaceAll("&",'","').replaceAll("=",'":"')}"}`)}presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/L/Laftel/assets/logo.png"};if("/"===window.location.pathname)e.details="메인";else if(window.location.pathname.startsWith("/search"))e.details="검색",e.state=getQuery().keyword;else if(window.location.pathname.match(/^\/item\/\d/))prev===window.location.pathname&&last.name||(prev=window.location.pathname,last=await(await fetch(`https://laftel.net/api/v1.0/items/${window.location.pathname.split("/")[2]}/detail/`,{headers:{laftel:"TeJava"}})).json()),e.details=last.name;else if(location.pathname.match(/\/player\/\d*\/\d/)){const t=document.querySelector("video");t&&!isNaN(t.duration)&&(prev!==window.location.pathname&&(prev=window.location.pathname,lastEpisode=await(await fetch(`https://laftel.net/api/episodes/v1/${window.location.pathname.split("/")[3]}`,{headers:{laftel:"TeJava"}})).json()),e.details=`${lastEpisode.title} - ${lastEpisode.subject}`,t.currentTime>0&&!t.paused&&!t.ended&&t.readyState>2?([e.startTimestamp,e.endTimestamp]=presence.getTimestamps(Math.floor(t.currentTime),Math.floor(t.duration)),e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/play.png"):(e.startTimestamp=null,delete e.endTimestamp,e.state="일시 정지됨",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png"))}presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;