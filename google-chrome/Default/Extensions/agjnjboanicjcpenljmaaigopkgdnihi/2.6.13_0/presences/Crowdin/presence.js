var __webpack_exports__={};const presence=new Presence({clientId:"848293229409337444"}),browsingTimestamp=Math.round(Date.now()/1e3);async function getLanguageName(e){return(await fetch("https://api.crowdin.com/api/v2/languages?limit=500",{headers:{Accept:"application/json"}}).then((e=>e.json())).then((e=>e.data.map((e=>e.data))))).find((t=>t.id===e))?.name}presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/C/Crowdin/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:t,host:s,href:n}=document.location,i=t.split("/"),[a,r,o]=await Promise.all([presence.getSetting("showProject"),presence.getSetting("showManager"),presence.getSetting("showConversations")]);switch(s){case"support.crowdin.com":{const s=i.includes("enterprise");if(t&&"/"!==t)if(t.includes("/api/v2/")||t.includes("/enterprise/api/")){const t=[...document.querySelectorAll("label")].find((e=>e.className?.includes("active")));e.details=`Reading the ${s?"Enterprise ":""}API documentation`,e.state=[...t?.children??[]].map(((e,t,s)=>s.length>=1&&0===t?e.textContent.toUpperCase():e.textContent)).join(" "),e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",t&&(e.buttons=[{label:"Read more",url:n}])}else t.includes("/search")?(e.details="Searching support",e.state=document.querySelector(".form-control.form-control__result.input-lg")?.value,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png"):(e.details=`Reading ${s?"an Enterprise":"a"} support article`,e.state=document.querySelector(".hero")?.textContent,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.buttons=[{label:"View article",url:n}]);else e.details="On the main support page";break}case"store.crowdin.com":{const s=document.querySelector("marketplace-item.hydrated")?.shadowRoot.querySelector("h1").childNodes[0].textContent.trim();if(t&&"/"!==t)if(t.includes("/author/"))e.details="Viewing developer",e.state=document.querySelectorAll("div.sc-marketplace-author")[1]?.querySelector("h1").childNodes[0].textContent,e.buttons=[{label:"View developer",url:n}];else if(s)e.details="Viewing app",e.state=s,e.buttons=[{label:"View app",url:n}];else{const t=document.querySelector("#category-select")?.shadowRoot.querySelector("div.select-wrapper.select-wrapper--borderless > div").textContent;e.details="Browsing the store",e.state=t&&`${t.includes("categories")?t:`${t} category`}`}else e.details="On the main store page";break}case"status.crowdin.com":e.details="Viewing Crowdin's status","/subscribe"===t&&(e.details="Subscribing to status reports");break;case"blog.crowdin.com":e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png","/"===t?e.details="Browsing the blog":t.includes("/tag/")?(e.details="Viewing tag",e.state=document.querySelector(".text-center.home-bg.home-bg--tags")?.textContent.split(":")[1],e.buttons=[{label:"View tag",url:n}]):t.includes("/search")?(e.details="Searching the blog",e.state=document.querySelector(".form-control")?.value,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png"):document.querySelector(".hero > h1")?(e.details="Reading blog post",e.state=document.querySelector(".hero > h1").textContent,e.buttons=[{label:"View blog post",url:n}]):(e.details="Unknown page",delete e.smallImageKey);break;default:if("/"!==t&&t)if(t.includes("/project/"))if(document.querySelector(".not-found-header"))e.details="Viewing an invalid project";else{if(a&&(e.details=document.querySelector(".project-name__title__text")?.textContent??document.querySelector("#wrap > div.section.project-page > div > div.clearfix.mb-2 > div > div:nth-child(2) > a").outerText,e.buttons=[{label:"View project",url:document.location.origin+i.filter(((e,t)=>t<=2)).join("/")}]),t.includes("/activity-stream"))e.state="Viewing activity";else if(t.includes("/discussions"))if(parseInt(i.at(-1))){const t=document.querySelector(".author-info-section > span").parentElement.querySelector(".user-name").textContent;a?e.details+=" - Discussions":e.details="Viewing a project's discussion",e.state=`${(document.querySelector("#topic-view-container > div > div > h3")??document.querySelector("#topic-view-container > div > div > div.topic-title-closed > h3")).textContent} - ${"You"===t?document.querySelector(".textarea-toolbar > .author-avatar > img").title:t}`}else e.state="Browsing discussions";else if(t.includes("/tasks"))parseInt(i.at(-1))?(a?e.details+=" - Tasks":e.details="Viewing a project's task",e.state=document.querySelector("#task-title").textContent):e.state="Browsing tasks";else if(t.includes("/reports")){const t=i.at(-1);a?e.details+=" - Reports":e.details="Viewing a project's reports",e.state=!r&&["cost-estimate","abuse-report"].includes(t)?"Project Status":r||"translation-cost"!==t?document.querySelector(".nav-item.active").textContent:"My Contribution"}else 3===i.length?e.state="Viewing project home":document.querySelector("#wrap > div.section.project-page > div > h1")?e.state=`${await getLanguageName(i.at(-1))} translation`:e.state="In project home";if(r)if(t.includes("/content")){const t=document.querySelector(".nav-item.active").textContent;a?(e.details+=" - Content",e.state=`Managing ${t}`):(e.details=`Managing a project's ${t}`,delete e.state)}else t.includes("/resources")?e.state="Viewing resources":t.includes("/members")?e.state="Managing members":t.includes("/tools")?e.state="Managing tools":t.includes("/apps")?(a?e.details+=" - Integrations":e.details="Managing a project's integrations",e.state=`Managing ${document.querySelector(".integration-details > .description > h3").textContent}`):t.includes("/settings")&&(e.state="Managing project settings");if(!e.details&&e.state){const t=e.state.split(" ");t.includes("project")?t[t.indexOf("project")]="a project's":t.splice(1,0,"a project's"),e.details=t.join(" "),delete e.state}}else if(t.includes("/translate")||t.includes("/proofread")){if(!document.querySelector("#crowdin-editor-wrapper"))return;const s=document.querySelector(".file-name")?.textContent,i=document.querySelector(".language-name-wrapper.text-overflow")?.textContent;t.includes("/proofread")?e.details=`Proofreading ${s}`:e.details=`Translating ${s}`,e.state=a?`${document.title.split("-")[1]?.trim()} - ${i}`:i,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/writing.png",e.buttons=[{label:"Translate project",url:n}]}else if(t.includes("/profile"))if(document.querySelector(".error-page"))e.details="Viewing an invalid profile";else{const s=document.querySelector(".username"),n=document.querySelector(".user-login");document.querySelectorAll(".nav-item")[2]?t.includes("/activity")?e.details="Viewing own activity":e.details="Viewing own profile":t.includes("/activity")?e.details="Viewing user activity":e.details="Viewing a profile",e.state=`${s?.textContent}${n?` - ${n.textContent}`:""}`,e.buttons=[{label:"View profile",url:`https://crowdin.com/profile/${(n??s).textContent}`}]}else if(t.includes("/messages")){const t=[...document.querySelector(".messages-members-status").querySelectorAll(".messages-single-member-status")].map((e=>e.textContent)).join(""),s=document.querySelector("#subject-text > h3").textContent;1===parseInt(document.querySelector(".users-counter > :nth-child(2)").textContent)?o?(e.details="Messaging user",e.state=`${s} - ${t}`):e.details="Messaging a user":o?(e.details="Messaging group",e.state=`${s} - ${t}`):e.details="Messaging a group",e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/writing.png"}else if(t.includes("/projects")){const t=document.querySelector("#search_query > input").value;e.details="Exploring projects",e.state=document.querySelector(".nav-item.active").textContent,t&&(e.state+=` - ${t}`,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png")}else t.includes("/resources")?(e.details="Viewing resources",e.state=document.querySelector(".active")?.textContent):t.includes("/release-notes")?(e.details="Reading release notes",e.state=document.querySelector(".selected-release-item")?.textContent,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.buttons=[{label:"View release notes",url:n}]):"/features"===t?e.details="Viewing Crowdin's features":"/demo-request"===t?e.details="Requesting a demo":t.includes("/page/")||t.includes("/teams/")?(e.details="Reading page",e.state=document.title.split("|")[0],e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",e.buttons=[{label:"View page",url:n}]):t.includes("/pricing")?e.details="Viewing pricing":t.includes("/enterprise")?e.details="Viewing enterprise":t.includes("/contacts")?e.details="Contacting Crowdin":t.includes("/feature-request")?e.details="Viewing feature requests":"/createproject"===t?e.details="Creating a project":(presence.info("This page is currently not supported in the Crowdin presence! Please open an issue on GitHub about this."),e.details="Viewing an unsupported page");else e.details="Website Home"}presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;