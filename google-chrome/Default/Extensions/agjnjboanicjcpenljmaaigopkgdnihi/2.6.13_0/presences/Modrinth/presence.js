var __webpack_exports__={};const presence=new Presence({clientId:"1047217921685991462"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/M/Modrinth/assets/logo.png",startTimestamp:browsingTimestamp},{pathname:t,hostname:s,href:a}=document.location,o=t.split("/").filter((e=>e)),i=document.querySelector('[class*="is-active"]');switch(s){case"modrinth.com":switch(o[0]){case"user":e.details=`Browsing ${o[1]}'s profile`,e.buttons=[{label:"View Profile",url:a}];break;case"settings":e.details="Browsing profile settings";break;case"mods":e.details="Looking for mods";break;case"mod":if(e.state=`${document.querySelector("h1.title").textContent}`,e.buttons=[{label:"View Mod",url:a}],i?.textContent)return void(e.details=`Browsing ${o[0]} ${i?.textContent.toLowerCase()}`);break;case"plugins":e.details="Looking for plugins";break;case"plugin":if(e.state=`${document.querySelector("h1.title").textContent}`,e.buttons=[{label:"View Plugin",url:a}],i?.textContent)return void(e.details=`Browsing ${o[0]} ${i?.textContent.toLowerCase()}`);break;case"resourcepacks":e.details="Looking for resourcepack";break;case"resourcepack":if(e.state=`${document.querySelector("h1.title").textContent}`,e.buttons=[{label:"View Resourcepack",url:a}],i?.textContent)return void(e.details=`Browsing ${o[0]} ${i?.textContent.toLowerCase()}`);break;case"modpacks":e.details="Looking for a modpack";break;case"modpack":if(e.state=`${document.querySelector("h1.title").textContent}`,e.buttons=[{label:"View Modpack",url:a}],i?.textContent)return void(e.details=`Browsing ${o[0]} ${i?.textContent.toLowerCase()}`);break;case"notifications":e.details="Checking notifications";break;case"dashboard":e.details="View Dashboard";break;case"legal":switch(o[1]){case"terms":e.details="Reading Terms and Conditions";break;case"privacy":e.details="Reading Privacy Policy";break;case"rules":e.details="Reading Content Rules";break;case"security":e.details="Security Notice"}break;default:e.details="Browsing home page"}break;case"docs.modrinth.com":switch(o[0]){case"docs":switch(o[1]){case"tutorials":e.details="Browsing docs tutorials";break;case"details":e.details="Reading about the API";break;case"modpacks":e.details="Reading about modpacks";break;default:e.details="Browsing API information"}break;case"api-spec":e.details="Browsing API documentation";break;default:e.details="Browsing docs"}break;case"blog.modrinth.com":document.querySelector("h1.post-title__text")?(e.buttons=[{label:"View Blog Post",url:a}],e.details="Reading blog post",e.state=document.querySelector("h1.post-title__text").textContent):e.details="Browsing blog"}e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;