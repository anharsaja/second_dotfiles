var __webpack_exports__={};const presence=new Presence({clientId:"731069087031230487"}),browsingTimestamp=Math.floor(Date.now()/1e3);let currentURL=new URL(document.location.href),currentPath=currentURL.pathname.replace(/^\/|\/$/g,"").split("/"),presenceData={details:"Viewing an unsupported page",largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/M/ManiaExchange/assets/logo.png",startTimestamp:browsingTimestamp};const updateCallback={_function:null,get function(){return this._function},set function(e){this._function=e},get present(){return null!==this._function}},resetData=(e={details:"Viewing an unsupported page",largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/M/ManiaExchange/assets/logo.png",startTimestamp:browsingTimestamp})=>{currentURL=new URL(document.location.href),currentPath=currentURL.pathname.replace(/^\/|\/$/g,"").split("/"),presenceData={...e}},getURLParam=e=>currentURL.searchParams.get(e),getTimestamps=(e,a)=>{const t=Date.now();return[Math.floor(t/1e3),Math.floor(t/1e3)-e+a]};if((()=>{if(currentURL.hostname.startsWith("mania")||currentURL.hostname.startsWith("www"))""===currentPath[0]?presenceData.details="On the portal":(presenceData.details="Viewing a page",presenceData.state={tac:"Terms and Conditions",privacy:"Privacy Policy",logos:"Logos & Signpacks"}[currentPath[0]]);else if(currentURL.hostname.startsWith("tm.")||currentURL.hostname.startsWith("sm")||currentURL.hostname.startsWith("trackmania")){const e=(e,a)=>"https://cdn.rcd.gg/PreMiD/websites/M/ManiaExchange/assets/2.png"===presenceData.smallImageKey?e:a;switch(currentURL.hostname.split(".")[0]){case"tm":presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/M/ManiaExchange/assets/2.png",presenceData.smallImageText="TrackManiaÂ²";break;case"sm":presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/M/ManiaExchange/assets/0.png",presenceData.smallImageText="ShootMania";break;case"trackmania":presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/M/ManiaExchange/assets/7.png",presenceData.smallImageText="Trackmania (2020)",presenceData.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/M/ManiaExchange/assets/8.png"}if("error"===currentPath[0]||"errorhandler"===currentPath[0]||3===document.querySelector(".ly-box > span").children.length&&"Error"===document.querySelector(".ly-box b").textContent)presenceData.details="On a non-existent page";else switch(currentPath[0]){case"":case"home":"rules"===currentPath[1]?(presenceData.details="Viewing a page",presenceData.state="Rules & Guidelines"):"about"===currentPath[1]?(presenceData.details="Viewing a page",presenceData.state="About"):presenceData.details="On the home page";break;case"auth":presenceData.details="Logging in";break;case"tracks":case"maps":presenceData.details=document.querySelector(".panelbox-heading h1").textContent.trim(),presenceData.state=document.querySelector(".panelbox-stats a[data-userid]").textContent.trim();break;case"tracksearch2":case"mapsearch2":case"ts":case"ms":presenceData.details=e("Searching for a track","Searching for a map"),updateCallback.function=()=>{presenceData.state=getURLParam("trackname")};break;case"tracksearch":case"mapsearch":{const a=document.querySelector("td.WindowText:nth-child(2)").textContent.trim().slice(8);presenceData.details=e("Searching for a track","Searching for a map"),document.querySelector("#TrackName").value?presenceData.state=`${document.querySelector("#TrackName").value}, ${a}`:presenceData.state=a[0].toUpperCase()+a.slice(1);break}case"mappacksearch":updateCallback.function=()=>{presenceData.details="Searching for a mappack",presenceData.state=getURLParam("name")};break;case"mappack":"create"===currentPath[1]?presenceData.details="Creating a mappack":"view"===currentPath[1]&&(presenceData.details=document.querySelector(".WindowText td:nth-of-type(2)").textContent.trim(),presenceData.state=`${document.querySelector(".WindowText:nth-of-type(2) td:nth-of-type(2)").textContent.trim()} (mappack)`);break;case"upload":"track"===currentPath[1]?presenceData.details="Uploading a track":"replay"===currentPath[1]&&(presenceData.details="Uploading a replay");break;case"recordsearch":presenceData.details="Searching for a record",updateCallback.function=()=>{presenceData.state=getURLParam("name")};break;case"leaderboard":presenceData.details="Viewing the leaderboards",updateCallback.function=()=>{presenceData.state=document.querySelector(".select2-choice").textContent.trim()};break;case"reports":"compose"===currentPath[1]?presenceData.details="Reporting something":"my-reports"===currentPath[1]?presenceData.details="Viewing reports":presenceData.details="Viewing a report";break;case"forums":presenceData.details="Viewing the forums",presenceData.state=document.querySelector(".windowv2-header").textContent.trim(),"Community forums"===presenceData.state&&delete presenceData.state;break;case"threads":"new-thread"===currentPath[1]?presenceData.details="Writing a new thread":"new-post"===currentPath[1]?presenceData.details="Replying to a thread":(presenceData.details="Viewing a thread",presenceData.state=document.querySelector(".windowv2-header").textContent.trim());break;case"posts":"edit"===currentPath[1]&&(presenceData.details="Editing a post");break;case"blogs":"entry"===currentPath[1]?(presenceData.details="Reading a blog entry",presenceData.state=document.querySelector(".windowv2-header").textContent.trim()):"search"===currentPath[1]?presenceData.details="Searching for a blog entry":presenceData.details="Viewing the blog";break;case"user":switch(currentPath[1]){case"search":{const e=document.querySelector(".windowv2-textcontainer").textContent.trim().split(" ...")[0].slice(15),a=document.querySelector("#UserUsername").value;presenceData.details="Searching for a user",presenceData.state=a?`${a}, ${e.slice(a.length+30)}`:e[0].toUpperCase()+e.slice(1);break}case"team":presenceData.details="Viewing the team behind the site",presenceData.state="(MX Crew)";break;case"online":presenceData.details="Viewing active users";break;case"profile":presenceData.details="Viewing a user profile",presenceData.state=document.querySelector(".WindowText .RowModCell_1:nth-of-type(2) a:nth-of-type(3)").textContent;break;case"edit":presenceData.details="Editing their account information"}break;case"support":presenceData.details="Viewing a page",presenceData.state="Support";break;case"messaging":"index"!==currentPath[1]&&currentPath[1]?"compose"===currentPath[1]?presenceData.details="Writing a private message":"reply"===currentPath[1]?presenceData.details="Replying a private message":presenceData.details="Viewing a private message":presenceData.details="Viewing thier private messages";break;case"media":presenceData.details="Viewing a page",presenceData.state="Media";break;case"api":presenceData.details="Viewing a page",presenceData.state="API";break;case"statistics":presenceData.details="Viewing statistics",presenceData.state=document.querySelector(".windowv2-header").textContent.trim(),"Statistics"===presenceData.state&&delete presenceData.state;break;default:"news"===currentPath[0]&&"archive"===currentPath[1]&&(presenceData.details="Viewing the news archive")}}else if(currentURL.hostname.startsWith("item"))if(presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/M/ManiaExchange/assets/5.png",presenceData.smallImageText="ItemExchange",presenceData.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/M/ManiaExchange/assets/4.png","error"===currentPath[0])presenceData.details="On a non-existent page";else if(""!==currentPath[0]&&"home"!==currentPath[0]||1!==currentPath.length)if("auth"===currentPath[0])presenceData.details="Logging in";else if("item"===currentPath[0].toLowerCase())presenceData.details=document.querySelector("h3").textContent,presenceData.state=document.querySelector(".panel-body dd:nth-of-type(2)").textContent.trim();else if("set"===currentPath[0].toLowerCase())presenceData.details=document.querySelector("h3").textContent,presenceData.state=`${document.querySelector(".panel-body dd:nth-of-type(2)").textContent.trim()} (set)`;else switch(currentPath[0]){case"itemsearch":presenceData.details="Searching for an item",updateCallback.function=()=>{presenceData.state=getURLParam("itemname")};break;case"setsearch":presenceData.details="Searching for a set",updateCallback.function=()=>{presenceData.state=getURLParam("setname")};break;case"blocks":presenceData.details="Searching for a block";break;case"forum":presenceData.details="Viewing the forums",presenceData.state=document.querySelector(".windowv2-header").textContent.trim(),"Community Forums"===presenceData.state&&delete presenceData.state;break;case"threads":presenceData.details="Viewing a thread",presenceData.state=document.querySelector(".windowv2-header").textContent.trim();break;case"usersearch":{const e=[];document.querySelector("#username").value&&e.push(document.querySelector("#username").value),document.querySelector("#s2id_mode").textContent&&e.push(document.querySelector("#s2id_mode").textContent.slice(1)),presenceData.details="Searching for a user",0!==e.length&&(presenceData.state=e.join(", "));break}case"user":"profile"===currentPath[1]?(presenceData.details="Viewing a user profile",presenceData.state=document.querySelector(".WindowText .RowModCell_1:nth-of-type(2) a:nth-of-type(3)").textContent):"edit"===currentPath[1]&&(presenceData.details="Editing their account information");break;case"messaging":"index"!==currentPath[1]&&currentPath[1]?"compose"===currentPath[1]?presenceData.details="Writing a private message":"reply"===currentPath[1]?presenceData.details="Replying a private message":presenceData.details="Viewing a private message":presenceData.details="Viewing thier private messages";break;case"faq":presenceData.details="Viewing a page",presenceData.state="FAQ";break;case"rules":presenceData.details="Viewing a page",presenceData.state="Rules"}else presenceData.details="On the home page";else if(currentURL.hostname.startsWith("accounts"))if(presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/M/ManiaExchange/assets/1.png",presenceData.smallImageText="Accounts","auth"===currentPath[0])switch(currentPath[1]){case"login":presenceData.details="Logging in";break;case"register":case"resend_confirm":presenceData.details="Registering an account";break;case"forgot":presenceData.details="Figuring out the password"}else"user"===currentPath[0]&&(presenceData.details="Configuring their account");else if(currentURL.hostname.startsWith("tmtube"))presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/M/ManiaExchange/assets/5.png",presenceData.smallImageText="TMTube Archive",presenceData.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/M/ManiaExchange/assets/6.png",updateCallback.function=()=>{switch(currentPath[0]){case"":presenceData.details="On the home page";break;case"view":presenceData.details=document.querySelector("h2").textContent.trim(),presenceData.state=document.querySelector(".box-user h2").textContent.trim(),delete presenceData.startTimestamp;try{if("Pause"===document.querySelector(".mejs__playpause-button button").getAttribute("aria-label")){presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/play.png",presenceData.smallImageText="TMTube Archive â Playing";const e=document.querySelector("video");[presenceData.startTimestamp,presenceData.endTimestamp]=getTimestamps(Math.floor(e.currentTime),Math.floor(e.duration))}else presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/pause.png",presenceData.smallImageText="TMTube Archive â Paused",delete presenceData.endTimestamp}catch(e){delete presenceData.endTimestamp}break;case"search":presenceData.details="Searching for a video",presenceData.state=getURLParam("query")}};else if(currentURL.hostname.startsWith("api")){if(presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/M/ManiaExchange/assets/3.png",presenceData.smallImageText="API Documentation",""===currentPath[0])presenceData.details="On the home page";else if("documents"===currentPath[0])switch(presenceData.details="Viewing a page",currentPath[1]){case"reference":presenceData.state="API Reference";break;case"enum":presenceData.state="Enumeration values";break;case"conventions":presenceData.state="Conventions";break;case"changes":presenceData.state="Changes"}}else currentURL.hostname.startsWith("blog")&&(presenceData.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",presenceData.smallImageText="Blog","posts"===currentPath[0]&&currentPath[1]?(presenceData.details="Reading a blog post",presenceData.state=document.querySelector("h1").textContent):presenceData.details="Viewing the blog")})(),updateCallback.present){const e={...presenceData};presence.on("UpdateData",(async()=>{resetData(e),updateCallback.function(),presence.setActivity(presenceData)}))}else presence.on("UpdateData",(async()=>{presence.setActivity(presenceData)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;