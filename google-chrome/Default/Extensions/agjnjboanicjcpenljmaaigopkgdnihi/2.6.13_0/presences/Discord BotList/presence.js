var __webpack_exports__={};const presence=new Presence({clientId:"819122551435296818"}),botBrowsing=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/D/Discord%20BotList/assets/logo.jpg",startTimestamp:botBrowsing},t=document.location.pathname,i=document.location.hostname,a=await presence.getSetting("buttons"),s=await presence.getSetting("submitP");if("discord-botlist.eu"===i)switch(t){case"/":e.details="Browsing";break;case"/search":e.details="Searching Bot:",e.state=document.querySelector("[name='search']").getAttribute("value"),e.buttons=[{label:"View Search",url:document.URL}];break;case"/bots/tag":e.details="Searching Tag:",e.state=new URLSearchParams(window.location.search).get("tag"),e.buttons=[{label:"View Tag",url:document.URL}];break;case"/login_err/":e.details="Login In Page";break;default:if(t.includes("/users/"))e.details="Viewing Profile:",e.state=document.querySelector("#Username").textContent,e.buttons=[{label:"View Profile",url:document.URL}];else if(t.includes("/bots/"))if(t.includes("/new"))e.details="Adding a Bot";else if(t.includes("/vote")){const t=document.querySelector("#vote1 > h1").textContent.replace("Vote for ","");e.details="Voting for:",e.state=t,e.buttons=[{label:`Vote for ${t}`,url:document.URL}]}else t.includes("/edit")?e.details="Editing a Bot":t.includes("/all")?(e.details="Viewing all Bots",e.buttons=[{label:"View Bots",url:document.URL}]):(e.details="Viewing Bot:",e.state=document.querySelector("#botname").textContent,e.buttons=[{label:"View Bot",url:document.URL}]);else switch(t){case"/apply/certification/":e.details="Viewing Certification Page";break;case"/apply/certification/application":e.details="Applying for Certification";break;case"/tos/":e.details="Viewing ToS";break;case"/privacypolicy/":e.details="Viewing Privacy Policy";break;case"/Imprint/":e.details="Viewing Imprint"}}else"docs.discord-botlist.eu"===i&&(e.details="Viewing Docs",e.state=`Page: ${document.querySelector("#__GITBOOK__ROOT__CLIENT__ > div.reset-3c756112--body-68cac36c > div.reset-3c756112--bodyContent-2f98451b > div > div.reset-3c756112--wholeContentBody-554be184 > div.reset-3c756112--wholeContentPage-6c3f1fc5 > div > div.reset-3c756112--pageContainer-544d6e9c > div.reset-3c756112 > div.reset-3c756112--pageHeader-15724735 > div > div > div.reset-3c756112--horizontalFlex-5a0077e0 > div.reset-3c756112--pageHeaderIntro-0c1463da > h1 > span").textContent}`);s||"Adding a Bot"!==e.details||delete e.details,a||delete e.buttons,e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;