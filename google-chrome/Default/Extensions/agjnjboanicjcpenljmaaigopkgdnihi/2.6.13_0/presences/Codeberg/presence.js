var __webpack_exports__={};const presence=new Presence({clientId:"1248642612169150594"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{let e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/C/Codeberg/assets/logo.png",startTimestamp:browsingTimestamp};const t={pulls:{details:"Viewing pull requests"},notifications:{details:"Viewing notifications"},issues:{details:"Viewing issues"},milestones:{details:"Viewing milestones"},"notifications/subscriptions":{details:"Viewing subscribed notifications"},"user/settings":{details:"Editing user settings"},"user/login":{details:"Logging in"},"user/cbrgp/0XUjCUW":{details:"Signing up"},"explore/repos":{details:"Exploring repositories"},"explore/users":{details:"Exploring users"},"explore/organizations":{details:"Exploring organizations"},"org/create":{details:"Creating an organization"},"repo/create":{details:"Creating a repository"},"repo/migrate":{details:"Migrating a repository"}},{href:s}=document.location;for(const[s,i]of Object.entries(t))`/${s}`===document.querySelector(".active.item").getAttribute("href")&&(e={...e,...i});if(document.querySelector(".user.profile")&&!document.querySelector(".user.profile.settings")){const t=document.querySelector(".profile-avatar-name").querySelector(".header")?.textContent,i=document.querySelector(".profile-avatar-name").querySelector(".username").textContent.split(" ")[0];let r;r=t?`${t} (${i})`:i;const a=new URL(s).searchParams.get("tab");if(a)switch(a){case"stars":e.details=`Viewing ${i}'s starred repositories`;break;case"activity":e.details=`Viewing ${i}'s public activity`;break;case"repositories":e.details=`Viewing ${i}'s repositories`}else s.includes("/-/projects")?e.details=`Viewing ${i}'s projects`:s.includes("/-/packages")?e.details=`Viewing ${i}'s packages`:e.details=`Viewing profile: ${r}`;e.buttons=[{label:"View Profile",url:s}],e.largeImageKey=document.querySelector("#profile-avatar").querySelector("img").src,e.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/C/Codeberg/assets/logo.png"}if(document.querySelector(".repository")&&!document.querySelector(".repository.new")){const t=document.querySelector(".flex-item-leading").querySelector("img"),i=document.querySelector(".flex-item-main").querySelector(".flex-item-title").textContent.trim();t?(e.largeImageKey=t.src,e.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/C/Codeberg/assets/logo.png"):e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/C/Codeberg/assets/logo.png",e.buttons=[{label:"View Repository",url:s}];const r={"":{details:`Viewing repository: ${i}`},issues:{details:`Viewing ${i}'s issues`},pulls:{details:`Viewing ${i}'s pull requests`},activity:{details:`Viewing ${i}'s public activity`},settings:{details:`Editing ${i}'s settings`},releases:{details:`Viewing ${i}'s releases`},projects:{details:`Viewing ${i}'s projects`},actions:{details:`Viewing ${i}'s actions`},packages:{details:`Viewing ${i}'s packages`},branches:{details:`Viewing ${i}'s branches`},tags:{details:`Viewing ${i}'s tags`},forks:{details:`Viewing ${i}'s forks`},watchers:{details:`Viewing ${i}'s watchers`},stars:{details:`Viewing ${i}'s stargazers`}};for(const[t,s]of Object.entries(r))`/${t}`===document.querySelector(".active.item").getAttribute("href")&&(e={...s,...e})}if(document.querySelector(".organization.page-content")){const t=document.querySelector(".organization").querySelector("img"),i=t.title;s.includes("/-/projects")?e.details=`Viewing ${i}'s projects`:s.includes("/-/packages")?e.details=`Viewing ${i}'s packages`:s.includes("/org")?e.details=`Viewing ${i}'s teams/members`:e.details=`Viewing organization: ${i}`,e.buttons=[{label:"View Organization",url:s}],e.largeImageKey=t.src,e.smallImageKey="https://cdn.rcd.gg/PreMiD/websites/C/Codeberg/assets/logo.png"}presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;