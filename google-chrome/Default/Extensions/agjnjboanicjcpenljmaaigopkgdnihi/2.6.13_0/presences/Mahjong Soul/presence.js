"use strict";var __webpack_exports__={};const presence=new Presence({clientId:"1222797423953575977"});let currentTimestampKey,browsingTimestamp=Math.floor(Date.now()/1e3);function registerTimestampUpdate(e){currentTimestampKey!==e&&(currentTimestampKey=e,browsingTimestamp=Math.floor(Date.now()/1e3))}const slideshow=presence.createSlideshow(),SLIDESHOW_TIMEOUT=5e3;let currentSlideshowKey;function registerSlideshowKey(e){currentSlideshowKey!==e&&(currentSlideshowKey=e,slideshow.deleteAllSlides())}function getWindString(e){switch(e){case 0:return"East";case 1:return"South";case 2:return"West";case 3:return"North"}}function getPositionString(e){switch(e){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}}const imageCache={};function squareImage(e){const{src:t,complete:a}=e;if(e.crossOrigin="anonymous",imageCache[t])return imageCache[t];const n=()=>{const{naturalHeight:a,naturalWidth:n}=e,r=document.createElement("canvas"),s=r.getContext("2d");if(r.width=n,r.height=a,n>a&&(r.height=n),a>n&&(r.width=a),n===a)return imageCache[t]=Promise.resolve(t),imageCache[t];s.clearRect(0,0,r.width,r.height),s.drawImage(e,(r.width-n)/2,(r.height-a)/2);const i=new Promise((e=>{r.toBlob((t=>{e(t)}))}));return imageCache[t]=i,i};return a?n():new Promise((t=>{e.onload=()=>{t(n())}}))}const variableCache={},variableCacheTimes={};var GameScreenType;!function(e){e[e.Loading=0]="Loading",e[e.PlayerTurn=1]="PlayerTurn",e[e.OtherTurn=2]="OtherTurn",e[e.DrawEnd=3]="DrawEnd",e[e.HandEnd=4]="HandEnd",e[e.GameEnd=5]="GameEnd"}(GameScreenType||(GameScreenType={}));const unused_variable=(e,t)=>e+t;unused_variable(1,2);let wasDrawScreen=!1;async function getGameType(){const{"uiscript.UI_Win.Inst.enable":e,"uiscript.UI_ScoreChange.Inst.enable":t,"uiscript.UI_Huleshow.Inst.enable":a,"uiscript.UI_Loading.Inst.enable":n,"view.DesktopMgr.Inst.index_player":r,"view.DesktopMgr.Inst.gameEndResult":s,"view.DesktopMgr.Inst.seat":i}=await getVariable({"view.DesktopMgr.Inst.seat":0,"view.DesktopMgr.Inst.gameEndResult":null,"view.DesktopMgr.Inst.index_player":0,"uiscript.UI_Win.Inst.enable":!1,"uiscript.UI_ScoreChange.Inst.enable":!1,"uiscript.UI_Huleshow.Inst.enable":!1,"uiscript.UI_Loading.Inst.enable":!1});return n?GameScreenType.Loading:(a&&(wasDrawScreen=!0),e?(wasDrawScreen=!1,GameScreenType.HandEnd):t?wasDrawScreen?GameScreenType.DrawEnd:GameScreenType.HandEnd:s?GameScreenType.GameEnd:i===r?GameScreenType.PlayerTurn:GameScreenType.OtherTurn)}async function getBasicGameInfo(){const{"view.DesktopMgr.Inst.seat":e,"view.DesktopMgr.Inst.index_player":t,"view.DesktopMgr.Inst.index_ben":a,"view.DesktopMgr.Inst.index_ju":n,"view.DesktopMgr.Inst.index_change":r,"view.DesktopMgr.Inst.left_tile_count":s,"view.DesktopMgr.Inst.game_config.mode":i,"view.DesktopMgr.Inst.gameEndResult":o}=await getVariable({"view.DesktopMgr.Inst.seat":0,"view.DesktopMgr.Inst.index_player":0,"view.DesktopMgr.Inst.index_ben":0,"view.DesktopMgr.Inst.index_ju":0,"view.DesktopMgr.Inst.index_change":0,"view.DesktopMgr.Inst.left_tile_count":0,"view.DesktopMgr.Inst.game_config.mode":0,"view.DesktopMgr.Inst.gameEndResult":null});return{playerIndex:e,activePlayerIndex:t,honbaCount:a,roundCount:n,windIndex:r,tilesLeft:s,gameMode:i,gameEndResult:o}}async function getPlayerInfo(e){const{[`view.DesktopMgr.Inst.player_datas[${e}].nickname`]:t}=await getVariable({[`view.DesktopMgr.Inst.player_datas[${e}].nickname`]:"Unknown Player"}),a=await getPlayerListIndexFromSeat(e),{[`view.DesktopMgr.Inst.players[${a}].seat`]:n,[`view.DesktopMgr.Inst.players[${a}].score`]:r}=await getVariable({[`view.DesktopMgr.Inst.players[${a}].seat`]:0,[`view.DesktopMgr.Inst.players[${a}].score`]:0});return{playerSeat:n,playerScore:r,playerName:t}}async function getPlayerListIndexFromSeat(e){const{"view.DesktopMgr.Inst.players[0].seat":t,"view.DesktopMgr.Inst.players[1].seat":a,"view.DesktopMgr.Inst.players[2].seat":n,"view.DesktopMgr.Inst.players[3].seat":r}=await getVariable({"view.DesktopMgr.Inst.players[0].seat":0,"view.DesktopMgr.Inst.players[1].seat":1,"view.DesktopMgr.Inst.players[2].seat":2,"view.DesktopMgr.Inst.players[3].seat":3});let s=0;switch(e){case t:s=0;break;case a:s=1;break;case n:s=2;break;case r:s=3}return s}async function getHandEndInfo(){const{"uiscript.UI_Win.Inst.data.hules[0].dadian":e,"uiscript.UI_Win.Inst.data.hules[0].seat":t}=await getVariable({"uiscript.UI_Win.Inst.data.hules[0].dadian":0,"uiscript.UI_Win.Inst.data.hules[0].seat":0});return{handScore:e,seat:t}}async function isInGame(){const{"GameMgr.Inst.ingame":e}=await getVariable({"GameMgr.Inst.ingame":!1});return e}async function getAccountInfo(){const{"GameMgr.Inst.account_data.nickname":e,"GameMgr.Inst.account_data.gold":t,"GameMgr.Inst.account_data.signature":a}=await getVariable({"GameMgr.Inst.account_data.nickname":"Unknown Player","GameMgr.Inst.account_data.gold":0,"GameMgr.Inst.account_data.signature":""});return{nickname:e,coppers:t,signature:a}}var HomeScreenType;async function getHomeScreenType(){const{"uiscript.UI_Entrance.Inst.enable":e,"uiscript.UI_Lobby.Inst.enable":t,"uiscript.UI_Shop.Inst.enable":a,"uiscript.UI_Sushe.Inst.enable":n,"uiscript.UI_Create_Room.Inst.enable":r,"uiscript.UI_Treasure.Inst.enable":s,"uiscript.UI_Rules.Inst.enable":i,"uiscript.UI_PlayerInfo.Inst.enable":o,"uiscript.UI_Achievement.Inst.enable":c,"uiscript.UI_Loading.Inst.enable":l,"uiscript.UI_WaitingRoom.Inst.enable":u}=await getVariable({"uiscript.UI_Entrance.Inst.enable":!1,"uiscript.UI_Lobby.Inst.enable":!1,"uiscript.UI_Shop.Inst.enable":!1,"uiscript.UI_Sushe.Inst.enable":!1,"uiscript.UI_WaitingRoom.Inst.enable":!1,"uiscript.UI_Treasure.Inst.enable":!1,"uiscript.UI_Rules.Inst.enable":!1,"uiscript.UI_PlayerInfo.Inst.enable":!1,"uiscript.UI_Achievement.Inst.enable":!1,"uiscript.UI_Loading.Inst.enable":!1,"uiscript.UI_Create_Room.Inst.enable":!1});if(e)return HomeScreenType.LoggingIn;if(a)return HomeScreenType.Shop;if(n)return HomeScreenType.Dorm;if(r)return HomeScreenType.CreateRoom;if(s)return HomeScreenType.Gacha;if(i)return HomeScreenType.Rules;if(o)return HomeScreenType.PlayerInfo;if(c)return HomeScreenType.Achievement;if(l)return HomeScreenType.Loading;if(u)return HomeScreenType.RoomLobby;if(t){const{"uiscript.UI_Lobby.Inst.nowpage":e}=await getVariable({"uiscript.UI_Lobby.Inst.nowpage":0});switch(e){case 1:return HomeScreenType.RankedQueue;case 2:return HomeScreenType.FriendlyQueue;case 3:return HomeScreenType.TournamentQueue}return HomeScreenType.Home}return HomeScreenType.Loading}async function getGachaInfo(){const{"uiscript.UI_Treasure.Inst.tab_index":e}=await getVariable({"uiscript.UI_Treasure.Inst.tab_index":0}),{[`uiscript.UI_Treasure.Inst.tabs[${e}].name.text`]:t}=await getVariable({[`uiscript.UI_Treasure.Inst.tabs[${e}].name.text`]:"Unknown Tab"});return t}async function getAchievementInfo(){const{"uiscript.UI_Achievement.Inst.total_achievement_count":e,"uiscript.UI_Achievement.Inst.total_count.text":t,"uiscript.UI_Achievement.Inst.total_achievement.lst[0].text":a,"uiscript.UI_Achievement.Inst.total_achievement.lst[1].text":n,"uiscript.UI_Achievement.Inst.total_achievement.lst[2].text":r}=await getVariable({"uiscript.UI_Achievement.Inst.total_achievement_count":0,"uiscript.UI_Achievement.Inst.total_count.text":"0","uiscript.UI_Achievement.Inst.total_achievement.lst[0].text":"0","uiscript.UI_Achievement.Inst.total_achievement.lst[1].text":"0","uiscript.UI_Achievement.Inst.total_achievement.lst[2].text":"0"});return{totalAchievementCount:e,totalCountString:t,bronzeAchievementCount:a,silverAchievementCount:n,goldAchievementCount:r}}async function getWaitingRoomInfo(){const{"uiscript.UI_WaitingRoom.Inst.room_id":e,"uiscript.UI_WaitingRoom.Inst.container_rules.modes[0]":t,"uiscript.UI_WaitingRoom.Inst.max_player_count":a,"uiscript.UI_WaitingRoom.Inst.players.length":n}=await getVariable({"uiscript.UI_WaitingRoom.Inst.room_id":0,"uiscript.UI_WaitingRoom.Inst.container_rules.modes[0]":"Unknown Mode","uiscript.UI_WaitingRoom.Inst.max_player_count":0,"uiscript.UI_WaitingRoom.Inst.players.length":0});return{roomId:e,mode:t,maxPlayers:a,currentPlayers:n}}async function getVariable(e){const t=Object.keys(e),a=await Promise.all(t.map((e=>getVariableWrapper(e).catch((()=>({})))))),n=Object.assign({},e);for(const e of a)Object.assign(n,e);return n}function getVariableWrapper(e){const t=performance.now();return variableCacheTimes[e]&&t-variableCacheTimes[e]<1500?Promise.resolve(variableCache[e]):new Promise(((a,n)=>{const r=setTimeout((()=>{n(new Error("Variable retrieval timed out"))}),500);presence.getPageVariable(e).then((n=>{variableCache[e]=n,variableCacheTimes[e]=t,a(n)})).catch(n).finally((()=>{clearTimeout(r)}))}))}!function(e){e[e.LoggingIn=0]="LoggingIn",e[e.Shop=1]="Shop",e[e.Dorm=2]="Dorm",e[e.CreateRoom=3]="CreateRoom",e[e.RoomLobby=4]="RoomLobby",e[e.Gacha=5]="Gacha",e[e.Rules=6]="Rules",e[e.PlayerInfo=7]="PlayerInfo",e[e.Achievement=8]="Achievement",e[e.RankedQueue=9]="RankedQueue",e[e.FriendlyQueue=10]="FriendlyQueue",e[e.TournamentQueue=11]="TournamentQueue",e[e.Loading=12]="Loading",e[e.Home=13]="Home"}(HomeScreenType||(HomeScreenType={})),presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/M/Mahjong%20Soul/assets/logo.jpeg",startTimestamp:browsingTimestamp,name:"Mahjong Soul",type:0},{hostname:t,pathname:a,protocol:n,href:r}=document.location,s=a.split("/").filter(Boolean);let i=!1;if("mahjongsoul.yo-star.com"===t||"mahjongsoul.com"===t)switch(s[0]){case"news":s[1]?(e.details="Reading a news article",e.state=document.querySelector(".title-text"),e.buttons=[{label:"Read Article",url:r}]):e.details="Browsing news articles";break;case"characters":{const t=document.querySelector(".name"),a=document.querySelectorAll(".avatarBox img");e.details="Viewing a character",e.state=t,e.smallImageText=document.querySelector(".lines"),registerSlideshowKey(`characters-${t.textContent}`),i=!0;for(const t of a)slideshow.addSlide(t.src,{...e,smallImageKey:t},5e3);break}case"manga":if(s[1]){const t="2"===s[2];e.details=`Reading a ${t?"special manga":"manga"} episode`,e.state=`Episode ${t?s[1]:+s[1]-1}`,e.buttons=[{label:"Read Manga",url:r}]}else e.details="Browsing manga",e.state=document.querySelector(".menu.active");break;case"wallpapers":{const t=document.querySelector(".wallpapersPopup-wrap.active");if(t)e.details="Viewing a wallpaper",e.state=`${t.querySelector(".title").textContent} - ${t.querySelector(".text").textContent}`,e.largeImageKey=await squareImage(t.querySelector("img")),e.buttons=[{label:"View Wallpaper",url:document.querySelector(".content a")}];else{const t=[...document.querySelector(".wallpapers-list").children];e.details="Browsing wallpapers",registerSlideshowKey(`wallpapers-${document.querySelector(".ant-pagination-item-active").textContent}`),i=!0;for(const a of t){const t=a.querySelector(".wallpapers-title"),n={...e,smallImageKey:await squareImage(a.querySelector("img")),smallImageText:t};slideshow.addSlide(t.textContent,n,5e3)}}break}case"birthday":{const t=document.querySelector(".birthdayPopup-wrap.active");if(t){const a=t.querySelector(".title"),n=t.querySelectorAll(".content img");e.details="Viewing a birthday present",e.state=a,registerSlideshowKey(`birthday-popup-${a.textContent}`),i=!0;for(const t of n)slideshow.addSlide(t.src,{...e,smallImageKey:t},5e3)}else{const t=[...document.querySelector(".birthday-list").children];e.details="Browsing birthday arts",registerSlideshowKey(`birthday-${document.querySelector(".ant-pagination-item-active").textContent}`),i=!0;for(const a of t){const t=a.querySelector(".birthday-title"),n={...e,smallImageKey:await squareImage(a.querySelector("img")),smallImageText:t};slideshow.addSlide(t.textContent,n,5e3)}}break}case"faq":e.details="Viewing the FAQ";break;default:e.details="Browsing"}else{const{nickname:a,coppers:r,signature:s}=await getAccountInfo();if(await isInGame()){registerTimestampUpdate("game");const t=await getGameType(),{playerIndex:a,activePlayerIndex:n,honbaCount:r,roundCount:s,windIndex:i,tilesLeft:o,gameEndResult:c}=await getBasicGameInfo(),{playerSeat:l,playerName:u,playerScore:m}=await getPlayerInfo(a);switch(e.type=5,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/question.png",e.smallImageText=`${u} - ${m} points`,e.details=`${getWindString(i)} ${s+1} | ${r} honba | ${o} tiles left`,t){case GameScreenType.GameEnd:{const{players:t}=c,a=t[0],n=t.indexOf(t.find((e=>e.seat===l))),{playerName:r}=await getPlayerInfo(a.seat);e.state="Viewing end of game results",e.largeImageText=`${r} won the game (${a.part_point_1}) | ${u} placed ${n+1}${getPositionString(n+1)} (${m})`;break}case GameScreenType.DrawEnd:e.state="Hand ended in a draw";break;case GameScreenType.HandEnd:{const{handScore:t,seat:a}=await getHandEndInfo(),{playerName:n}=await getPlayerInfo(a);e.state="Viewing winning hand results",e.largeImageText=`${n} won the hand | Value: ${t}`;break}case GameScreenType.OtherTurn:{const{playerName:t}=await getPlayerInfo(n);e.state=`Waiting for ${t} to do their turn`;break}case GameScreenType.PlayerTurn:e.state="Taking their turn";break;default:e.details="Loading..."}+presence.getExtensionVersion()<260&&(e.details=e.state,e.state=e.largeImageText)}else switch(registerTimestampUpdate("home"),await getHomeScreenType()){case HomeScreenType.LoggingIn:e.details="Logging in";break;case HomeScreenType.Achievement:{const{totalCountString:t,bronzeAchievementCount:a,silverAchievementCount:n,goldAchievementCount:r}=await getAchievementInfo();e.details="Viewing their achievements",e.state=t,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/question.png",e.smallImageText=`${a} Bronze | ${n} Silver | ${r} Gold`;break}case HomeScreenType.RoomLobby:{const a=await presence.getSetting("show_invite"),{roomId:r,mode:s,maxPlayers:i,currentPlayers:o}=await getWaitingRoomInfo();e.details="In a room",e.state=`${s} | ${o}/${i} players`,a&&(e.buttons=[{label:"Join Room",url:`${n}//${t}/?room=${r}`}]);break}case HomeScreenType.Dorm:e.details="Viewing their characters";break;case HomeScreenType.FriendlyQueue:e.details="In a friendly match queue";break;case HomeScreenType.TournamentQueue:e.details="In a tournament queue";break;case HomeScreenType.RankedQueue:e.details="In a ranked queue";break;case HomeScreenType.Gacha:{const t=await getGachaInfo();e.details="Viewing the gacha",e.state=t;break}case HomeScreenType.Home:e.details="Viewing the home screen",e.state=`${r} coppers`,e.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/question.png",e.smallImageText=`${a} - "${s}"`;break;case HomeScreenType.PlayerInfo:e.details="Viewing their statistics";break;case HomeScreenType.CreateRoom:e.details="Creating a room";break;case HomeScreenType.Rules:e.details="Viewing yakus and rules";break;case HomeScreenType.Shop:e.details="Viewing the shop";break;default:e.details="Loading..."}}i?presence.setActivity(slideshow):presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;