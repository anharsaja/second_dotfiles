var __webpack_exports__={};const presence=new Presence({clientId:"1015402986534608948"}),slideshow=presence.createSlideshow(),logo="https://cdn.rcd.gg/PreMiD/websites/C/Craiyon/assets/logo.png";let browsingTimestamp=Date.now()/1e3,oldPrompt=null,oldPath=null,activityState="start",searchResultCacheTimestamp=0;presence.on("UpdateData",(async()=>{const e={largeImageKey:logo,startTimestamp:browsingTimestamp},{pathname:t,href:a}=document.location,s=t.split("/").filter(Boolean);let i=!1;switch(oldPath!==t&&(oldPath=t,slideshow.deleteAllSlides()),s[0]??"/"){case"/":{const t=document.querySelector("#prompt"),a=document.querySelectorAll(".image-container img");if(e.state=t.value?`"${t.value}"`:"Waiting for input...",document.querySelector("#generateButton").disabled)"generation"!==activityState&&(e.startTimestamp=browsingTimestamp=Date.now()/1e3,oldPrompt=t.value,activityState="generation",slideshow.deleteAllSlides()),e.details="Generating images",e.state=`"${oldPrompt}"`;else if("results"!==activityState&&(e.startTimestamp=browsingTimestamp=Date.now()/1e3,activityState="results",slideshow.deleteAllSlides()),document.activeElement===t&&t.value!==oldPrompt||!a.length)e.details="Thinking of a prompt";else{e.details="Viewing results",e.state=`"${oldPrompt}"`;for(const[t,s]of a.entries()){const a=Object.assign({},e);a.largeImageKey=s,slideshow.addSlide(`image${t}`,a,5e3)}i=!0}break}case"image":e.details="Viewing an image",e.state=document.evaluate("//p[text()='Prompt']",document.body).iterateNext().nextElementSibling,e.largeImageKey=document.querySelector("main img"),e.buttons=[{label:"View Image Details",url:a}];break;case"search":if(s.length>1){e.details="Viewing search results",e.state=document.querySelector("input").value;const t=Date.now();if(t-searchResultCacheTimestamp>5e3){searchResultCacheTimestamp=t;for(const[t,a]of document.querySelectorAll("main a img").entries()){const s=Object.assign({},e);s.largeImageKey=a,slideshow.addSlide(`image${t}`,s,5e3)}}i=!0}else e.details="Searching for images";break;case"blog":s.length>1?(e.details="Reading a blog post",e.state=document.querySelector("h1"),e.largeImageKey=document.querySelector("main p + img"),e.buttons=[{label:"View Blog Post",url:a}]):e.details="Browsing blog posts";break;case"privacy":e.details="Reading privacy policy";break;case"terms":e.details="Reading terms and conditions"}e.details?i?presence.setActivity(slideshow):presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;