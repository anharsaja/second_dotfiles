var __webpack_exports__={};const presence=new Presence({clientId:"835732953844940822"}),getStrings=async()=>presence.getStrings({play:"general.playing",pause:"general.paused",browse:"general.browsing",watchingSeries:"general.watchingSeries",searchFor:"general.searchFor",searchSomething:"general.searchSomething",viewEpisode:"general.buttonViewEpisode",watchVideo:"general.buttonWatchVideo",viewList:"netflix.viewList"},await presence.getSetting("lang").catch((()=>"en"))),data={presence:{},coverUrls:{},strings:null,meta:{},startedSince:Math.round(Date.now()/1e3),oldLang:null};async function getShortURL(e){if(!e||e.length<256)return e;if(data.coverUrls[e])return data.coverUrls[e];try{const t=await(await fetch(`https://pd.premid.app/create/${e}`)).text();return data.coverUrls[e]=t,t}catch(t){return presence.error(t),e}}presence.on("UpdateData",(async()=>{const[e,t,a]=await Promise.all([presence.getSetting("lang").catch((()=>"en")),presence.getSetting("privacy"),presence.getSetting("cover")]);data.oldLang===e&&data.strings||(data.oldLang=e,data.strings=await getStrings());const s={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/S/Stan/assets/logo.png",details:data.strings.browse,smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/search.png",startTimestamp:data.startedSince};data.presence={"/programs/([0-9]+)/play":{async setPresenceData(){const e=document.querySelector("video");e&&(data.meta.title=document.querySelector("h1.vjs-metadata.vjs-metadata--title")?.textContent,data.meta.episode=document.querySelector("h2.vjs-metadata.vjs-metadata--subtitle")?.textContent,data.meta.coverUrl=document.querySelector(".vjs-end-slate-image")?.style?.backgroundImage?.match(/url\("(.*)"\)/)?.[1],s.smallImageKey=e.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",s.smallImageText=e.paused?data.strings.pause:data.strings.play,[s.startTimestamp,s.endTimestamp]=presence.getTimestampsfromMedia(e),s.buttons=[{label:data.meta.episode?data.strings.viewEpisode:data.strings.watchVideo,url:document.URL}],e.paused&&(delete s.endTimestamp,delete s.startTimestamp))}},"/programs/([0-9]+)":{disabled:t,setPresenceData(){s.details="Viewing program:",s.state=document.querySelector("img.program__title.program__title--logo")?.alt??document.querySelector("h1.program__title")?.textContent,s.buttons=[{label:"View Program",url:document.URL}]}},"/my/list":{disabled:t,async setPresenceData(){s.details=data.strings.viewList}},"/my/history":{disabled:t,async setPresenceData(){s.details="Viewing their watch history"}},"/search":{async setPresenceData(){s.details=data.strings.searchFor,s.state=new URLSearchParams(document.location.search).get("q")}}},data.settings=[{id:"timestamp",deleteEntry:!0,uses:["startTimestamp","endTimestamp"]},{id:"buttons",deleteEntry:!0,uses:["buttons"]},{id:"privacy",deleteEntry:!0,value:!0,uses:["buttons"]},{presence:[{page:"/search",uses:"state",condition:{ifTrue:t,deleteEntry:!0}},{page:"/search",uses:"details",condition:{ifTrue:t,setTo:data.strings.searchSomething}},{page:"/programs/([0-9]+)/play",uses:"details",setTo:await presence.getSetting("seriesDetail"),condition:{ifTrue:t,setTo:"Watching something"},replace:[{input:"%title%",output:data.meta.title},{input:"%episode%",output:data.meta.episode}]},{page:"/programs/([0-9]+)/play",uses:"state",setTo:await presence.getSetting("seriesState"),condition:{ifTrue:t,deleteEntry:!0},replace:[{input:"%title%",output:data.meta.title},{input:"%episode%",output:data.meta.episode}]},{page:"/programs/([0-9]+)/play",uses:"largeImageKey",condition:{ifTrue:a&&!t,setTo:await getShortURL(data.meta.coverUrl)}}]}];for(const[e,t]of Object.entries(data.presence))if(document.location.pathname.match(e)&&!t.disabled){t.setPresenceData();break}for(const e of data.settings){const t=await presence.getSetting(e.id).catch((()=>null));if((t||e.value)&&t!==e.value||!e.deleteEntry||e.presence){if(e.presence)for(const t of e.presence)if(document.location.pathname.match(t.page)){if(t.setTo&&!t.replace)s[t.uses]=t.setTo;else if(t.setTo&&t.replace){let e=t.setTo;for(const a of t.replace)e=e.replace(a.input,a.output??"");s[t.uses]=e.trim()}t.condition&&(t.condition.ifTrue&&t.condition.deleteEntry?delete s[t.uses]:t.condition.ifTrue&&t.condition.setTo&&(s[t.uses]=t.condition.setTo))}}else for(const t of e.uses)delete s[t]}s.details?presence.setActivity(s):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;