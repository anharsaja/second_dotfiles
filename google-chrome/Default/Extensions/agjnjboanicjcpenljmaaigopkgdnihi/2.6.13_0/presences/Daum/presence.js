var __webpack_exports__={};class DaumPresence extends Presence{constructor(e){super(e)}get serviceName(){const e=document.location.hostname;switch(!0){case!!e.match(/movie([.]v)?[.]daum[.]([a-z0-9]+)/):return"DAUM_MOVIE";case!!e.match(/news([.]v)?[.]daum[.]([a-z0-9]+)/):return"DAUM_NEWS";case!!e.match(/sports([.]v)?[.]daum[.]([a-z0-9]+)/):return"DAUM_SPORTS";case!!e.match(/entertain([.]v)?[.]daum[.]([a-z0-9]+)/):return"DAUM_ENTERTAIN";case!!e.match(/blog([.]v)?[.]daum[.]([a-z0-9]+)/):return"DAUM_BLOG";case!!e.match(/auto([.]v)?[.]daum[.]([a-z0-9]+)/):return"DAUM_AUTO";case!!e.match(/mail([.]v)?[.]daum[.]([a-z0-9]+)/):return"DAUM_MAIL";case!!e.match(/(top[.])?cafe([.]v)?[.]daum[.]([a-z0-9]+)/):return"DAUM_CAFE";case!!e.match(/([a-z]+)([.]v)?[.]daum[.]([a-z0-9]+)/):return"DAUM"}}get isReadingArticle(){return!!document.location.hostname.match(/([a-z]+)([.]v)[.]daum[.]([a-z0-9]+)/)}}const presence=new DaumPresence({clientId:"829266476875120650"}),data={presence:null},startTime=Math.floor(Date.now()/1e3);let video,cafe;presence.on("iFrameData",(e=>{e.video&&({video}=e),e.cafe&&({cafe}=e)})),presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/D/Daum/assets/logo.png",startTimestamp:startTime};switch(presence.serviceName){case"DAUM_MAIL":e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/D/Daum/assets/0.png";break;case"DAUM_CAFE":e.largeImageKey="https://cdn.rcd.gg/PreMiD/websites/D/Daum/assets/1.png"}data.presence={"/v/([0-9a-zA-Z]+)":{service:"ANY",article:!0,setPresenceData(){e.details="Reading article:",e.state=document.querySelector("h3.tit_view")?.textContent,e.buttons=[{url:document.URL,label:"Read Article"}],video&&(e.details="Watching video:",e.state=video.title??document.querySelector("h3.tit_view")?.textContent,e.smallImageKey=video.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText=video.paused?"Paused":"Playing",[e.startTimestamp,e.endTimestamp]=presence.getTimestamps(video.currentTime,video.duration),e.buttons=[{label:"Watch Video",url:document.URL}],video.paused&&(delete e.startTimestamp,delete e.endTimestamp))}},"/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)":{service:"DAUM_BLOG",setPresenceData(){e.details="Reading blog:",e.state=document.querySelector("a.link-title")?.textContent,e.buttons=[{label:"Read Blog",url:document.URL}]}},"vod/view/([0-9a-zA-Z]+)":{service:"DAUM_AUTO",setPresenceData(){e.details="Watching video:",e.state=document.querySelector("strong.tit_vod")?.textContent,e.smallImageKey=video?.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText=video?.paused?"Paused":"Playing",[e.startTimestamp,e.endTimestamp]=presence.getTimestamps(video?.currentTime,video?.duration),e.buttons=[{label:"Watch Video",url:document.URL}],video?.paused&&(delete e.startTimestamp,delete e.endTimestamp)}},"/newcar/model/([0-9a-zA-Z]+)":{service:"DAUM_AUTO",setPresenceData(){e.details="Viewing car:",e.state=document.querySelector("h3.tit_model")?.textContent,e.buttons=[{label:"View Car",url:document.URL}]}},"/moviedb/":{service:"DAUM_MOVIE",setPresenceData(){e.details="Viewing movie:",e.state=document.querySelector("span.txt_tit")?.textContent,e.buttons=[{label:"View Movie",url:document.URL}]}},"/person/":{service:"DAUM_MOVIE",setPresenceData(){e.details="Viewing actor:",e.state=document.querySelector("span.txt_tit")?.textContent,e.buttons=[{label:"View Actor",url:document.URL}]}},"/moviedb/contents":{service:"DAUM_MOVIE",setPresenceData(){video&&(e.details="Watching video:",e.state=document.querySelector("strong.tit_player")?.textContent,e.smallImageKey=video.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText=video.paused?"Paused":"Playing",[e.startTimestamp,e.endTimestamp]=presence.getTimestamps(video.currentTime,video.duration),e.buttons=[{label:"Watch Video",url:document.URL}],video.paused&&(delete e.startTimestamp,delete e.endTimestamp))}},"/video/([0-9a-zA-Z]+)":{service:"DAUM_SPORTS",setPresenceData(){e.details="Watching video:",e.state=document.querySelector("strong.tit_vod")?.textContent,e.smallImageKey=video?.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText=video?.paused?"Paused":"Playing",[e.startTimestamp,e.endTimestamp]=presence.getTimestamps(video?.currentTime,video?.duration),e.buttons=[{label:"Watch Video",url:document.URL}],video?.paused&&(delete e.startTimestamp,delete e.endTimestamp)}},"/tv/([0-9]+)/video/([0-9]+)":{service:"DAUM_ENTERTAIN",setPresenceData(){e.details=video?.title??document.querySelector("span.inner_tit2")?.textContent,e.state=document.querySelector("a.link_txt")?.textContent.trim(),e.smallImageKey=video?.paused?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",e.smallImageText=video?.paused?"Paused":"Playing",[e.startTimestamp,e.endTimestamp]=presence.getTimestamps(video?.currentTime,video?.duration),e.buttons=[{label:"Watch Video",url:document.URL},{label:"View Channel",url:document.querySelector("a.link_txt")?.href}],video?.paused&&(delete e.startTimestamp,delete e.endTimestamp)}},"#INBOX":{service:"DAUM_MAIL",hash:!0,setPresenceData(){e.details="Viewing Inbox"}},"#INBOX/":{service:"DAUM_MAIL",hash:!0,setPresenceData(){e.details="Reading mail"}},"#MINE":{service:"DAUM_MAIL",hash:!0,setPresenceData(){e.details="Viewing Inbox"}},"#DRAFT":{service:"DAUM_MAIL",hash:!0,setPresenceData(){e.details="Viewing drafts"}},"#SENT":{service:"DAUM_MAIL",hash:!0,setPresenceData(){e.details="Viewing sent"}},"#TRASH":{service:"DAUM_MAIL",hash:!0,setPresenceData(){e.details="Viewing trash"}},"#SPAM":{service:"DAUM_MAIL",hash:!0,setPresenceData(){e.details="Viewing spam"}},"#ALL":{service:"DAUM_MAIL",hash:!0,setPresenceData(){e.details="Viewing all mail"}},"#UNREAD":{service:"DAUM_MAIL",hash:!0,setPresenceData(){e.details="Viewing unread mail"}},"#setting":{service:"DAUM_MAIL",hash:!0,setPresenceData(){e.details="Viewing thier settings"}},"\\?composer":{service:"DAUM_MAIL",href:!0,setPresenceData(){e.details="Composing a new mail"}},"/([a-zA-Z0-9]+)":{service:"DAUM_CAFE",setPresenceData(){e.details="Viewing cafe:",e.state=cafe.name??"Unknown",e.buttons=[{label:"View Cafe",url:document.URL}]}},"/([0-9a-zA-Z]+)/([0-9A-Za-z]+)":{service:"DAUM_CAFE",setPresenceData(){e.details="Viewing page:",e.state=`${cafe.title??"Unknown"} • ${cafe.name??"Unknown"}`,e.buttons=[{label:"View Page",url:document.URL}]}},"/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)":{service:"DAUM_CAFE",setPresenceData(){e.details="Reading article:",e.state=`${cafe.article??"Unknown"} • ${cafe.name??"Unknown"}`,e.buttons=[{label:"Read Article",url:document.URL}]}}},data.settings=[{id:"timestamp",delete:!0,data:["startTimestamp","endTimestamp"]},{id:"buttons",delete:!0,data:["buttons"]}];for(const[e,t]of Object.entries(data.presence))!(document.location.pathname.match(e)||t.hash&&document.location.hash.match(e)||t.href&&document.location.href.match(e))||t.service!==presence.serviceName&&"ANY"!==t.service||(t.article&&t.article===presence.isReadingArticle?t.setPresenceData():t.article||t.setPresenceData());for(const t of data.settings)if(!await presence.getSetting(t.id)&&t.delete)for(const a of t.data)delete e[a];e.details?presence.setActivity(e):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;