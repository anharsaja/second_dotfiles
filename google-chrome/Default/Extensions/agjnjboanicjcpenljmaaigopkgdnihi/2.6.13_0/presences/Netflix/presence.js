"use strict";var __webpack_exports__={};class Node{value;next;constructor(e){this.value=e}}class Queue{#e;#t;#s;constructor(){this.clear()}enqueue(e){const t=new Node(e);this.#e?(this.#t.next=t,this.#t=t):(this.#e=t,this.#t=t),this.#s++}dequeue(){const e=this.#e;if(e)return this.#e=this.#e.next,this.#s--,e.value}clear(){this.#e=void 0,this.#t=void 0,this.#s=0}get size(){return this.#s}*[Symbol.iterator](){let e=this.#e;for(;e;)yield e.value,e=e.next}}const AsyncResource={bind:(e,t,s)=>e.bind(s)};class AsyncLocalStorage{getStore(){}run(e,t){return t()}}function pLimit(e){if(!Number.isInteger(e)&&e!==Number.POSITIVE_INFINITY||!(e>0))throw new TypeError("Expected `concurrency` to be a number from 1 and up");const t=new Queue;let s=0;const a=async(e,a,i)=>{s++;const r=(async()=>e(...i))();a(r);try{await r}catch{}s--,t.size>0&&t.dequeue()()},i=(i,...r)=>new Promise((n=>{((i,r,n)=>{t.enqueue(AsyncResource.bind(a.bind(void 0,i,r,n))),(async()=>{await Promise.resolve(),s<e&&t.size>0&&t.dequeue()()})()})(i,n,r)}));return Object.defineProperties(i,{activeCount:{get:()=>s},pendingCount:{get:()=>t.size},clearQueue:{value(){t.clear()}}}),i}const limit=pLimit(1);let metadata=null;async function fetchMetadata(e){await limit((async()=>{metadata?.url!==document.location.href&&(metadata={url:document.location.href},metadata.data=await(await fetch(`https://www.netflix.com/nq/website/memberapi/release/metadata?movieid=${e}`)).json())}))}function clearMetadata(){metadata=null}const presence=new Presence({clientId:"926541425682829352"}),getStrings=async()=>presence.getStrings({play:"general.playing",pause:"general.paused",browse:"general.browsing",watchingMovie:"general.watchingMovie",watchingSeries:"general.watchingSeries",viewSeries:"general.buttonViewSeries",viewMovies:"general.buttonViewMovie",watchEpisode:"general.buttonViewEpisode",watchMovie:"general.buttonWatchMovie",seriesDisplayFull:"netflix.seriesDisplay.full",seriesDisplayShort:"netflix.seriesDisplay.short",movieDisplay:"netflix.movieDisplay"},await presence.getSetting("lang").catch((()=>"en")));let strings,oldLang=null;presence.on("UpdateData",(async()=>{const[e,t,s,a,i,r,n,c,l]=await Promise.all([presence.getSetting("lang").catch((()=>"en")),presence.getSetting("usePresenceName"),presence.getSetting("timestamp"),presence.getSetting("showBrowsingStatus"),presence.getSetting("showCover"),presence.getSetting("showSeries"),presence.getSetting("showMovies"),presence.getSetting("logoType"),presence.getSetting("privacy")]);oldLang!==e&&(oldLang=e,strings=await getStrings());const d=document.location.href,g=d.match(/\/title\/(\d+)/)??d.match(/jbv=(\d+)/);if(g)return l?presence.clearActivity():(await fetchMetadata(g[1]),await presence.setActivity({details:metadata.data.video.title,state:metadata.data.video.synopsis.slice(0,128),largeImageKey:i?metadata.data.video.boxart.at(0).url:["https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/0.gif","https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/1.png","https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/2.png"][c]||"https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/1.png",smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/reading.png",smallImageText:strings.browse,buttons:[{label:"show"===metadata.data.video.type?strings.viewSeries:strings.viewMovies,url:document.location.href}]}));const o=d.match(/\/watch\/(\d+)/);if(o){await fetchMetadata(o[1]);const e=document.querySelector("video");if(!e)return;const{paused:a}=e,[d,g]=presence.getTimestampsfromMedia(e);if("show"===metadata.data.video.type&&r){if(l)return await presence.setActivity({type:3,details:strings.watchingSeries,largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/1.png"});const e=metadata.data.video,r=metadata.data.video.seasons.find((t=>t.episodes.map((e=>e.episodeId)).includes(e.currentEpisode))),n=r.episodes.find((t=>t.episodeId===e.currentEpisode));return await presence.setActivity({type:3,details:metadata.data.video.title,state:strings.seriesDisplayShort.replace("{0}",r.seq.toString()).replace("{1}",n.seq.toString()).replace("{2}",n.title),largeImageKey:i?metadata.data.video.boxart.at(0).url:["https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/0.gif","https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/1.png","https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/2.png"][c]||"https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/1.png",smallImageKey:a?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",smallImageText:a?strings.pause:strings.play,...s&&{startTimestamp:a?null:d,endTimestamp:a?null:g},...t&&{name:metadata.data.video.title,details:n.title,state:strings.seriesDisplayFull.replace("{0}",r.seq.toString()).replace("{1}",n.seq.toString())},buttons:[{label:strings.watchEpisode,url:document.location.href.split("?")[0]},{label:strings.viewSeries,url:`https://www.netflix.com/title/${metadata.data.video.id}`}]})}return"movie"===metadata.data.video.type&&n?l?await presence.setActivity({type:3,details:strings.watchingMovie,largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/1.png"}):await presence.setActivity({type:3,details:metadata.data.video.title,state:strings.movieDisplay.replace("{0}",metadata.data.video.year.toString()).replace("{1}",Math.floor(metadata.data.video.runtime/60).toString()),largeImageKey:i?metadata.data.video.boxart.at(0).url:["https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/0.gif","https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/1.png","https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/2.png"][c]||"https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/1.png",smallImageKey:a?"https://cdn.rcd.gg/PreMiD/resources/pause.png":"https://cdn.rcd.gg/PreMiD/resources/play.png",smallImageText:a?strings.pause:strings.play,...s&&{startTimestamp:a?null:d,endTimestamp:a?null:g},...t&&{name:metadata.data.video.title},buttons:[{label:strings.watchMovie,url:document.location.href.split("?")[0]}]}):presence.clearActivity()}return clearMetadata(),a&&!l?await presence.setActivity({details:strings.browse,largeImageKey:["https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/0.gif","https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/1.png","https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/2.png"][c]||"https://cdn.rcd.gg/PreMiD/websites/N/Netflix/assets/1.png",smallImageKey:"https://cdn.rcd.gg/PreMiD/resources/reading.png",smallImageText:strings.browse}):presence.clearActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
undefined;