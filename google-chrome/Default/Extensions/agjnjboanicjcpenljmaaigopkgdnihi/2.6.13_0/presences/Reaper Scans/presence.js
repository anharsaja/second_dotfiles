var __webpack_exports__={};const presence=new Presence({clientId:"900717839713959967"}),elapsed=Math.floor(Date.now()/1e3);function capitalize(e){return`${e.charAt(0).toUpperCase()}${e.slice(1)}`}presence.on("UpdateData",(()=>{const{pathname:e,href:t}=window.location,a={startTimestamp:elapsed,largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/R/Reaper%20Scans/assets/logo.png"},s=e.split("/").slice(1);switch(s[0]??""){case"":{const e=document.querySelector("#search");e===document.activeElement?(a.details="Searching",a.state=e.value,a.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/search.png"):a.details="Viewing Home Page";break}case"comics":case"novels":{const e=capitalize(s[0]).slice(0,s[0].length-1);if(s[1])if("chapters"===s[2]){let c=document.documentElement.scrollTop/(document.querySelector("comics"===s[0]?"main":"article").scrollHeight-window.innerHeight)*100;c=Math.ceil(c)>100?100:Math.ceil(c),a.details=`Reading ${document.querySelector("main p").textContent.trim()}`,a.state=`${document.querySelector("main nav > div:nth-child(2)").textContent.trim()} - ${c}%`,a.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/reading.png",a.buttons=[{label:`View ${e} Page`,url:document.querySelector("main nav > div:last-child > a").href},{label:"View Chapter",url:t}]}else a.details=`Viewing ${e} Page`,a.state=document.querySelector("h1").textContent,a.smallImageKey="https://cdn.rcd.gg/PreMiD/resources/viewing.png",a.buttons=[{label:`View ${e} Page`,url:t}];else a.details=`Viewing ${e} List`,a.state=`${document.querySelectorAll("h2 + div li").length} ${s[0]}s found`;break}case"latest":a.details=`Browsing Latest ${capitalize(s[1])}`;break;case"account":a.details="Managing Account Settings";break;case"blog":a.details="Reading a Blog Post",a.state=document.querySelector("h1").textContent.trim();break;default:a.details="Browsing Reaper Scans",a.state=document.title}a.details?presence.setActivity(a):presence.setActivity()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VuY2UuanMiLCJtYXBwaW5ncyI6IjJCQUFBLE1BQU1BLFNBQVcsSUFBSUMsU0FBUyxDQUMxQkMsU0FBVSx1QkFDVkMsUUFBVUMsS0FBS0MsTUFBTUMsS0FBS0MsTUFBUSxLQUN0QyxTQUFTQyxXQUFXQyxHQUNoQixNQUFPLEdBQUdBLEVBQUlDLE9BQU8sR0FBR0MsZ0JBQWdCRixFQUFJRyxNQUFNLElBQ3RELENBQ0FaLFNBQVNhLEdBQUcsY0FBYyxLQUN0QixNQUFNLFNBQUVDLEVBQVEsS0FBRUMsR0FBU0MsT0FBT0MsU0FBVUMsRUFBZSxDQUN2REMsZUFBZ0JoQixRQUNoQmlCLGNBQWUsdUVBQ2hCQyxFQUFZUCxFQUFTUSxNQUFNLEtBQUtWLE1BQU0sR0FDekMsT0FBUVMsRUFBVSxJQUFNLElBQ3BCLElBQUssR0FBSSxDQUNMLE1BQU1FLEVBQWNDLFNBQVNDLGNBQWMsV0FDdkNGLElBQWdCQyxTQUFTRSxlQUN6QlIsRUFBYVMsUUFBVSxZQUN2QlQsRUFBYVUsTUFBUUwsRUFBWU0sTUFDakNYLEVBQWFZLGNBQWdCLGtEQUc3QlosRUFBYVMsUUFBVSxvQkFDM0IsS0FDSixDQUNBLElBQUssU0FDTCxJQUFLLFNBQVUsQ0FDWCxNQUFNSSxFQUFtQnZCLFdBQVdhLEVBQVUsSUFBSVQsTUFBTSxFQUFHUyxFQUFVLEdBQUdXLE9BQVMsR0FDakYsR0FBSVgsRUFBVSxHQUNWLEdBQXFCLGFBQWpCQSxFQUFVLEdBQW1CLENBQzdCLElBQUlZLEVBQVlULFNBQVNVLGdCQUFnQkMsV0FDcENYLFNBQVNDLGNBQStCLFdBQWpCSixFQUFVLEdBQWtCLE9BQVMsV0FBV2UsYUFDcEVwQixPQUFPcUIsYUFDWCxJQUNKSixFQUFXN0IsS0FBS2tDLEtBQUtMLEdBQVksSUFBTSxJQUFNN0IsS0FBS2tDLEtBQUtMLEdBQ3ZEZixFQUFhUyxRQUFVLFdBQVdILFNBQzdCQyxjQUFjLFVBQ2RjLFlBQVlDLFNBQ2pCdEIsRUFBYVUsTUFBUSxHQUFHSixTQUNuQkMsY0FBYywrQkFDZGMsWUFBWUMsWUFBWVAsS0FDN0JmLEVBQWFZLGNBQWdCLGtEQUM3QlosRUFBYXVCLFFBQVUsQ0FDbkIsQ0FDSUMsTUFBTyxRQUFRWCxTQUNmWSxJQUFLbkIsU0FBU0MsY0FBYyxpQ0FBaUNWLE1BRWpFLENBQ0kyQixNQUFPLGVBQ1BDLElBQUs1QixHQUdqQixNQUVJRyxFQUFhUyxRQUFVLFdBQVdJLFNBQ2xDYixFQUFhVSxNQUFRSixTQUFTQyxjQUFjLE1BQU1jLFlBQ2xEckIsRUFBYVksY0FBZ0Isa0RBQzdCWixFQUFhdUIsUUFBVSxDQUNuQixDQUNJQyxNQUFPLFFBQVFYLFNBQ2ZZLElBQUs1QixTQU1qQkcsRUFBYVMsUUFBVSxXQUFXSSxTQUNsQ2IsRUFBYVUsTUFBUSxHQUFHSixTQUFTb0IsaUJBQWlCLGVBQWVaLFVBQVVYLEVBQVUsWUFFekYsS0FDSixDQUNBLElBQUssU0FDREgsRUFBYVMsUUFBVSxtQkFBbUJuQixXQUFXYSxFQUFVLE1BQy9ELE1BRUosSUFBSyxVQUNESCxFQUFhUyxRQUFVLDRCQUN2QixNQUVKLElBQUssT0FDRFQsRUFBYVMsUUFBVSxzQkFDdkJULEVBQWFVLE1BQVFKLFNBQVNDLGNBQWMsTUFBTWMsWUFBWUMsT0FDOUQsTUFFSixRQUNJdEIsRUFBYVMsUUFBVSx3QkFDdkJULEVBQWFVLE1BQVFKLFNBQVNxQixNQUdsQzNCLEVBQWFTLFFBQ2IzQixTQUFTOEMsWUFBWTVCLEdBRXJCbEIsU0FBUzhDLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wcmVzZW5jZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwcmVzZW5jZSA9IG5ldyBQcmVzZW5jZSh7XG4gICAgY2xpZW50SWQ6IFwiOTAwNzE3ODM5NzEzOTU5OTY3XCIsXG59KSwgZWxhcHNlZCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDFlMyk7XG5mdW5jdGlvbiBjYXBpdGFsaXplKHN0cikge1xuICAgIHJldHVybiBgJHtzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCl9JHtzdHIuc2xpY2UoMSl9YDtcbn1cbnByZXNlbmNlLm9uKFwiVXBkYXRlRGF0YVwiLCAoKSA9PiB7XG4gICAgY29uc3QgeyBwYXRobmFtZSwgaHJlZiB9ID0gd2luZG93LmxvY2F0aW9uLCBwcmVzZW5jZURhdGEgPSB7XG4gICAgICAgIHN0YXJ0VGltZXN0YW1wOiBlbGFwc2VkLFxuICAgICAgICBsYXJnZUltYWdlS2V5OiBcImh0dHBzOi8vY2RuLnJjZC5nZy9QcmVNaUQvd2Vic2l0ZXMvUi9SZWFwZXIlMjBTY2Fucy9hc3NldHMvbG9nby5wbmdcIixcbiAgICB9LCBwYXRoU3BsaXQgPSBwYXRobmFtZS5zcGxpdChcIi9cIikuc2xpY2UoMSk7XG4gICAgc3dpdGNoIChwYXRoU3BsaXRbMF0gPz8gXCJcIikge1xuICAgICAgICBjYXNlIFwiXCI6IHtcbiAgICAgICAgICAgIGNvbnN0IHNlYXJjaElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZWFyY2hcIik7XG4gICAgICAgICAgICBpZiAoc2VhcmNoSW5wdXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IFwiU2VhcmNoaW5nXCI7XG4gICAgICAgICAgICAgICAgcHJlc2VuY2VEYXRhLnN0YXRlID0gc2VhcmNoSW5wdXQudmFsdWU7XG4gICAgICAgICAgICAgICAgcHJlc2VuY2VEYXRhLnNtYWxsSW1hZ2VLZXkgPSBcImh0dHBzOi8vY2RuLnJjZC5nZy9QcmVNaUQvcmVzb3VyY2VzL3NlYXJjaC5wbmdcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IFwiVmlld2luZyBIb21lIFBhZ2VcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJjb21pY3NcIjpcbiAgICAgICAgY2FzZSBcIm5vdmVsc1wiOiB7XG4gICAgICAgICAgICBjb25zdCBjYXB0aXRhbGl6ZWRQYXRoID0gY2FwaXRhbGl6ZShwYXRoU3BsaXRbMF0pLnNsaWNlKDAsIHBhdGhTcGxpdFswXS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIGlmIChwYXRoU3BsaXRbMV0pIHtcbiAgICAgICAgICAgICAgICBpZiAocGF0aFNwbGl0WzJdID09PSBcImNoYXB0ZXJzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByb2dyZXNzID0gKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgL1xuICAgICAgICAgICAgICAgICAgICAgICAgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocGF0aFNwbGl0WzBdID09PSBcImNvbWljc1wiID8gXCJtYWluXCIgOiBcImFydGljbGVcIikuc2Nyb2xsSGVpZ2h0IC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaW5uZXJIZWlnaHQpKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAxMDA7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzID0gTWF0aC5jZWlsKHByb2dyZXNzKSA+IDEwMCA/IDEwMCA6IE1hdGguY2VpbChwcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gYFJlYWRpbmcgJHtkb2N1bWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCJtYWluIHBcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudC50cmltKCl9YDtcbiAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VEYXRhLnN0YXRlID0gYCR7ZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKFwibWFpbiBuYXYgPiBkaXY6bnRoLWNoaWxkKDIpXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dENvbnRlbnQudHJpbSgpfSAtICR7cHJvZ3Jlc3N9JWA7XG4gICAgICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5zbWFsbEltYWdlS2V5ID0gXCJodHRwczovL2Nkbi5yY2QuZ2cvUHJlTWlEL3Jlc291cmNlcy9yZWFkaW5nLnBuZ1wiO1xuICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuYnV0dG9ucyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogYFZpZXcgJHtjYXB0aXRhbGl6ZWRQYXRofSBQYWdlYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtYWluIG5hdiA+IGRpdjpsYXN0LWNoaWxkID4gYVwiKS5ocmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJWaWV3IENoYXB0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGhyZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJlc2VuY2VEYXRhLmRldGFpbHMgPSBgVmlld2luZyAke2NhcHRpdGFsaXplZFBhdGh9IFBhZ2VgO1xuICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuc3RhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaDFcIikudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5zbWFsbEltYWdlS2V5ID0gXCJodHRwczovL2Nkbi5yY2QuZ2cvUHJlTWlEL3Jlc291cmNlcy92aWV3aW5nLnBuZ1wiO1xuICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuYnV0dG9ucyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogYFZpZXcgJHtjYXB0aXRhbGl6ZWRQYXRofSBQYWdlYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGhyZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gYFZpZXdpbmcgJHtjYXB0aXRhbGl6ZWRQYXRofSBMaXN0YDtcbiAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuc3RhdGUgPSBgJHtkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaDIgKyBkaXYgbGlcIikubGVuZ3RofSAke3BhdGhTcGxpdFswXX1zIGZvdW5kYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJsYXRlc3RcIjoge1xuICAgICAgICAgICAgcHJlc2VuY2VEYXRhLmRldGFpbHMgPSBgQnJvd3NpbmcgTGF0ZXN0ICR7Y2FwaXRhbGl6ZShwYXRoU3BsaXRbMV0pfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiYWNjb3VudFwiOiB7XG4gICAgICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IFwiTWFuYWdpbmcgQWNjb3VudCBTZXR0aW5nc1wiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImJsb2dcIjoge1xuICAgICAgICAgICAgcHJlc2VuY2VEYXRhLmRldGFpbHMgPSBcIlJlYWRpbmcgYSBCbG9nIFBvc3RcIjtcbiAgICAgICAgICAgIHByZXNlbmNlRGF0YS5zdGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoMVwiKS50ZXh0Q29udGVudC50cmltKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IFwiQnJvd3NpbmcgUmVhcGVyIFNjYW5zXCI7XG4gICAgICAgICAgICBwcmVzZW5jZURhdGEuc3RhdGUgPSBkb2N1bWVudC50aXRsZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJlc2VuY2VEYXRhLmRldGFpbHMpXG4gICAgICAgIHByZXNlbmNlLnNldEFjdGl2aXR5KHByZXNlbmNlRGF0YSk7XG4gICAgZWxzZVxuICAgICAgICBwcmVzZW5jZS5zZXRBY3Rpdml0eSgpO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljSEpsYzJWdVkyVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKd2NtVnpaVzVqWlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hOUVVGTkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEZGQlFWRXNRMEZCUXp0SlFVTTFRaXhSUVVGUkxFVkJRVVVzYjBKQlFXOUNPME5CUXpsQ0xFTkJRVU1zUlVGRFJpeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRk5lRU1zVTBGQlV5eFZRVUZWTEVOQlFVTXNSMEZCVnp0SlFVTTVRaXhQUVVGUExFZEJRVWNzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhYUVVGWExFVkJRVVVzUjBGQlJ5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU03UVVGRGVFUXNRMEZCUXp0QlFVVkVMRkZCUVZFc1EwRkJReXhGUVVGRkxFTkJRVU1zV1VGQldTeEZRVUZGTEVkQlFVY3NSVUZCUlR0SlFVTTVRaXhOUVVGTkxFVkJRVVVzVVVGQlVTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SFFVRkhMRTFCUVUwc1EwRkJReXhSUVVGUkxFVkJRM3BETEZsQlFWa3NSMEZCYVVJN1VVRkROVUlzWTBGQll5eEZRVUZGTEU5QlFVODdVVUZEZGtJc1lVRkJZU3gxUlVGQllUdExRVU14UWl4RlFVTkVMRk5CUVZNc1IwRkJSeXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVVV4UXl4UlFVRlJMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlFVVTdVVUZETTBJc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF6dFpRVU5TTEUxQlFVMHNWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVzFDTEZOQlFWTXNRMEZCUXl4RFFVRkRPMWxCUTNoRkxFbEJRVWtzVjBGQlZ5eExRVUZMTEZGQlFWRXNRMEZCUXl4aFFVRmhMRVZCUVVVN1owSkJRek5ETEZsQlFWa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1YwRkJWeXhEUVVGRE8yZENRVU51UXl4WlFVRlpMRU5CUVVNc1MwRkJTeXhIUVVGSExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTTdaMEpCUTNaRExGbEJRVmtzUTBGQlF5eGhRVUZoTEcxRVFVRm5RaXhEUVVGRE8yRkJRek5ET3p0blFrRkJUU3haUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITEcxQ1FVRnRRaXhEUVVGRE8xbEJRMnhFTEUxQlFVMDdVMEZEVGp0UlFVTkVMRXRCUVVzc1VVRkJVU3hEUVVGRE8xRkJRMlFzUzBGQlN5eFJRVUZSTEVOQlFVTXNRMEZCUXp0WlFVTmtMRTFCUVUwc1owSkJRV2RDTEVkQlFVY3NWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZEZEVRc1EwRkJReXhGUVVORUxGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVOMlFpeERRVUZETzFsQlEwWXNTVUZCU1N4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVU3WjBKQlEycENMRWxCUVVrc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEZWQlFWVXNSVUZCUlR0dlFrRkRhRU1zU1VGQlNTeFJRVUZSTEVkQlExZ3NRMEZCUXl4UlFVRlJMRU5CUVVNc1pVRkJaU3hEUVVGRExGTkJRVk03ZDBKQlEyeERMRU5CUVVNc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGRGRFSXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRemxETEVOQlFVTXNXVUZCV1RzMFFrRkRZaXhOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdkMEpCUTNSQ0xFZEJRVWNzUTBGQlF6dHZRa0ZEVEN4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dHZRa0ZGYWtVc1dVRkJXU3hEUVVGRExFOUJRVThzUjBGQlJ5eFhRVUZYTEZGQlFWRTdlVUpCUTNoRExHRkJRV0VzUTBGQmRVSXNVVUZCVVN4RFFVRkRPM2xDUVVNM1F5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJRenR2UWtGRGRrSXNXVUZCV1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhIUVVGSExGRkJRVkU3ZVVKQlF6bENMR0ZCUVdFc1EwRkJhVUlzTmtKQlFUWkNMRU5CUVVNN2VVSkJRelZFTEZkQlFWY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hSUVVGUkxFZEJRVWNzUTBGQlF6dHZRa0ZEZEVNc1dVRkJXU3hEUVVGRExHRkJRV0VzYjBSQlFXbENMRU5CUVVNN2IwSkJRelZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRWRCUVVjN2QwSkJRM1JDT3pSQ1FVTkRMRXRCUVVzc1JVRkJSU3hSUVVGUkxHZENRVUZuUWl4UFFVRlBPelJDUVVOMFF5eEhRVUZITEVWQlFVVXNVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkRNVUlzSzBKQlFTdENMRU5CUXk5Q0xFTkJRVU1zU1VGQlNUdDVRa0ZEVGp0M1FrRkRSRHMwUWtGRFF5eExRVUZMTEVWQlFVVXNZMEZCWXpzMFFrRkRja0lzUjBGQlJ5eEZRVUZGTEVsQlFVazdlVUpCUTFRN2NVSkJRMFFzUTBGQlF6dHBRa0ZEUmp0eFFrRkJUVHR2UWtGRFRpeFpRVUZaTEVOQlFVTXNUMEZCVHl4SFFVRkhMRmRCUVZjc1owSkJRV2RDTEU5QlFVOHNRMEZCUXp0dlFrRkRNVVFzV1VGQldTeERRVUZETEV0QlFVc3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEZkQlFWY3NRMEZCUXp0dlFrRkRPVVFzV1VGQldTeERRVUZETEdGQlFXRXNiMFJCUVdsQ0xFTkJRVU03YjBKQlF6VkRMRmxCUVZrc1EwRkJReXhQUVVGUExFZEJRVWM3ZDBKQlEzUkNPelJDUVVORExFdEJRVXNzUlVGQlJTeFJRVUZSTEdkQ1FVRm5RaXhQUVVGUE96UkNRVU4wUXl4SFFVRkhMRVZCUVVVc1NVRkJTVHQ1UWtGRFZEdHhRa0ZEUkN4RFFVRkRPMmxDUVVOR08yRkJRMFE3YVVKQlFVMDdaMEpCUTA0c1dVRkJXU3hEUVVGRExFOUJRVThzUjBGQlJ5eFhRVUZYTEdkQ1FVRm5RaXhQUVVGUExFTkJRVU03WjBKQlF6RkVMRmxCUVZrc1EwRkJReXhMUVVGTExFZEJRVWNzUjBGRGNFSXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZuUWl4aFFVRmhMRU5CUVVNc1EwRkJReXhOUVVONlJDeEpRVUZKTEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRE8yRkJRekZDTzFsQlEwUXNUVUZCVFR0VFFVTk9PMUZCUTBRc1MwRkJTeXhSUVVGUkxFTkJRVU1zUTBGQlF6dFpRVU5rTEZsQlFWa3NRMEZCUXl4UFFVRlBMRWRCUVVjc2JVSkJRVzFDTEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETzFsQlEzSkZMRTFCUVUwN1UwRkRUanRSUVVORUxFdEJRVXNzVTBGQlV5eERRVUZETEVOQlFVTTdXVUZEWml4WlFVRlpMRU5CUVVNc1QwRkJUeXhIUVVGSExESkNRVUV5UWl4RFFVRkRPMWxCUTI1RUxFMUJRVTA3VTBGRFRqdFJRVU5FTEV0QlFVc3NUVUZCVFN4RFFVRkRMRU5CUVVNN1dVRkRXaXhaUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITEhGQ1FVRnhRaXhEUVVGRE8xbEJRemRETEZsQlFWa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03V1VGRGNrVXNUVUZCVFR0VFFVTk9PMUZCUTBRc1QwRkJUeXhEUVVGRExFTkJRVU03V1VGRFVpeFpRVUZaTEVOQlFVTXNUMEZCVHl4SFFVRkhMSFZDUVVGMVFpeERRVUZETzFsQlF5OURMRmxCUVZrc1EwRkJReXhMUVVGTExFZEJRVWNzVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXp0VFFVTndRenRMUVVORU8wbEJSVVFzU1VGQlNTeFpRVUZaTEVOQlFVTXNUMEZCVHp0UlFVRkZMRkZCUVZFc1EwRkJReXhYUVVGWExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdPMUZCUTNoRUxGRkJRVkVzUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUXp0QlFVTTNRaXhEUVVGRExFTkJRVU1zUTBGQlF5SjkiXSwibmFtZXMiOlsicHJlc2VuY2UiLCJQcmVzZW5jZSIsImNsaWVudElkIiwiZWxhcHNlZCIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJjYXBpdGFsaXplIiwic3RyIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsIm9uIiwicGF0aG5hbWUiLCJocmVmIiwid2luZG93IiwibG9jYXRpb24iLCJwcmVzZW5jZURhdGEiLCJzdGFydFRpbWVzdGFtcCIsImxhcmdlSW1hZ2VLZXkiLCJwYXRoU3BsaXQiLCJzcGxpdCIsInNlYXJjaElucHV0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYWN0aXZlRWxlbWVudCIsImRldGFpbHMiLCJzdGF0ZSIsInZhbHVlIiwic21hbGxJbWFnZUtleSIsImNhcHRpdGFsaXplZFBhdGgiLCJsZW5ndGgiLCJwcm9ncmVzcyIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbFRvcCIsInNjcm9sbEhlaWdodCIsImlubmVySGVpZ2h0IiwiY2VpbCIsInRleHRDb250ZW50IiwidHJpbSIsImJ1dHRvbnMiLCJsYWJlbCIsInVybCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0aXRsZSIsInNldEFjdGl2aXR5Il0sInNvdXJjZVJvb3QiOiIifQ==
undefined;