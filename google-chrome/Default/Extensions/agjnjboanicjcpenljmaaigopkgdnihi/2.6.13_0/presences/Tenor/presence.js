var __webpack_exports__={};const presence=new Presence({clientId:"904304152048439296"}),browsingTimestamp=Math.floor(Date.now()/1e3);presence.on("UpdateData",(async()=>{const e={largeImageKey:"https://cdn.rcd.gg/PreMiD/websites/T/Tenor/assets/logo.png",startTimestamp:browsingTimestamp};if("/"===document.location.pathname)e.details="In home page";else if(document.location.pathname.includes("/view/"))e.details="Viewing a gif:",e.state=document.querySelector("h1").textContent;else if(document.location.pathname.includes("/search/"))e.details="Searching a GIF:",e.state=document.querySelector("h1").textContent;else if(document.location.pathname.includes("/users/"))e.details="Viewing user profile:",e.state=document.querySelector(".partnername").textContent,e.buttons=[{label:"View User",url:document.URL}];else switch(document.location.pathname){case"/reactions":e.details="Viewing reaction GIFs";break;case"/gif-maker":e.details="Uploading a GIF";break;case"/explore":e.details="Exploring GIFs";break;case"/mac":e.details="Viewing Tenor for MAC";break;case"/contentpartners":e.details="Viewing partner list";break;case"/gifapi":e.details="Viewing API";break;case"/gifapi/documentation":e.details="Reading API docs";break;case"/developer/keyregistration":e.details="Registering a new api key";break;case"/developer/dashboard":e.details="Viewing developer dashboard";break;default:e.details="Browsing on the web"}presence.setActivity(e)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VuY2UuanMiLCJtYXBwaW5ncyI6IjJCQUFBLE1BQU1BLFNBQVcsSUFBSUMsU0FBUyxDQUMxQkMsU0FBVSx1QkFDVkMsa0JBQW9CQyxLQUFLQyxNQUFNQyxLQUFLQyxNQUFRLEtBQ2hEUCxTQUFTUSxHQUFHLGNBQWNDLFVBQ3RCLE1BQU1DLEVBQWUsQ0FDakJDLGNBQWUsNkRBQ2ZDLGVBQWdCVCxtQkFFcEIsR0FBbUMsTUFBL0JVLFNBQVNDLFNBQVNDLFNBQ2xCTCxFQUFhTSxRQUFVLG9CQUN0QixHQUFJSCxTQUFTQyxTQUFTQyxTQUFTRSxTQUFTLFVBQ3pDUCxFQUFhTSxRQUFVLGlCQUN2Qk4sRUFBYVEsTUFBUUwsU0FBU00sY0FBYyxNQUFNQyxpQkFFakQsR0FBSVAsU0FBU0MsU0FBU0MsU0FBU0UsU0FBUyxZQUN6Q1AsRUFBYU0sUUFBVSxtQkFDdkJOLEVBQWFRLE1BQVFMLFNBQVNNLGNBQWMsTUFBTUMsaUJBRWpELEdBQUlQLFNBQVNDLFNBQVNDLFNBQVNFLFNBQVMsV0FDekNQLEVBQWFNLFFBQVUsd0JBQ3ZCTixFQUFhUSxNQUFRTCxTQUFTTSxjQUFjLGdCQUFnQkMsWUFDNURWLEVBQWFXLFFBQVUsQ0FDbkIsQ0FDSUMsTUFBTyxZQUNQQyxJQUFLVixTQUFTVyxXQUt0QixPQUFRWCxTQUFTQyxTQUFTQyxVQUN0QixJQUFLLGFBQ0RMLEVBQWFNLFFBQVUsd0JBQ3ZCLE1BQ0osSUFBSyxhQUNETixFQUFhTSxRQUFVLGtCQUN2QixNQUNKLElBQUssV0FDRE4sRUFBYU0sUUFBVSxpQkFDdkIsTUFDSixJQUFLLE9BQ0ROLEVBQWFNLFFBQVUsd0JBQ3ZCLE1BQ0osSUFBSyxtQkFDRE4sRUFBYU0sUUFBVSx1QkFDdkIsTUFDSixJQUFLLFVBQ0ROLEVBQWFNLFFBQVUsY0FDdkIsTUFDSixJQUFLLHdCQUNETixFQUFhTSxRQUFVLG1CQUN2QixNQUNKLElBQUssNkJBQ0ROLEVBQWFNLFFBQVUsNEJBQ3ZCLE1BQ0osSUFBSyx1QkFDRE4sRUFBYU0sUUFBVSw4QkFDdkIsTUFDSixRQUNJTixFQUFhTSxRQUFVLHNCQUluQ2hCLFNBQVN5QixZQUFZZixFQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcHJlc2VuY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcHJlc2VuY2UgPSBuZXcgUHJlc2VuY2Uoe1xuICAgIGNsaWVudElkOiBcIjkwNDMwNDE1MjA0ODQzOTI5NlwiLFxufSksIGJyb3dzaW5nVGltZXN0YW1wID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5wcmVzZW5jZS5vbihcIlVwZGF0ZURhdGFcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHByZXNlbmNlRGF0YSA9IHtcbiAgICAgICAgbGFyZ2VJbWFnZUtleTogXCJodHRwczovL2Nkbi5yY2QuZ2cvUHJlTWlEL3dlYnNpdGVzL1QvVGVub3IvYXNzZXRzL2xvZ28ucG5nXCIsXG4gICAgICAgIHN0YXJ0VGltZXN0YW1wOiBicm93c2luZ1RpbWVzdGFtcCxcbiAgICB9O1xuICAgIGlmIChkb2N1bWVudC5sb2NhdGlvbi5wYXRobmFtZSA9PT0gXCIvXCIpXG4gICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJJbiBob21lIHBhZ2VcIjtcbiAgICBlbHNlIGlmIChkb2N1bWVudC5sb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhcIi92aWV3L1wiKSkge1xuICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IFwiVmlld2luZyBhIGdpZjpcIjtcbiAgICAgICAgcHJlc2VuY2VEYXRhLnN0YXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImgxXCIpLnRleHRDb250ZW50O1xuICAgIH1cbiAgICBlbHNlIGlmIChkb2N1bWVudC5sb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhcIi9zZWFyY2gvXCIpKSB7XG4gICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJTZWFyY2hpbmcgYSBHSUY6XCI7XG4gICAgICAgIHByZXNlbmNlRGF0YS5zdGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoMVwiKS50ZXh0Q29udGVudDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZG9jdW1lbnQubG9jYXRpb24ucGF0aG5hbWUuaW5jbHVkZXMoXCIvdXNlcnMvXCIpKSB7XG4gICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJWaWV3aW5nIHVzZXIgcHJvZmlsZTpcIjtcbiAgICAgICAgcHJlc2VuY2VEYXRhLnN0YXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wYXJ0bmVybmFtZVwiKS50ZXh0Q29udGVudDtcbiAgICAgICAgcHJlc2VuY2VEYXRhLmJ1dHRvbnMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiVmlldyBVc2VyXCIsXG4gICAgICAgICAgICAgICAgdXJsOiBkb2N1bWVudC5VUkwsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChkb2N1bWVudC5sb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgICAgICAgY2FzZSBcIi9yZWFjdGlvbnNcIjpcbiAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IFwiVmlld2luZyByZWFjdGlvbiBHSUZzXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiL2dpZi1tYWtlclwiOlxuICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJVcGxvYWRpbmcgYSBHSUZcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIvZXhwbG9yZVwiOlxuICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJFeHBsb3JpbmcgR0lGc1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIi9tYWNcIjpcbiAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IFwiVmlld2luZyBUZW5vciBmb3IgTUFDXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiL2NvbnRlbnRwYXJ0bmVyc1wiOlxuICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJWaWV3aW5nIHBhcnRuZXIgbGlzdFwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIi9naWZhcGlcIjpcbiAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IFwiVmlld2luZyBBUElcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIvZ2lmYXBpL2RvY3VtZW50YXRpb25cIjpcbiAgICAgICAgICAgICAgICBwcmVzZW5jZURhdGEuZGV0YWlscyA9IFwiUmVhZGluZyBBUEkgZG9jc1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIi9kZXZlbG9wZXIva2V5cmVnaXN0cmF0aW9uXCI6XG4gICAgICAgICAgICAgICAgcHJlc2VuY2VEYXRhLmRldGFpbHMgPSBcIlJlZ2lzdGVyaW5nIGEgbmV3IGFwaSBrZXlcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIvZGV2ZWxvcGVyL2Rhc2hib2FyZFwiOlxuICAgICAgICAgICAgICAgIHByZXNlbmNlRGF0YS5kZXRhaWxzID0gXCJWaWV3aW5nIGRldmVsb3BlciBkYXNoYm9hcmRcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcHJlc2VuY2VEYXRhLmRldGFpbHMgPSBcIkJyb3dzaW5nIG9uIHRoZSB3ZWJcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcmVzZW5jZS5zZXRBY3Rpdml0eShwcmVzZW5jZURhdGEpO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljSEpsYzJWdVkyVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lKd2NtVnpaVzVqWlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hOUVVGTkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEZGQlFWRXNRMEZCUXp0SlFVTTFRaXhSUVVGUkxFVkJRVVVzYjBKQlFXOUNPME5CUXpsQ0xFTkJRVU1zUlVGRFJpeHBRa0ZCYVVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVVZ1UkN4UlFVRlJMRU5CUVVNc1JVRkJSU3hEUVVGRExGbEJRVmtzUlVGQlJTeExRVUZMTEVsQlFVa3NSVUZCUlR0SlFVTndReXhOUVVGTkxGbEJRVmtzUjBGQmFVSTdVVUZEYkVNc1lVRkJZU3hGUVVGRkxEUkVRVUUwUkR0UlFVTXpSU3hqUVVGakxFVkJRVVVzYVVKQlFXbENPMHRCUTJwRExFTkJRVU03U1VGRFJpeEpRVUZKTEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hMUVVGTExFZEJRVWM3VVVGQlJTeFpRVUZaTEVOQlFVTXNUMEZCVHl4SFFVRkhMR05CUVdNc1EwRkJRenRUUVVONlJTeEpRVUZKTEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZCUlR0UlFVTjJSQ3haUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITEdkQ1FVRm5RaXhEUVVGRE8xRkJRM2hETEZsQlFWa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVNN1MwRkRPVVE3VTBGQlRTeEpRVUZKTEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF5eFZRVUZWTEVOQlFVTXNSVUZCUlR0UlFVTXpSQ3haUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITEd0Q1FVRnJRaXhEUVVGRE8xRkJRekZETEZsQlFWa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVNN1MwRkRPVVE3VTBGQlRTeEpRVUZKTEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF5eFRRVUZUTEVOQlFVTXNSVUZCUlR0UlFVTXhSQ3haUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITEhWQ1FVRjFRaXhEUVVGRE8xRkJReTlETEZsQlFWa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVNN1VVRkRlRVVzV1VGQldTeERRVUZETEU5QlFVOHNSMEZCUnp0WlFVTjBRanRuUWtGRFF5eExRVUZMTEVWQlFVVXNWMEZCVnp0blFrRkRiRUlzUjBGQlJ5eEZRVUZGTEZGQlFWRXNRMEZCUXl4SFFVRkhPMkZCUTJwQ08xTkJRMFFzUTBGQlF6dExRVU5HTzFOQlFVMDdVVUZEVGl4UlFVRlJMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeEZRVUZGTzFsQlEyNURMRXRCUVVzc1dVRkJXVHRuUWtGRGFFSXNXVUZCV1N4RFFVRkRMRTlCUVU4c1IwRkJSeXgxUWtGQmRVSXNRMEZCUXp0blFrRkRMME1zVFVGQlRUdFpRVU5RTEV0QlFVc3NXVUZCV1R0blFrRkRhRUlzV1VGQldTeERRVUZETEU5QlFVOHNSMEZCUnl4cFFrRkJhVUlzUTBGQlF6dG5Ra0ZEZWtNc1RVRkJUVHRaUVVOUUxFdEJRVXNzVlVGQlZUdG5Ra0ZEWkN4WlFVRlpMRU5CUVVNc1QwRkJUeXhIUVVGSExHZENRVUZuUWl4RFFVRkRPMmRDUVVONFF5eE5RVUZOTzFsQlExQXNTMEZCU3l4TlFVRk5PMmRDUVVOV0xGbEJRVmtzUTBGQlF5eFBRVUZQTEVkQlFVY3NkVUpCUVhWQ0xFTkJRVU03WjBKQlF5OURMRTFCUVUwN1dVRkRVQ3hMUVVGTExHdENRVUZyUWp0blFrRkRkRUlzV1VGQldTeERRVUZETEU5QlFVOHNSMEZCUnl4elFrRkJjMElzUTBGQlF6dG5Ra0ZET1VNc1RVRkJUVHRaUVVOUUxFdEJRVXNzVTBGQlV6dG5Ra0ZEWWl4WlFVRlpMRU5CUVVNc1QwRkJUeXhIUVVGSExHRkJRV0VzUTBGQlF6dG5Ra0ZEY2tNc1RVRkJUVHRaUVVOUUxFdEJRVXNzZFVKQlFYVkNPMmRDUVVNelFpeFpRVUZaTEVOQlFVTXNUMEZCVHl4SFFVRkhMR3RDUVVGclFpeERRVUZETzJkQ1FVTXhReXhOUVVGTk8xbEJRMUFzUzBGQlN5dzBRa0ZCTkVJN1owSkJRMmhETEZsQlFWa3NRMEZCUXl4UFFVRlBMRWRCUVVjc01rSkJRVEpDTEVOQlFVTTdaMEpCUTI1RUxFMUJRVTA3V1VGRFVDeExRVUZMTEhOQ1FVRnpRanRuUWtGRE1VSXNXVUZCV1N4RFFVRkRMRTlCUVU4c1IwRkJSeXcyUWtGQk5rSXNRMEZCUXp0blFrRkRja1FzVFVGQlRUdFpRVU5RTzJkQ1FVTkRMRmxCUVZrc1EwRkJReXhQUVVGUExFZEJRVWNzY1VKQlFYRkNMRU5CUVVNN1owSkJRemRETEUxQlFVMDdVMEZEVUR0TFFVTkVPMGxCUTBRc1VVRkJVU3hEUVVGRExGZEJRVmNzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0QlFVTndReXhEUVVGRExFTkJRVU1zUTBGQlF5SjkiXSwibmFtZXMiOlsicHJlc2VuY2UiLCJQcmVzZW5jZSIsImNsaWVudElkIiwiYnJvd3NpbmdUaW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93Iiwib24iLCJhc3luYyIsInByZXNlbmNlRGF0YSIsImxhcmdlSW1hZ2VLZXkiLCJzdGFydFRpbWVzdGFtcCIsImRvY3VtZW50IiwibG9jYXRpb24iLCJwYXRobmFtZSIsImRldGFpbHMiLCJpbmNsdWRlcyIsInN0YXRlIiwicXVlcnlTZWxlY3RvciIsInRleHRDb250ZW50IiwiYnV0dG9ucyIsImxhYmVsIiwidXJsIiwiVVJMIiwic2V0QWN0aXZpdHkiXSwic291cmNlUm9vdCI6IiJ9
undefined;